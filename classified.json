{
  "scForMobilityImpairment": [
    {
      "title": "達成基準 1.3.1 情報及び関係性",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   何らかの形で提示されている情報、構造、及び関係性は、プログラムによる解釈が可能である、又はテキストで提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that information and relationships that are implied by visual or auditory formatting are preserved when the presentation format changes. For example, the presentation format changes when the content is read by a screen reader or when a user style sheet is substituted for the style sheet provided by the author.\n\nSighted users perceive structure and relationships through various visual cues — headings are often in a larger, bold font separated from paragraphs by blank lines; list items are preceded by a bullet and perhaps indented; paragraphs are separated by a blank line; items that share a common characteristic are organized into tabular rows and columns; form fields may be positioned as groups that share text labels; a different background color may be used to indicate that several items are related to each other; words that have special status are indicated by changing the font family and /or bolding, italicizing, or underlining them; items that share a common characteristic are organized into a table where the relationship of cells sharing the same row or column and the relationship of each cell to its row and/or column header are necessary for understanding; and so on. Having these structures and these relationships programmatically determined or available in text ensures that information important for comprehension will be perceivable to all.\n\nAuditory cues may be used as well. For example, a chime might indicate the beginning of a new section; a change in voice pitch or speech rate may be used to emphasize important information or to indicate quoted text; etc.\n\nWhen such relationships are perceivable to one set of users, those relationships can be made to be perceivable to all. One method of determining whether or not information has been properly provided to all users is to access the information serially in different modalities.\n\nIf links to glossary items are implemented using anchor elements (or the proper link element for the technology in use) and identified using a different font face, a screen reader user will hear that the item is a link when the glossary term is encountered even though they may not receive information about the change in font face. An on-line catalog may indicate prices using a larger font colored red. A screen reader or person who cannot perceive red, still has the information about the price as long as it is preceded by the currency symbol.\n\nSome technologies do not provide a means to programmatically determine some types of information and relationships. In that case then there should be a text description of the information and relationships. For instance, \"all required fields are marked with an asterisk (*)\". The text description should be near the information it is describing (when the page is linearized), such as in the parent element or in the adjacent element.\n\nThere may also be cases where it may be a judgment call as to whether the relationships should be programmatically determined or be presented in text. However, when technologies support programmatic relationships, it is strongly encouraged that information and relationships be programmatically determined rather than described in text.\n\nNote\n\nIt is not required that color values be programmatically determined. The information conveyed by color cannot be adequately presented simply by exposing the value. Therefore, Success Criterion 1.4.1 addresses the specific case of color, rather than Success Criterion 1.3.1.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with different disabilities by allowing user agents to adapt content according to the needs of individual users.\nUsers who are blind (using a screen reader) benefit when information conveyed through color is also available in text (including text alternatives for images that use color to convey information).\nUsers who are deaf-blind using braille (text) refreshable displays may be unable to access color-dependent information.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.1 キーボード",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツのすべての機能は、個々のキーストロークに特定のタイミングを要することなく、キーボードインタフェースを通じて操作可能である。ただし、その根本的な機能が利用者の動作による終点だけではない軌跡に依存する入力を必要とする場合は除く。\n   \n   注記 1上記の例外は、根本的な機能に関するものであり、入力手法に関するものではない。例えば、テキスト入力に手書き入力を用いるのであれば、その入力手法 (手書き) は利用者の動作による軌跡に依存した入力を必要とするが、その根本的な機能 (テキスト入力) は利用者の動作による軌跡に依存した入力を必要とするものではない。\n   \n   注記 2これは、キーボード操作に加えて、マウス入力、又はその他の入力手段を提供することを禁ずるものでも妨げるものでもない。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that, wherever possible, content can be operated through a keyboard or keyboard interface (so an alternate keyboard can be used). When content can be operated through a keyboard or alternate keyboard, it is operable by people with no vision (who cannot use devices such as mice that require eye-hand coordination) as well as by people who must use alternate keyboards or input devices that act as keyboard emulators. Keyboard emulators include speech input software, sip-and-puff software, on-screen keyboards, scanning software and a variety of assistive technologies and alternate keyboards. Individuals with low vision also may have trouble tracking a pointer and find the use of software much easier (or only possible) if they can control it from the keyboard.\n\nExamples of \"specific timings for individual keystrokes\" include situations where a user would be required to repeat or execute multiple keystrokes within a short period of time or where a key must be held down for an extended period before the keystroke is registered.\n\nThe phrase \"except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints\" is included to separate those things that cannot reasonably be controlled from a keyboard.\n\nMost actions carried out by a pointing device can also be done from the keyboard (for example, clicking, selecting, moving, sizing). However, there is a small class of input that is done with a pointing device that cannot be done from the keyboard in any known fashion without requiring an inordinate number of keystrokes. Free hand drawing, or watercolor painting require path dependent input. Drawing straight lines, regular geometric shapes, re-sizing windows and dragging objects to a location (when the path to that location is not relevant) do not require path dependent input.\n\nThe use of MouseKeys would not satisfy this Success Criterion because it is not a keyboard equivalent to the application; it is a mouse equivalent (i.e., it looks like a mouse to the application).\n\nIt is assumed that the design of user input features takes into account that operating system keyboard accessibility features may be in use. For example, modifier key locking may be turned on. Content continues to function in such an environment, not sending events that would collide with the modifier key lock to produce unexpected results.\n\nNote\n\nPlatforms and user agents usually have conventions for how web content or applications are controlled with a keyboard interface. If content does not follow the platform/user agent conventions it may be difficult to use, as users will need to learn different interaction methods. As a best practice, content should follow the platform/user agent conventions. However, deviating from these conventions does not fail the normative requirement of this Success Criterion.\n\nFor instance, buttons that have focus can generally be activated using both the Enter key and the Space bar. If a custom button control in a web application instead only reacts to Enter (or even a completely custom key or key combination), this still satisfies the requirements of this Success Criterion.\n\nNote\n\nThis Success Criterion does not require that every visible control that can be activated using a mouse or touch screen must also be focusable and actionable using the keyboard. The normative requirement is only that there must be a way for keyboard interface users to perform the same, or comparable, actions and to operate the content. Generally, the easiest way to achieve this is to provide controls that can be operated with all possible input devices; however, if a web application implements a separate mode of operation for keyboard interface users, it will not fail the Success Criterion.",
      "benefitsText": "Benefits\nPeople who are blind (who cannot use devices such as mice that require eye-hand coordination)\nPeople with low vision (who may have trouble finding or tracking a pointer indicator on screen)\nSome people with hand tremors find using a mouse very difficult and therefore usually use a keyboard",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.2 キーボードトラップなし",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   キーボードインタフェースを用いてキーボードフォーカスをそのウェブページのあるコンポーネントに移動できる場合、キーボードインタフェースだけを用いてそのコンポーネントからフォーカスを外すことが可能である。さらに、修飾キーを伴わない矢印キー、Tab キー、又はフォーカスを外すその他の標準的な方法でフォーカスを外せない場合は、フォーカスを外す方法が利用者に通知される。\n   \n   注記この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that that content does not \"trap\" keyboard focus within subsections of content on a Web page. This is a common problem when multiple formats are combined within a page and rendered using plug-ins or embedded applications.\n\nThere may be times when the functionality of the Web page restricts the focus to a subsection of the content, as long as the user knows how to leave that state and \"untrap\" the focus.",
      "benefitsText": "Benefits\nPeople who rely on a keyboard or keyboard interface to use the Web including people who are blind and people with physical disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/no-keyboard-trap.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.3 キーボード (例外なし)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツのすべての機能は、個々のキーストロークに特定のタイミングを要することなく、キーボードインタフェースを通じて操作可能である。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that all content is operable from the keyboard. This is the same as Success Criterion 2.1.1, except that no exceptions are allowed. This does not mean that content where the underlying function requires input that depends on the path of the user's movement and not just the endpoints (excluded from the requirements of 2.1.1) must be made keyboard accessible. Rather, it means that content that uses path-dependent input cannot conform to this Success Criterion and therefore cannot meet Guideline 2.1 at Level AAA.\n\nNote\n\nPlatforms and user agents usually have conventions for how web content or applications are controlled with a keyboard interface. If content does not follow the platform/user agent conventions it may be difficult to use, as users will need to learn different interaction methods. As a best practice, content should follow the platform/user agent conventions. However, deviating from these conventions does not fail the normative requirement of this Success Criterion.\n\nFor instance, buttons that have focus can generally be activated using both the Enter key and the Space bar. If a custom button control in a web application instead only reacts to Enter (or even a completely custom key or key combination), this still satisfies the requirements of this Success Criterion.\n\nNote\n\nThis Success Criterion does not require that every visible control that can be activated using a pointer (such as a mouse or touch screen input) must also be focusable and actionable using the keyboard. The normative requirement is only that there must be a way for keyboard interface users to perform the same, or comparable, actions and to operate the content. Generally, the easiest way to achieve this is to provide controls that can be operated with all possible input devices; however, if a web application implements a separate mode of operation for keyboard interface users, it will not fail the Success Criterion.",
      "benefitsText": "",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/keyboard-no-exception.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.4 文字キーのショートカット",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n  文字 (大文字と小文字を含む)、句読点、数字、又は記号のみを使用したキーボードショートカットがコンテンツに実装されている場合、少なくとも次のいずれかを満たしている:\n\n  \n   \n   解除\n    ショートカットを解除するメカニズムが利用できる \n      \t\t\t\t\t\t\n   再割当て\n     一つ以上のキーボードの非印字キー (例えば Ctrl、Alt) を含むようにショートカットを再割当てするメカニズムが利用できる \n\n    フォーカス中にのみ有効化\n    ユーザインタフェース コンポーネントのキーボードショートカットは、そのコンポーネントがフォーカスをもっているときのみ有効になる。\n    \n    \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to reduce accidental activation of keyboard shortcuts. Character key shortcuts work well for many keyboard users, but are inappropriate and frustrating for speech input users — whose means of input is strings of letters — and for keyboard users who are prone to accidentally hit keys. To rectify this issue, authors need to allow users to turn off or reconfigure shortcuts that are made up of only character keys.\n\nNote that this success criterion doesn't affect components such as listboxes and drop-down menus. Although these components contain values (words) that may be selected by one or more character keys, the shortcuts are only active when the components have focus. Other components such as menus may be accessed or opened with a single non-character shortcut (e.g., Alt or Alt+F) before pressing a single character key to select an item. This makes the full path to invoking a menu a two-step shortcut that includes a non-printable key. Accesskeys are also not affected because they include modifier keys.\n\nSpeech Input users generally work in a single mode where they can use a mix of dictation and speech commands. This works well because the user knows to pause before and after commands, and commands are usually at least two words long. So, for instance, a user might say a bit of dictation, such as \"the small boat\", then pause, and say a command to delete that dictation, such as \"Delete Line\". In contrast, if the user were to say the two phrases together without a pause, the whole phrase would come out as dictation (i.e., \"the small boat delete line\"). Although speech input programs often include modes that listen only for dictation or only for commands, most speech users use the all-encompassing mode all the time because it is a much more efficient workflow. It could decrease command efficiency significantly if users were to change to command mode and back before and after issuing each command.\n\nSpeech users can also speak most keyboard commands (e.g., \"press Control Foxtrot\") without any problems. If the website or app is keyboard enabled, the speech user can also write a native speech macro that calls the keyboard command, such as \"This Print\" to carry out Ctrl+P.\n\nSingle-key shortcuts are the exception. While using single letter keys as controls might be appropriate and efficient for many keyboard users, single-key shortcuts are disastrous for speech users. The reason for this is that when only a single key is used to trip a command, a spoken word can become a barrage of single-key commands if the cursor focus happens to be in the wrong place.\n\nFor example, a speech-input user named Kim has her cursor focus in the main window of a web mail application that uses common keyboard shortcuts to navigate (\"k\"), archive (\"y\") and mute messages (\"m\"). A coworker named Mike enters her office and says \"Hey Kim\" and her microphone picks that up. The Y of \"hey\" archives the current message. K in \"Kim\" moves down one conversation and M mutes a message or thread. And, if Kim looks up and says \"Hey Mike\" without remembering to turn off the microphone, the same three things happen in a different sequence.\n\nA user interacting with a webpage or web app that doesn't use single-character shortcuts doesn't have this problem. Inadvertent strings of characters from the speech application are not interpreted as shortcuts if a modifier key is required. A speech user filling in a text input form may find that a phrase that is accidentally picked up by the speech microphone results in stray text being entered into the field, but that is easily seen and undone. The Resources section of this page contains links to videos demonstrating these types of issues.",
      "benefitsText": "Benefits\nSpeech users will be able to turn off single-key shortcuts so they can avoid accidentally firing batches of them at once. This will allow speech users to make full use of programs that offer single-key shortcuts to keyboard users.\nKeyboard-only users who have dexterity challenges can also be prone to accidentally hitting keys. Those users would be able to avoid problematic single character shortcuts by turning them off or modifying them to include at least one non-character key.\nAllowing all shortcut keys to be remapped can help users with some cognitive disabilities, since the same shortcuts can be assigned to perform the same actions across different applications.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/character-key-shortcuts.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.1 タイミング調整可能",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツに制限時間を設定する場合は、次に挙げる事項のうち、少なくとも一つを満たしている\n   \n   \n      \n      解除\n      \n      制限時間があるコンテンツを利用する前に、利用者がその制限時間を解除することができる。又は、\n         \n      \n      \n      調整\n      \n      制限時間があるコンテンツを利用する前に、利用者が少なくともデフォルト設定の 10 倍を超える、大幅な制限時間の調整をすることができる。又は、\n         \n      \n      \n      延長\n      \n      時間切れになる前に利用者に警告し、かつ少なくとも 20 秒間の猶予をもって、例えば「スペースキーを押す」などの簡単な操作により、利用者が制限時間を少なくとも 10 倍以上延長することができる。又は、\n         \n      \n      \n      リアルタイムの例外\n      \n      リアルタイムのイベント (例えば、オークション) において制限時間が必須の要素で、その制限時間に代わる手段が存在しない。又は、\n         \n      \n      \n      必要不可欠な例外\n      \n      制限時間が必要不可欠なもので、制限時間を延長することがコンテンツの動作を無効にすることになる。又は、\n         \n      \n      \n      20 時間の例外\n      \n      制限時間が 20 時間よりも長い。\n         \n      \n      \n   \n   \n   注記この達成基準は、制限時間の結果として、コンテンツ又は状況の予期せぬ変化を引き起こさないように利用者がタスクを完了できるようにするためのものである。この達成基準は、利用者の動作の結果としてのコンテンツ又はコンテキストの変化を制限する達成基準 3.2.1 と併せて考慮すること。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users with disabilities are given adequate time to interact with Web content whenever possible. People with disabilities such as blindness, low vision, dexterity impairments, and cognitive limitations may require more time to read content or to perform functions such as filling out on-line forms. If Web functions are time-dependent, it will be difficult for some users to perform the required action before a time limit occurs. This may render the service inaccessible to them. Designing functions that are not time-dependent will help people with disabilities succeed at completing these functions. Providing options to disable time limits, customize the length of time limits, or request more time before a time limit occurs helps those users who require more time than expected to successfully complete tasks. These options are listed in the order that will be most helpful for the user. Disabling time limits is better than customizing the length of time limits, which is better than requesting more time before a time limit occurs.\n\nAny process that happens without user initiation after a set time or on a periodic basis is a time limit. This includes partial or full updates of content (for example, page refresh), changes to content, or the expiration of a window of opportunity for a user to react to a request for input.\n\nIt also includes content that is advancing or updating at a rate beyond the user's ability to read and/or understand it. In other words, animated, moving or scrolling content introduces a time limit on a users ability to read content.\n\nThis success criterion is generally not applicable when the content repeats or is synchronized with other content, so long as the information and data is adjustable or otherwise under the control of the end user. Examples of time limits for which this success criterion is not applicable include scrolling text that repeats, captioning, and carousels. These are situations which do include time limits, but the content is still available to the user because it has controls for accessing it, as specified in 2.2.2 Pause, Stop, Hide.\n\nIn some cases, however, it is not possible to change the time limit (for example, for an auction or other real-time event) and exceptions are therefore provided for those cases.\n\nContent that operates on a timer does not need to be time adjustable if there is an alternative that does not rely on a timer. For example, a web application such as an email client provides notification of new email arriving with a temporary message (such as a 'toast' message) in the lower right-hand side of the interface, and the message disappears after 5 seconds. Users are able to identify the arrival of email through other means, such as viewing the Inbox, so the disappearance of the message does not set a time limit on the their ability to determine if new mail has arrived. If the user has no other means of discovering the same information (or performing the same function), then each message would need to meet this Success Criterion in order to provide users with sufficient time to access the information.\n\nNotes regarding server time limits\n\nTimed server redirects can be found below under Common Failures.\nNon-timed server redirects (e.g., 3xx response codes) are not applicable because there is no time limit: they work instantly.\nThis Success Criterion applies only to time limits that are set by the content itself. For example, if a time limit is included in order to address security concerns, it would be considered to have been set by the content because it is designed to be part of the presentation and interaction experience for that content. Time limits set externally to content, such as by the user agent or by factors intrinsic to the Internet are not under the author's control and not subject to WCAG conformance requirements. Time limits set by Web servers should be under the author's/organization's control and are covered. (Success Criteria 2.2.3, 2.2.4 and 2.2.5 may also apply.)\nTen times the default was chosen based on clinical experience and other guidelines. For example, if 15 seconds is allowed for a user to respond and hit a switch, 150 seconds would be sufficient to allow almost all users to hit a switch even if they had trouble.\n20 seconds was also based on clinical experience and other guidelines. 20 seconds to hit 'any switch' is sufficient for almost all users including those with spasticity. Some would fail, but some would fail all lengths of time. A reasonable period for requesting more time is required since an arbitrarily long time can provide security risks to all users, including those with disabilities, for some applications. For example, with kiosks or terminals that are used for financial transactions, it is quite common for people to walk away without signing off. This leaves them vulnerable to those walking up behind them. Providing a long period of inactivity before asking, and then providing a long period for the person to indicate that they are present can leave terminals open for abuse. If there is no activity the system should ask if the user is there. It should then ask for an indication that a person is there ('hit any key') and then wait long enough for almost anyone to respond. For \"hit any key,\" 20 seconds would meet this. If the person indicates that they are still present, the device should return the user to the exact condition that existed before it asked the question.\n20 hours was chosen as an upper limit because it is longer than a full waking day.\n\nIn cases where timing is not an intrinsic requirement but giving users control over timed events would invalidate the outcome, a third party can control the time limits for the user (for example, granting double time on a test).\n\nSee also 2.2.3: No Timing.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.\nPeople with reading disabilities, cognitive limitations, and learning disabilities who may need more time to read or comprehend information can have additional time to read the information by pausing the content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.3 タイミング非依存",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   タイミングは、コンテンツによって提示されるイベント又は動作の必要不可欠な部分ではない。ただし、インタラクティブではない同期したメディア及びリアルタイムのイベントは除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to minimize the occurrence of content that requires timed interaction. This enables people with blindness, low vision, cognitive limitations, or motor impairments to interact with content. This differs from the Level A Success Criterion in that the only exception is for real-time events.\n\nNote\n\nVideo only, such as sign language, is covered in Guideline 1.1.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/no-timing.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.5 再認証",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   認証済のセッションが切れた場合は、再認証後でもデータを失うことなく利用者が操作を継続できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow all users to complete authenticated transactions that have inactivity time limits or other circumstances that would cause a user to be logged out while in the midst of completing the transaction.\n\nFor security reasons, many sites implement an authentication time limit after a certain period of inactivity. These time limits may cause problems for persons with disabilities because it may take longer for them to complete the activity.\n\nOther sites will log a person out of a session if a person logs in on the Web site from another computer or if other activities arise that make the site suspicious of whether the person is still the same legitimate person who logged in originally. When users are logged out while still in the midst of a transaction - it is important that they be given the ability to re-authenticate and continue with the transaction without the loss of any data already entered.",
      "benefitsText": "Benefits\nThis Success Criterion benefits people who may require additional time to complete an activity. People with cognitive limitations may read slowly and require additional time to read and respond to a questionnaire. Users interacting via a screen reader may need extra time to navigate and complete a complicated form. A person with motor impairments or who navigates with an alternative input device may require additional time to navigate through or complete input within a form.\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/re-authenticating.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.1 ブロックスキップ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   複数のウェブページ上で繰り返されているコンテンツのブロックをスキップするメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow people who navigate sequentially through content more direct access to the primary content of the Web page. Web pages and applications often have content that appears on other pages or screens. Examples of repeated blocks of content include but are not limited to navigation links, header content, and advertising frames. Small repeated sections such as individual words, phrases or single links are not considered blocks for the purposes of this provision.\n\nUsers who navigate sequentially through content will generally have to navigate through repeated content on each page. This is in contrast to a sighted user's ability to ignore the repeated material either by focusing on the center of the screen (where main content usually appears) or a mouse user's ability to select a link with a single mouse click rather than encountering every link or form control that comes before the item they want.\n\nIt is not the intent of this Success Criterion to require authors to provide methods that are redundant to functionality provided by the user agent. Most web browsers provide keyboard shortcuts to move the user focus to the top of the page, so if a set of navigation links is provided at the bottom of a web page providing a \"skip\" link may be unnecessary.\n\nNote\n\nAlthough this Success Criterion deals with blocks of content that are repeated on multiple pages, we also strongly promote structural markup on individual pages as per Success Criteria 1.3.1.\n\nAlthough the success criterion does not specifically use the term “within a set of web pages”, the concept of the pages belonging to a set is implied. An author would not be expected to avoid any possible duplication of content in any two pages that are not in some way related to each other, and are not \"Web pages that share a common purpose and that are created by the same author, group or organization” (the definition of set of web pages).\n\nNote\n\nEven for web pages that are not in a set, if a web page has blocks of text that are repeated within the page it may be helpful (but not required) to provide a means to skip over them.",
      "benefitsText": "Benefits\n\nWhen this Success Criterion is not satisfied, it may be difficult for people with some disabilities to reach the main content of a Web page quickly and easily:\n\nScreen reader users who visit several pages on the same site can avoid having to hear all header content and dozens of navigation links on every page before the main content is spoken.\nPeople who use only the keyboard or a keyboard interface can reach content with fewer keystrokes. Otherwise, they might have to make dozens of keystrokes before reaching a link in the main content area. This can take a long time and may cause severe physical pain for some users.\nPeople who use screen magnifiers do not have to search through the same header content or other blocks of information to find where the main content begins each time they enter a new page.\nPeople with cognitive limitations as well as people who use screen readers may benefit when links are grouped into lists",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/bypass-blocks.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.2 ページタイトル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページには、主題又は目的を説明したタイトルがある。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users find content and orient themselves within it by ensuring that each Web page has a descriptive title. Titles identify the current location without requiring users to read or interpret page content. When titles appear in site maps or lists of search results, users can more quickly identify the content they need. User agents make the title of the page easily available to the user for identifying the page. For instance, a user agent may display the page title in the window title bar or as the name of the tab containing the page.\n\nIn cases where the page is a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the page. Note that it is not required to use the name of the document or web application; other things may also describe the purpose or the topic of the page.\n\nIn cases such as Single Page Applications (SPAs), where various distinct pages/views are all nominally served from the same URI and the content of the page is changed dynamically, the title of the page should also be changed dynamically to reflect the content or topic of the current view.\n\nSuccess Criteria 2.4.4 and 2.4.9 deal with the purpose of links, many of which are links to web pages. Here also, the name of a document or web application being linked to would be sufficient to describe the purpose of the link. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.",
      "benefitsText": "Benefits\nThis criterion benefits all users in allowing users to quickly and easily identify whether the information contained in the Web page is relevant to their needs.\nPeople with visual disabilities will benefit from being able to differentiate content when multiple Web pages are open.\nPeople with cognitive disabilities, limited short-term memory and reading disabilities also benefit from the ability to identify content by its title.\nThis criterion also benefits people with severe mobility impairments whose mode of operation relies on audio when navigating between Web pages.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/page-titled.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.3 フォーカス順序",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページが順を追ってナビゲートできて、そのナビゲーション順が意味又は操作に影響を及ぼす場合、フォーカス可能なコンポーネントは、意味及び操作性を損なわない順序でフォーカスを受け取る。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that when users navigate sequentially through content, they encounter information in an order that is consistent with the meaning of the content and can be operated from the keyboard. This reduces confusion by letting users form a consistent mental model of the content. There may be different orders that reflect logical relationships in the content. For example, moving through components in a table one row at a time or one column at a time both reflect the logical relationships in the content. Either order may satisfy this Success Criterion.\n\nThe way that sequential navigation order is determined in Web content is defined by the technology of the content. For example, simple HTML defines sequential navigation via the notion of tabbing order. Dynamic HTML may modify the navigation sequence using scripting along with the addition of a tabindex attribute to allow focus to additional elements. If no scripting or tabindex attributes are used, the navigation order is the order that components appear in the content stream. (See HTML 4.01 Specification, section 17.11, \"Giving focus to an element\").\n\nAn example of keyboard navigation that is not the sequential navigation addressed by this Success Criterion is using arrow key navigation to traverse a tree component. The user can use the up and down arrow keys to move from tree node to tree node. Pressing the right arrow key may expand a node, then using the down arrow key, will move into the newly expanded nodes. This navigation sequence follows the expected sequence for a tree control - as additional items get expanded or collapsed, they are added or removed from the navigation sequence.\n\nThe focus order may not be identical to the programmatically determined reading order (see Success Criterion 1.3.2) as long as the user can still understand and operate the Web page. Since there may be several possible logical reading orders for the content, the focus order may match any of them. However, when the order of a particular presentation differs from the programmatically determined reading order, users of one of these presentations may find it difficult to understand or operate the Web page. Authors should carefully consider all these users as they design their Web pages.\n\nFor example, a screen reader user interacts with the programmatically determined reading order, while a sighted keyboard user interacts with the visual presentation of the Web page. Care should be taken so that the focus order makes sense to both of these sets of users and does not appear to either of them to jump around randomly.\n\nFor clarity:\n\nFocusable components need to receive focus in an order that preserves meaning and operability only when navigation sequences affect meaning and operability.\nIn those cases where it is required, there may be more than one order that will preserve meaning and operability.\nIf there is more than one order that preserves meaning and operability, only one of them needs to be provided.",
      "benefitsText": "Benefits\n\nThese techniques benefit keyboard users who navigate documents sequentially and expect the focus order to be consistent with the sequential reading order.\n\nPeople with mobility impairments who must rely on keyboard access for operating a page benefit from a logical, usable focus order.\nPeople with disabilities that make reading difficult can become disoriented when tabbing takes focus someplace unexpected. They benefit from a logical focus order.\nPeople with visual impairments can become disoriented when tabbing takes focus someplace unexpected or when they cannot easily find the content surrounding an interactive element.\nOnly a small portion of the page may be visible to an individual using a screen magnifier at a high level of magnification. Such a user may interpret a field in the wrong context if the focus order is not logical.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-order.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.4 リンクの目的 (コンテキスト内)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのリンクの目的が、リンクのテキスト単独で、又はリンクのテキストとプログラムによる解釈が可能なリンクのコンテキストから判断できる。ただし、リンクの目的がほとんどの利用者にとって曖昧な場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand the purpose of each link so they can decide whether they want to follow the link. Whenever possible, provide link text that identifies the purpose of the link without needing additional context. Assistive technology has the ability to provide users with a list of links that are on the Web page. Link text that is as meaningful as possible will aid users who want to choose from this list of links. Meaningful link text also helps those who wish to tab from link to link. Meaningful links help users choose which links to follow without requiring complicated strategies to understand the page.\n\nThe text of, or associated with, the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.\n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.\n\nIn some situations, authors may want to provide part of the description of the link in logically related text that provides the context for the link. In this case the user should be able to identify the purpose of the link without moving focus from the link. In other words, they can arrive on a link and find out more about it without losing their place. This can be achieved by putting the description of the link in the same sentence, paragraph, list item, or table cell as the link, or in the table header cell for a link in a data table, because these are directly associated with the link itself. Alternatively, authors may choose to use an ARIA technique to associate additional text on the page with the link.\n\nThis context will be most usable if it precedes the link. (For instance, if you must use ambiguous link text, it is better to put it at the end of the sentence that describes its destination, rather than putting the ambiguous phrase at the beginning of the sentence.) If the description follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).\n\nIt is a best practice for links with the same destination to have consistent text (and this is a requirement per Success Criterion 3.2.4 for pages in a set). It is also a best practice for links with different purposes and destinations to have different link text.\n\nA best practice for links to conforming alternate versions is to ensure that the link text to the conforming alternate version indicates in link text that the page it leads to represents the more accessible version. This information may also be provided in text - the goal is to ensure that the end user knows what the purpose of the link is.\n\nThe Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text or programmatically associated with the link to satisfy the Success Criterion.\n\nNote\n\nThere may be situations where the purpose of the link is is supposed to be unknown or obscured. For instance, a game may have links identified only as door #1, door #2, and door #3. This link text would be sufficient because the purpose of the links is to create suspense for all users.\n\nSee also 2.4.9: Link Purpose (Link Only).",
      "benefitsText": "Benefits\nThis Success Criterion helps people with motion impairment by letting them skip links that they are not interested in, avoiding the keystrokes needed to visit the referenced content and then returning to the current content.\nPeople with cognitive limitations will not become disoriented by multiple means of navigation to and from content they are not interested in.\nPeople with visual disabilities will be able to determine the purpose of a link by exploring the link's context.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.7 フォーカスの可視化",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   キーボード操作が可能なあらゆるユーザインタフェースには、フォーカスインジケータが見える操作モードがある。\n   \n",
      "intentText": "Intent\n\nThe purpose of this success criterion is to help a person know which element has the keyboard focus.\n\n“Mode of operation” accounts for user agents which may not always show a focus indicator, or only show the focus indicator when the keyboard is used. User agents may optimise when the focus indicator is shown, such as only showing it when a keyboard is used. Authors are responsible for providing at least one mode of operation where the focus is visible. In most cases there is only one mode of operation so this success criterion applies. The focus indicator must not be time limited, when the keyboard focus is shown it must remain.\n\nNote that a keyboard focus indicator can take different forms. New in WCAG 22: While Focus Visible does not specify what that form is, 2.4.13 Focus Appearance (Level AAA) provides guidance on creating a consistent, visible indicator.",
      "benefitsText": "Benefits\nThis Success Criterion helps anyone who relies on the keyboard to operate the page, by letting them visually determine the component on which keyboard operations will interact at any point in time.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-visible.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.9 リンクの目的 (リンクのみ)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのリンクの目的を、リンクのテキスト単独で特定できるメカニズムが利用できる。ただし、リンクの目的がほとんどの利用者にとって曖昧な場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand the purpose of each link in the content, so they can decide whether they want to follow it. Best practice is that links with the same destination would have the same descriptions, but links with different purposes and destinations would have different descriptions (see also Success Criterion 3.2.4 which calls for consistency in identifying components that have the same functionality). Because the purpose of a link can be identified from its link text, links can be understood when they are out of context, such as when the user agent provides a list of all the links on a page.\n\nThe text in the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.\n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.\n\nThe Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text to satisfy the Success Criterion.\n\nThe word \"mechanism\" is used to allow authors to either make all links fully understandable out of context by default or to provide a way to make them this way. This is done because for some pages, making the links all unambiguous by themselves makes the pages easier for some users and harder for others. Providing the ability to make the links unambiguous (by them selves) or not provides both users with disabilities with the ability to use the page in the format that best meets their needs.\n\nFor example: A page listing 100 book titles along with links to download the books in HTML, PDF, DOC, TXT, MP3, or AAC might ordinarily be viewed as the title of the book as a link with the words \"in HTML\" after it. then the sentence \"Also available in: \" followed by a series of short links with text of \"HTML\", \"PDF\", \"DOC\", \"TXT\", \"MP3\", and \"AAC\". At Level 3, some users could opt to view the page this way - because they would find the page harder to understand or slower to use if the full title of the book were included in each of the links. Others could opt to view the page with the full title as part of each of the links so that each link was understandable in itself. Both the former and the latter groups could include people with visual or cognitive disabilities that used different techniques to browse or that had different types or severities of disability.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with motion impairment by letting them skip Web pages that they are not interested in, avoiding the keystrokes needed to visit the referenced content and then return to the current content.\nPeople with cognitive limitations will not become disoriented by extra navigation to and from content they are not interested in.\nPeople with visual disabilities will benefit from not losing their place in the content when they return to the original page. The screen reader's list of links is more useful for finding information because the target of the links are described.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-link-only.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.10 セクション見出し",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   セクション見出しを用いて、コンテンツが整理されている。\n   \n   注記 1見出しはその一般的な意味で用いられており、タイトルや様々なタイプのコンテンツに見出しを付加するその他の手段を含む。\n   \n   注記 2この達成基準は、文書におけるセクションを対象としており、ユーザインタフェース コンポーネントは対象としていない。ユーザインタフェース コンポーネントについては、達成基準 4.1.2 が対象にしている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide headings for sections of a Web page, when the page is organized into sections. For instance, long documents are often divided into a variety of chapters, chapters have subtopics, etc. When such sections exist, they need to have headings that introduce them. This clearly indicates the organization of the content, facilitates navigation within the content, and provides mental \"handles\" that aid in comprehension of the content. Other page elements may complement headings to improve presentation (e.g., horizontal rules and boxes), but visual presentation is not sufficient to identify document sections.\n\nThis provision is included at Level AAA because it cannot be applied to all types of content and it may not always be possible to insert headings. For example, when posting a pre-existing document to the Web, headings that an author did not include in the original document cannot be inserted. Or, a long letter would often cover different topics, but putting headings into a letter would be very strange. However, if a document can be broken up into sections with headings, it facilitates both understanding and navigation.",
      "benefitsText": "Benefits\nPeople who are blind will know when they have moved from one section of a Web page to another and will know the purpose of each section.\nPeople with some learning disabilities will be able to use the headings to understand the overall organization of the page content more easily.\nPeople who navigate content by keyboard will be able to jump the focus from heading to heading, enabling them to find quickly content of interest.\nIn pages where content in part of the page updates, headings can be used to quickly access updated content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/section-headings.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.11 隠されないフォーカス (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ユーザインタフェース コンポーネントがキーボードフォーカスを受け取るとき、コンテンツ制作者が作成したコンテンツによって、そのコンポーネントの全体が隠されるようなことがない。\n\n    注記 1設定可能なインタフェースの中にあるコンテンツが利用者によって再配置可能な場合、この達成基準のテスト及び適合性の対象として検討されるのは、利用者によって移動可能なコンテンツの初期位置だけである。\n\n    注記 2利用者が開いたコンテンツによって、フォーカスを受け取るコンポーネントが隠される場合がある。利用者がキーボードフォーカスを移動せずにフォーカスを持つコンポーネントを表示できる場合、そのフォーカスを持つコンポーネントは、コンテンツ制作者が作成したコンテンツによって隠されたとはみなされない。\n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the item receiving keyboard focus is always partially visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.\n\nIn recognition of the complex responsive designs common today, this AA criterion allows for the component receiving focus to be partially obscured by other author-created content. A partly obscured component can still be very visible, although the more of it that is obscured, the less easy it is to see. For that reason, authors should attempt to design interactions to reduce the degree and frequency with which the item receiving focus is partly obscured. For best visibility, none of the component receiving focus should be obscured. This preferred outcome is covered by the AAA criterion Focus Not Obscured (Enhanced).\n\nTypical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can obscure the item receiving focus, along with its focus indicator.\n\nA notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it entirely obscures a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.\n\nAnother form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. While less than 100 percent opacity is not causing the component to be entirely obscured, such semi-opaque overlaps may cause a failure of 1.4.11 Non-text Contrast. When a focus indicator can be covered by a semi-opaque component, the ability of the focus indicator to pass 1.4.11 should be evaluated (and pass) while the focus indicator is under the semi-opaque component. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.\n\nUser-movable content\n\nThis SC contains a note regarding content that can be repositioned. If users can move content regions, then they can potentially position the movable content such that it obscures other content that may receive focus. In such a case, the author is only responsible for ensuring that the movable content in its initial position does not obscure the item receiving focus.\n\nThis note is intended to accommodate a common interaction in complex applications such as authoring tools, where the main editing region (also called a canvas) can be enhanced by displaying toolbars or other panels, which can be repositioned around the canvas. It is possible to design such toolbars so they do not obscure focus. Authors are encouraged to do so, as well as pursue techniques which ensure equitable keyboard use of such toolbars. However, in recognition of the complexities involved in responsive design as well as in supporting the ability to transform the text size and spacing of content, only the starting position of such movable panels is assessed.\n\nUser-opened content\n\nThis SC contains a note regarding content that is opened or disclosed by the user. One example of such content is a menu button opened by a user that opens a list of choices over pre-existing content on the screen. Such content can obscure other information on the screen, but it does not obscure an item receiving keyboard focus, because the new content doesn't stay open through a change of focus. However, authors may create user-opened content that is intentionally designed to persist until closed by the user, such as a chat window. Such persistent content has the potential to fail Focus Not Obscured (Minimum). Various types are described in this section. All can be designed so that they pass this Success Criterion.\n\nThis section only applies to content that the user actively discloses. Content pre-positioned by the author (such as a sticky footer), or content that appears without direct user initiation, such as system warnings, must not prevent the item receiving focus from being immediately visible in the viewport. Also, this note is not intended to apply to disclosures that are by convention non-persistent. As discussed in the following sub-section, an open dropdown that does not close when no longer focused is not following this convention.\n\nNon-persistent opened information\n\nA number of components on the web open (or disclose) additional content (on activation or on focus) intended for immediate user interaction or information. This new content is often on top of other content, obscuring it. Examples of such components are menu items, select element items, combobox lists (and other dropdown items), date picker calendars, and tooltips. The common trait of all these components is that they are not expected to persist after being acted on or once they are no longer the primary point of user interaction. Such non-persistent disclosures do not fail this SC since they do not obscure the item with focus. However, if an author allows such components to persist after the user has 1) activated one of the opened items or 2) moved the focus away from the triggering item and the additional content, it is at risk of failing this criterion by obscuring the item with focus.\n\nUser openable, persistent disclosures\n\nSome disclosure patterns provide a mechanism for the user to open additional content that remains open until intentionally closed by the user. Accordions are a simple example of such a pattern. Chatbots and expandable side navigation are more complex examples. All of these patterns can be implemented so they are not at risk of failing this SC. Some possible approaches are:\n\nWhen the additional content appears, it displaces existing content. An accordion is an example of this. When an accordion is opened, the disclosed content shifts existing content further down the page. Since the new content does not obscure existing content, it cannot obscure the item with focus.\nWhen the additional content appears, existing content reflows. The popout sidebar on the WCAG standard is an example of this pattern. When the side menu is activated, it opens a new section of information along the left side of the page. The main content area is reduced horizontally to accommodate the new content, and the existing content reflows to fit in the thinner space. As a result, there is no overlapping content between the two sections; the item receiving focus, whether in the left navigation or in the main content, will not be obscured by the other section.\nWhen the additional content is opened, it takes focus and the tab ring is constrained to the new content until it is dismissed. This modality is somewhat like a dialog, in that a user cannot navigate beyond the opened content by keyboard without dismissing it first (typically by pressing Esc). However, unlike in a modal dialog, in some implementations a pointer user may be able to interact with content outside the opened section without dismissing it. Since this pattern potentially creates an inequitable experience between keyboard and pointer users, it should be used cautiously. That said, it does prevent the opened content from obscuring the keyboard focus in the main content, and thus should pass this SC. This is described and demonstrated in a short video in the Knowbility article in the reference section, under the section heading Keep keyboard focus in the slide-out navigation until it's closed.\nThe disclosure expands into an area of the page containing no other content. Many pages are designed with wide margins, providing significant white space into which new content can be opened. Many chatbots and toast notifications are designed to 'slide up' into the right unpopulated side of a page. Where authors are careful to ensure content is not obscured at each breakpoint in a responsive design, no obscuring of other operable content need occur.\nWhen focus leaves the additional content, the additional content is automatically hidden or collapsed, or the content can be hidden or collapsed by use of a dedicated keyboard command (for example, the Escape key.) This is very similar to patterns discussed previously under Non-persistent opened information. A distinguishing factor can be that the user's last point of interaction in the disclosure is preserved (it persists) even though it may be hidden until a user returns. Some trees and left navigation patterns behave this way.\n\nIn recognition of more complex interfaces and user needs there is a note: Content opened by the user may obscure the component receiving focus. If the user can bring the item with focus into view using a method without having to navigate back to the user-opened content to dismiss it, this criterion would be passed. For example, keyboard actions that may allow the item with focus to be revealed include:\n\nusing the Escape key to dismiss the obscuring content;\nusing keys to scroll the content in the viewport to reveal the item with focus;\nissuing a key to move between overlays.\n\nFor example:\n\nA user opens a chat interface, which is a popover non-modal dialog. This results in some content of the underlying page being fully obscured. The user navigates away from the chat interface by use of the tab key, focusing onto a link that has been fully obscured by the dialog. The user presses the Escape key to close the chat interface, which un-obscures the link.\nA user expands a fixed-position page feedback component at the bottom of a Web page. They then use their keyboard to navigate to a link that's fully obscured by the expanded component and press the down arrow or space key on their keyboard to scroll the content on the page, un-obscuring the link.\nA user opens a web-based multi-user authoring application. An overlay appears displaying a list of people who have contributed to the document. The user tabs through the list of contributors and activates one of them. The application displays a new overlay, which obscures the first one, that displays that person's recent contributions. The user presses the F6 key to toggle the stacking order of the two overlays.\nModal dialogs\n\nA properly constructed modal dialog will always pass this SC. Even if it appears directly on top of an item with focus, the dialog takes focus on appearance, and thus the item receiving focus -- the dialog or one of its components -- is visible. A properly constructed modal maintains that focus and prevents interaction outside the modal until it is dismissed.\n\nA dialog-like overlay that does not take focus on appearance and does not either constrain interaction to the overlay or dismiss itself on loss of focus (thus allowing focus to exit into the content behind it) will be at risk of failing this SC, where it is positioned such that it can obscure other focusable items.",
      "benefitsText": "Benefits\nSighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on a keyboard or on devices which use the keyboard interface, including speech input, sip-and-puff software, onscreen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.\nPeople with limited or low vision, who may primarily user a pointer for screen orientation and repositioning, nonetheless benefit from a visible indication of the current point of keyboard interaction, especially where magnification reduces the overall viewing portion of the screen.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-minimum.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.12 隠されないフォーカス (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ユーザインタフェース コンポーネントがキーボードフォーカスを受け取るとき、コンテンツ制作者が作成したコンテンツによって、そのコンポーネントのどの部分も隠されることがない。\n\n    \n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the item receiving keyboard focus is always visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.\n\nTypical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can hide the item receiving focus, along with its focus indicator.\n\nA notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it partially covers a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.\n\nAnother form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. This form of obscuring is not in scope for this Success Criterion. While less than 100 percent opacity is not causing the component to be visually hidden, such semi-opaque overlaps may cause a failure of 2.4.11 Focus Appearance. When a focus indicator can be covered by a semi-opaque component, the the focus indicator should be assessed against 2.4.11. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.",
      "benefitsText": "Benefits\nSighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on devices which use the keyboard interface, including speech input, sip-and-puff software, on-screen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.\nPeople with limited or low vision but who rely upon a pointing device (for viewport orientation and repositioning) benefit from a clearly visible indication of the current point of keyboard interaction, especially where magnification reduces the overall useable portion of content.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to more easily discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-enhanced.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.13 フォーカスの外観",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    キーボードのフォーカスインジケータが視覚的に表示される場合、フォーカスインジケータの領域が以下の全てを満たす。\n    \n        フォーカスされていないコンポーネント又はサブコンポーネントの、太さ 2 CSS ピクセルの外周の領域と同等以上の大きさである。かつ、\n        フォーカスされている状態とフォーカスされていない状態との間で、同一ピクセルに少なくとも 3:1 のコントラスト比がある。\n    \n\n    例外:\n    \n      フォーカスインジケータがユーザエージェントによって決定され、かつコンテンツ制作者が調整できない場合。又は、\n        コンテンツ制作者がフォーカスインジケータ及びそのインジケータの背景色を変更していない場合。\n    \n    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t注記 1ユーザインタフェースコンポーネント又はサブコンポーネントとして認識されるもの (輪郭又は大きさを決定づけるもの) は、その視覚的提示に依存する。視覚的提示には、コンポーネントの可視コンテンツ、ボーダー、及びコンポーネント固有の背景が含まれる。コンポーネントのコンテンツ、背景、又はボーダーの外側にある、影及びグロー効果は含まれない。\n\n    注記 2フォーカスインジケータを受け取ることができるサブコンポーネントの例としては、開いたドロップダウンメニューのメニュー項目、グリッド内のフォーカス可能なセルなどがある。\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t注記 3コントラストは、(HTML、CSS、及び SVG のような) 技術の中で定義された色を基に計算できる。その際、ユーザエージェントの高解像度化及びアンチエイリアスによって変更されたピクセルは無視できる。\n\n ",
      "intentText": "Intent\n\nThe purpose of this Success Criterion is to ensure a keyboard focus indicator is clearly visible and discernible. Focus Appearance is closely related to 2.4.7 Focus Visible and 1.4.11 Non-text Contrast. Focus Visible requires that a visible focus indicator exists while a component has keyboard focus; Focus Appearance defines a minimum level of visibility. Where Non-text Contrast requires a component to have adequate contrast against the background in each of its states, Focus Appearance requires sufficient contrast for the focus indicator itself.\n\nFor sighted people with mobility impairments who use a keyboard or a device that utilizes the keyboard interface (such as a switch or voice input), knowing the current point of focus is very important. Visible focus must also meet the needs of users with low vision, who may also rely on the keyboard.\n\nA keyboard focus indicator can take different forms. This Success Criterion encourages the use of a solid outline around the focused user interface component, but allows other types of indicators that are at least as large.\n\nThis Understanding document will elaborate on the minimum area requirement, color contrast requirements, and finally list some user agent exceptions.\n\nMinimum area\n\nThe first part of the Success Criterion specifies a minimum area for the focus indicator:\n\nis at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component\n\nThis only specifies a minimum area for the focus indicator. It does not require that the focus indicator literally be a 2 CSS pixel thick outline, only that the indicator be at least that large.\n\nHowever, the simplest way to meet the size requirement is to use a focus indicator which is a solid 2 CSS pixel thick perimeter.\n\nNote\n\nA CSS pixel is what developers use in CSS declarations like “width: 200px”. It is device-independent and not to be confused with device pixels which vary depending on the physical pixel density.\nThe rest of this document notates CSS pixels as “px”.\n\nUsing a solid outline\n\nThe easiest and most common way to meet this requirement is to use a solid outline around the component. The outline must be at least 2px thick. The following illustration shows a minimally thick focus indicator, where a 2px thick band of white pixels making up the page background around an example button have been altered to black.\n\nFigure 1 Passes: The focus indicator is a solid 2px thick outline.\n\nFor non-rectangular components, the \"perimeter\" definition allows authors to use either of the following types of outline:\n\na line which solidly encloses a shape, or\na line which solidly encloses the minimum bounding box of a shape\n\nFor example, a star-shaped button may use either a focus indicator that follows the shape of the star or a focus indicator that follows the bounding box of the star. In the following examples, the same three stars have already been selected, and focus is on the third star. The first example uses a focus indicator which matches the star shape of the focused star. The second uses a rectangular indicator.\n\nFigure 2 Passes: a solid outline indicator surrounds the third of five stars.\nFigure 3 Passes: a solidly bound focus rectangle encloses the third of five stars.\n\nOffsetting indicators slightly from the focused component, as in the examples above, is not required to meet the minimum area requirement of the success criterion, but it can help make indicators more visible. In CSS, the outline and outline-offset properties are commonly used to achieve this.\n\nThe smallest possible 2 CSS pixel thick indicator that is still a \"perimeter\" is a solid line that appears inside the component against the component's outer edge, for example by using a CSS border property. Indicators that are inset further within the component (not directly against the component's outer edge) need to be thicker than 2 CSS pixels to meet the minimum size requirement.\n\nFigure 4 All four of these example focus indicators are 2px solid lines. The \"outset\", \"outline\", and \"border\" indicators pass. The \"inset\" indicator does not meet the minimum area requirement and fails; it would need to be at least 3px thick to pass.\n\nNote that different Non-text Contrast requirements may apply depending on whether the focus indicator is offset from, inset into, or against the edge of the component. See the Relationship with Non-text Contrast section below.\n\nOther indicator shapes\n\nThis Success Criterion does not require that focus indicators be solid outlines. Other shapes may be used so long as they meet the minimum area requirement.\n\nThe minimum area of the focus indicator for a control is the area of a 2 CSS pixel thick perimeter of the control (or its minimum bounding box) in the control's unfocused state. For example, if a control is a rectangle 90px wide and 30px tall, the area of a 2 CSS pixel thick perimeter is difference between the areas of:\n\nA 92px by 32px rectangle (1px larger on all sides), and\nA 88px by 28px rectangle (1px smaller on all sides)\n\nThis results in a minimum area of (92px * 32px) - (88px * 28px) = 480px2.\n\nSome general formulas for 2 CSS pixel thick perimeters of common shapes are:\n\nRectangle with width w and height h\n4h + 4w\nCircle with radius r\n4𝜋r\nRounded rectangle with width w, height h, and border radius r\n4h + 4w - (16 - 4𝜋)r\n\nNote\n\nIf you need to use complex mathematics to work out if a focus indicator is large enough, it is probably a sign that you should use a larger indicator instead. The bigger the visible change when an item receives focus, the easier it is for someone to see.\n\nThe following 2 examples use a 90px wide by 30px tall button, with a minimum area requirement of 480px2:\n\nFigure 5 Passes: the inner outline is inset slightly from the outer edge of the component, but compensates for this by being 3px thick. It has an area of 612px2, which exceeds the 480px2 minimum.\nFigure 6 Passes: the indicator rectangles on either side of the focused button are each 9px wide by 28px tall. In total, they are 504px2, which just barely meets the 480px2 minimum.\n\nNote\n\nPrefer using focus indicator techniques that scale with both the width and height of the focused control. Otherwise, if controls change size across different variations of a page (for example, in a responsive design), the indicator might meet the area requirement in some variations but not others. For example, in the above figure, if the width of the two highlight rectangles did not scale as the button grew wider, it would stop meeting the minimum area requirement if the button needed to grow any wider to accomodate a longer button label.\n\nAnother way of achieving the area requirement is to alter the appearance of the entire component, for instance by changing its color – provided that the new color has a contrast ratio of at least 3:1 against the original color. This can be effective in a set of closely placed buttons. The following example demonstrates this with 5 rating stars; the center star is filled in with a darker color to indicate focus. However, it is much more difficult to detect such a focus indicator when components are not near each other and so cannot be easily compared. For users using magnification, even components relatively close together may be difficult to compare, so it is not considered a best practice.\n\nFigure 7 Passes: a color change applies to the whole third star to indicate focus.\nInline links\n\nIf an inline link is broken over multiple lines, some methods of creating a focus indicator create different results by browsers. CSS outline separately surrounds each part of a link that breaks across multiple lines. It is by far the most common CSS technique for focus indication, and produces a result that satisfies the minimum bounding box definition since each part is solidly bound. CSS border will split the perimeter across the parts of the link, which results in an unenclosed border for each line of the link. The minimum bounding box definition states that link focus can be assessed as if the link was all on one line, so a 2px thick border is also considered to meet the minimum area requirement. Therefore, where the contrast requirements are met, each of these methods can produce a sufficient focus indicator.\n\nFigure 8 Passes: the CSS outline property solidly bounds each part of the link completely, so it meets the definition of a perimeter.\nFigure 9 Passes: Although the CSS border on a multi-line link does not enclose the separate parts of the link, the minimum bounding box definition allows it to be assessed as if it was on a single line, so it also qualifies as a perimeter.\nChange of contrast\n\nThe second part of the Success Criterion's indicator requirements states that an area of the indicator:\n\nhas a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states\n\nThis requirement measures the change of contrast between the same pixels in different states. This is different from the Text Contrast and Non-text Contrast Success Criteria, which measure the contrast between different adjacent pixels in a single state at a time.\n\n3:1 is the minimum allowable change-of-contrast ratio, but the greater the change of contrast between states, the easier it is for users to see the focus indicator. Authors are encouraged to make the change-of-contrast ratio as great as possible.\n\nThe following illustration shows a minimally contrasting focus indicator, where some of the white pixels making up the page background have been altered to a mid-grey that has a 3:1 contrast ratio with the original white. Authors are encouraged to exceed the minimum focus appearance. For instance, the dark blue lines in figures 2 and 3 are much more visible.\n\nFigure 10 Passes: Two buttons in the shape of a star, with the second surrounded by a focus indicator whose pixels contrast 3:1 between focused (light grey) and unfocused (white) states.\n\nWhen a component changes to include a focus indicator, that change can be measured as a change of color contrast. For example, if a yellow outline is added to a button on a blue background, the change of color is from blue to yellow. This change can be measured whether the focus indicator is on the background around the component, or the background within the component.\n\nFigure 11 Passes: adding a yellow outline to a link is a change of color from blue to yellow. That change has a contrast ratio of 12:1.\n\nIf a control receiving focus changes its background (fill color) to a color that contrasts less than 3:1 with the original background, that would not pass the change of contrast.\n\nFigure 12 Fails: the second link has a dark-grey (#555) which fails this Success Criterion because the change from black-background to dark-grey background does not meet 3:1.\n\nIf the background change is sufficient, it is a method of passing the criterion.\n\nFigure 13 Passes: the second link has a white background (#fff) which passes this Success Criterion because the change from black-background to white-background meets 3:1.\nPartially contrasting indicators\n\nIt is not necessary for the entire focus indicator to have a 3:1 change of contrast. It is sufficient for just a part of the indicator to meet the change of contrast requirement, so long as the contrasting part of the indicator meets the minimum area requirement.\n\nFigure 14 Passes: The black part of the indicator meets 3:1 contrast with the white background, but the gray part does not. The black part is 2px thick, so it meets the minimum area requirement on its own and the gray part can be ignored.\nFigure 15 Fails: The indicator as a whole is 2px thick, but the part of it that has sufficient change-of-contrast is only 1px thick. The part of the indicator with sufficient change-of-contrast does not meet the minimum area requirement.\n\nWhen calculating whether a focus indicator meets the minimum area requirement, only the part of the indicator which meets the change-of-contrast requirement should be included in the calculation.\n\nGradients\n\nIf a focus indicator has a gradient, the principle is to measure the contrast of the changed area, and ignore any part of the gradient which has less than a 3:1 change-of-contrast ratio.\n\nFigure 16 When a gradient is used on a focus indicator, the measure of surface area should only include the area that has changed enough to meet the 3:1 contrast ratio.\n\nIf you eliminate the area which has less than 3:1 change-of-contrast, you can calculate the area of the remaining parts of the indicator to determine whether the indicator meets the minimum area requirement.\n\nFigure 17 Passes: the same focused button with the non-contrasting areas removed. The contrasting area is 6px thick along most of the bottom edge and 3-4px thick on the left and right edges, which is enough to meet the minimum area requirement.\n\nNote\n\nSome of the examples in this document are screen-captured images of elements. Due to loss of resolution in these images, the actual pixel color may not match the original. As such, they are intended to be used for illustrative purposes, and should not be inspected on a pixel-by-pixel basis for sufficient contrast.\n\nSome designs have pages with a non-solid background image covering the whole (or part) of the page or make use of parallax scrolling effects which result in a near-infinite number of color combinations if a page is scrolled and/or changes are made to the viewport size.\n\nIf the contrast of background colors that change are close enough to need to be tested for each combination then they would likely not meet the user need of people with low vision in certain scroll combinations and would likely fail in certain combinations as well. In these cases it would be an easy solution to use a two-color focus indicator or some other mechanism to indicate focus such as a solid box with a border to guarantee there is sufficient contrast across variations of background images or background gradients.\n\nIt is possible to use visual patterns such as strips switching places to disguise a change of focus indicator. However, this is not considered a visible indicator.\n\nRelationship with Non-text Contrast\n\nFocus indicators are visual information required to identify a state of a user interface component. That means that they are subject to 1.4.11 Non-text Contrast, in addition to 2.4.13 Focus Appearance.\n\nIn combination with 2.4.7 Focus Visible, 1.4.11 Non-text Contrast requires that the visual focus indicator for a component must have sufficient contrast against the adjacent colors when the component is focused, except where the appearance of the component is determined by the user agent and not modified by the author.\n\nThe difference between the contrast requirements in Focus Appearance and Non-text Contrast is:\n\nFocus Appearance requires that focus indicators have a change of contrast between focused and non-focused states.\nNon-text Contrast requires that focus indicators have adjacent contrast between the indicator (in the focused state) and adjacent non-indicator colors.\nFigure 18 This example passes Focus Appearance but fails Non-text Contrast; there is insufficient adjacent contrast between the focus indicator and the adjacent colors.\nFigure 19 This example passes Non-text Contrast but fails Focus Appearance; there is insufficient change of contrast between the focused and unfocused states.\n\nAdditionally, Non-text Contrast does not establish any size requirement and has slightly different rules for when exceptions are allowed.\n\nSee the Relationship with Focus Visible section of Understanding 1.4.11 Non-text Contrast for more details and examples.\n\nComponent keyboard focus\n\nThe preamble to this Success Criterion is \"When a user interface component has keyboard focus...\" The keyboard focus is the point of interaction for someone using a keyboard. For environments with a keyboard-operable interface, the keyboard focus can be moved around the interface in order to interact with different components. Whichever component is being interacted with has focus.\n\nWCAG defines user interface component as \"a part of the content that is perceived by users as a single control for a distinct function.\" Because different users may perceive controls differently, there is a potential for some variation when interpreting what constitutes both a single control and a distinct function. This is particularly the case when something visually presents in a way that may differ from how it is programmatically created under the covers. Where there is not a native HTML component upon which to base designs, there can be great variations in how the components and their focus indicators are portrayed. Further, some components have sub-components that can take focus, such as the menu items on a menu.\n\nNonetheless, consistent results from different testers were obtained for this Success Criterion by using the focus indicator itself as the gauge of what constitutes the component being interacted with. For complex components, the three typical focus indicators are as follows:\n\nFocus indicator around only the whole component\nFocus indicators around both the component and subcomponent\nFocus indicator around only the subcomponent\n\nEach of these will be discussed, using a tablist as a familiar complex component.\n\nFocus indicator around only the whole component\nFigure 20 A tablist with a focus indicator around only the whole.\n\nWhen the focus indicator is shown only around the whole tablist, the user is guided to considering the tablist as a single user component. The tab items within it are visually distinguished between selected and unselected states (and visual indicators of selection state must meet the criteria given in 1.4.11 Non-text Contrast).\n\nHaving a focus indicator only around the whole is possible where there is no need to have a selected sub-component while another sub-component has focus. For a tablist which synchronizes its tab panel content with whatever tab is active, only one tab item can be selected at a time, and since whatever tab is selected is considered active, a separate focus indicator is redundant.\n\nResult: the group focus indicator must meet the requirements of this Success Criterion.\n\nA radio button group and a star-rating widget, which each use only a whole-component focus indicator, provide working examples of different complex components that pass the primary requirements of this Success Criterion. In the star ratings example, users can increment the rating by 1/2 stars. Not only is a focus indicator for each 1/2 star unnecessary, but it would actually be difficult to achieve without making the interaction confusing.\n\nFocus indicators around both the component and subcomponent\n\n\nFigure 21 The same tablist in two states. In the first, focus is around both the tablist and the currently selected tab; in the second, focus is around both the tablist and an unselected tab.\n\nFor a tablist which does not keep its tab panel content synchronized with whatever tab is selected, there needs to be a focus indicator for the tab item subcomponent. This is because the tab item with focus may be different than the selected item.\n\nThe user can navigate to the tablist, which in this implementation has a focus rectangle around the whole tablist as well as one around a tab item (conventionally the item that is currently selected). The focus around the whole is helpful in cueing a keyboard user that this is a complex component that has its own interaction. The user can then move focus between the unselected and selected tab items -- each of which in turn has its own focus indicator -- before activating one, which then makes it selected as well as focused, and updates the tab panel to match.\n\nIn this scenario, either the group focus indicator or the sub-component indicator must meet the requirements of this Success Criterion. To avoid being overly prescriptive, the Success Criterion allows authors to choose which makes the most sense. Generally, if a sub-component focus is necessary, it should be assessed instead of the group indicator.\n\nResult: the focus indicator for the tab item meets the requirements of this Success Criterion. The tablist focus indicator does not need to meet the requirements.\n\nA slider to pick colors provides a working example of a different complex component that predominantly shows focus for the subcomponent. In this case, the thumb slider sub-component has a focus indicator of sufficient size and contrast to pass the sufficient area calculation. There is also a subtle focus around the whole slider component, but it does not need to be assessed to pass this Success Criterion.\n\nFocus indicator around only the subcomponent\nFigure 22 The same tabs as in the prior set, but the focus indicator around the whole is removed.\n\nThe same unsynchronized tablist can also be implemented as something which only shows focus on the tab items and not on the whole. The behaviour is the same as in the prior example, but there is never a focus indicator placed around the tablist. This interaction is acceptable, but it is not best practice since it demands more understanding from the user with less information. For example, some visual cues for the tablist and tab items (and tab panel) may not be clear. As well, keyboard users may not initially understand the expected keyboard interaction.\n\nResult: the focus indicator for the tab item must meet the requirements of this Success Criterion, judging focus with both selected and unselected tab items.\n\nA functional example of sub-component-only tab focus has an indicator that is large enough (at least four times the shortest side) with sufficient contrast to pass the focus area language of this Success Criterion.\n\nWhere something with focus is not a user interface component\n\nSome pages contain very large editing regions, such as web implementations of word processors and code editors. Unlike a textarea element, which is a user interface component, these large editing regions do not typically meet the definition of user interface components; they are not \"perceived by users as a single control for a distinct function.\" Providing focus indicators around such editing regions may still be beneficial to some; however, where the region is not perceived as a single control, it is not covered by this Success Criterion. The web page will still need to provide a insertion point (caret indicator) in such editing regions in order to meet the requirements of 2.4.7 Focus Visible.\n\nSome non-operable elements can take focus (such as a heading element that is the target of a skip link). However, the preamble of this Success Criterion refers to user interface components; it is only when the element with focus is operable by keyboard that this Success Criterion applies.\n\nExceptions\n\nThere are two situations where the focus appearance does not need to be assessed:\n\nthe focus indicator cannot be adjusted by the author\nthe author has not modified the effects of the user agent default\nFirst exception: the focus indicator cannot be adjusted by the author\n\nThe focus indicator is determined by the user agent and cannot be adjusted by the author \n\nSome components or technologies may not allow the author to adjust the focus indicator. This is the case with HTML select elements (both single and multi-select), where the visual treatments for selection and focus cannot be adjusted by the author. In this case the Success Criterion does not apply.\n\nFigure 23 Passes: The user agent's default select element presentation cannot be modified by the author, so it passes regardless of the quality of the focus indicator\nSecond exception: the default indicator and background are not modified\n\nThe focus indicator and the indicator's background color are not modified by the author\n\nIf the focus indicator and the background behind the focus indicator are not modified by the author, the Success Criterion does not apply.\n\nThe intent of this exception is to reduce burden on authors by allowing them to rely on the default indicators provided by user agents (browsers). If all user agents provided good focus indicators, authors would be able to concentrate efforts on other accessibility considerations. Unfortunately, browser default focus indicators vary by component, browser, and across devices and operating systems, and the default focus indicators in some browsers can be difficult to see (such as a 1px dotted outline). For this reason, most authors override browser defaults in order to overcome these deficiencies and create a more uniform user experience, regardless of browser.\n\nSome browser makers are improving their default focus indicators to make them more visible. As more browsers adopt defaults that meet the primary bullets of this Success Criterion, authors will be able to achieve improved focus indicators without customization.\n\nModifying the focus indicator background\n\nBrowser default focus indicators can be made more difficult to see if the author modifies the pixels directly adjacent to the indicator (commonly referred to as its background), such as by positioning a component on top of an image or gradient background, or altering the page's default white background color, for instance using a blue background in combination with a browser's blue default indicator. For this reason, where the author alters the pixels directly adjacent to the default focus indicator, the user agent exception does not apply, and the author will need to verify they meet the size and contrast requirements of this Success Criterion.\n\nNote\n\nAltering the body element's background-color attribute is one way of altering the pixels directly adjacent to the indicator in most implementations. However, specifying a value of white (#FFFFFF) does not nullify this exception since, as established in the third note of the contrast ratio definition, the default (\"unspecified\") color is assumed to be white.\n\nAs well, if the browser provides an indicator within a component by default, then authors can potentially reduce the visibility by changing the component color (which in such a scenario is the background color for the focus indicator). For example, if the default indicator on a button uses a colored inner border, authors can negatively affect the focus appearance by making the button or its unfocused border color a similar-luminosity color. For this reason, this user agent exception can only be met if the author both does not modify the default focus indicator and does not modify its background.\n\nFigure 24 Fails: The middle button is focused using a browser's default focus indicator, but it is very difficult to tell which button is focused because the custom blue border on the unfocused button uses a similar color.",
      "benefitsText": "Benefits\nThis Success Criterion helps anyone who relies on the keyboard to operate the page, by letting them visually determine the component on which keyboard operations will interact at any point in time.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.1 ポインタのジェスチャ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   マルチポイント又は軌跡ベースのジェスチャを使って操作する機能はすべて、軌跡ベースのジェスチャなしのシングルポインタで操作することができる。ただし、マルチポイント又は軌跡ベースのジェスチャが必要不可欠である場合は例外とする。\n   \t\t\t\t\t\n   注記この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (ユーザエージェントや支援技術の操作に必要なアクションには適用されない)。\n\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that content can be controlled with a range of pointing devices, abilities, and assistive technologies. Some people cannot perform gestures in a precise manner, or they may use a specialized or adapted input device such as a head pointer, eye-gaze system, or speech-controlled mouse emulator. Some pointing methods lack the capability or accuracy to perform multipoint or path-based gestures.\n\nA path-based gesture involves an interaction where not just the endpoints matter, but how the pointer moves between these points.\n\nIf the gesture is only recognised if the user moves in a (mostly) straight line from the start point to the end point, it is an example of a path-based gesture.\n\nFigure 1 A path-based gesture where pointer movement is only allowed in a straight line from the start-point to the end-point. If the user strays from the straight directional path, the gesture is not recognised, has no effect, or is aborted.\n\nIf going through an intermediate point (usually near the start of the gesture) affects its meaning, then it is a path-based gesture. The user engages a pointer (starting point), carries out a movement that goes through at least one intermediate-point before disengaging the pointer (end point). The intermediate point defines the gesture as requiring a specific path, even if the complete path is not defined.\n\nFigure 2 A path-based gesture involves starting a pointer movement that goes through at least one intermediate point before the end-point. The end-point may be a continuation, or allow for various movements.\n\nExamples of path-based gestures include swiping, sliders and carousels dependent on the direction of interaction, and other gestures which trace a prescribed path such as drawing a specific shape. Such paths may be drawn with a finger or stylus on a touchscreen, graphics tablet, or trackpad, or with a mouse, joystick, or similar pointer device.\n\nDragging is a movement where the user picks up an object with a pointer (such as mouse cursor or a finger) and moves it to some other position. This movement from start point to end point does not require the user to follow any particular path or direction. Dragging is therefore not path-based. In contrast, a path-based pointer gesture requires the traversal of an intermediate point, which is a technical way of expressing that the directionality and possibly speed of the gesture communicates a particular command to the system. Dragging motions are covered in Success Criterion 2.5.7: Dragging.\n\nFigure 3 A free-form gesture does not require any particular path before the end-point, only the start and (optionally) the end point matter. This is not path-based\n\nNote\n\nAny movement of a pointer could be difficult or impossible to use for someone who cannot perform precise movements, therefore alternative forms of interaction are always recommended. This success criterion is scoped to path-based gestures as it may be difficult or impossible to provide an alternative for free-form gestures.\n\nExamples of multipoint gestures include a two-finger pinch zoom, a split tap where one finger rests on the screen and a second finger taps, or a two- or three-finger tap or swipe. Users may find it difficult or impossible to accomplish these if they type and point with a single finger or stick.\n\nAuthors must ensure that their content can be operated without multipoint or path-based gestures. Multipoint or path-based gestures can be used so long as the functionality can also be operated by another method, such as a tap, click, double tap, double click, long press, or click & hold.\n\nThis Success Criterion applies to gestures in the author-provided content, not gestures defined by the operating system, user agent, or assistive technology. Examples of operating system gestures would be swiping down to see system notifications and gestures for built-in assistive technologies (AT). Examples of user agent-implemented gestures would be horizontal swiping implemented by browsers for navigating within the page history, or vertical swiping to scroll page content.\n\nThere are times when a component requires a path-based gesture for touch screen devices but not with a mouse. Taking an example of a generic slider:\n\nUsing a mouse: If the user clicks on the thumb control of the slider and moves vertically, the slider will respond by moving to the right or left, even if the movement is mostly upwards. There will be no page scrolling as a result of the vertical movement as long as they drag with focus on the slider. Therefore, the slider does not require a path-based gesture with mouse pointer.\nUsing a touch-screen: If the user puts their finger on the thumb control of the slider and moves upwards more than sideways, the slider may not respond because the browser takes control of the swipe and interprets it as a scroll, and will move the page up and down. Moving left or right on the slider thumb engages the slider and then the user can vary their vertical movement. This implementation has the 3-point requirement to work with a finger on a touch screen device so is a path-based gesture.\n\nAs touch screen devices can apply default gestures it is important to test with them if you are unsure whether a particular component does require a path-based gesture.\n\nBrowsers on a touch screen device generally provide some default gestures that impact whether a path-based gesture is needed. For example, a web browser on a touch-screen devices might detect a vertical gesture and scroll the page. If a user places their finger on a slider thumb and moves up (to scroll down) that might not activate the slider (depending on implementation). If the user moves horizontally first then the slider could capture that gesture and ignore vertical movement, resulting in a path-based gesture. If you include touch-screen devices as accessibility supported then these types of interaction need testing with a touch screen as using a mouse in a similar way would not trigger the same browser behavior.\n\nThis Success Criterion does not require all functionality to be available through pointing devices, but if it is available to pointer devices then it should not require path-based gestures. While content authors generally need to provide keyboard commands or other non-pointer mechanisms that perform actions equivalent to complex gestures (see Success Criterion 2.1.1 Keyboard), this is not sufficient to conform to this Success Criterion. That is because some users rely entirely on pointing devices, or find simple pointer inputs much easier to perform and understand than alternatives. For example, a user relying on a head-pointer would find clicking a control to be much more convenient than activating an on-screen keyboard to emulate a keyboard shortcut, and a person who has difficulty memorizing a series of keys (or gestures) may find it much easier to simply click on a labeled control. Therefore, if one or more pointer-based mechanisms are supported, then their benefits should be afforded to users through simple, single-point actions alone.\n\nSingle pointer operations include taps and clicks, double-taps and double-clicks, long presses, swiping, dragging, and path-based gestures. Gestures such as \"pinch to zoom\" or two-finger swipes are multipoint gestures, as they require two or more pointer inputs - in this case, two fingers on a touchscreen.\n\nAn exception is made for functionality that is inherently and necessarily based on complex paths or multipoint gestures. For example, entering your signature may be inherently path-based (although acknowledging something or confirming your identity need not be).\n\nThis Success Criterion does not apply to gestures that involve dragging in any direction because only the start and end points matter in a dragging operation. However, such gestures do require fine motor control. Authors are encouraged to provide non-dragging methods, for instance, a drag and drop operation could also be achieved by selecting an item (with a tap or keyboard interaction) and then selecting its destination as a second step.",
      "benefitsText": "Benefits\n\nUsers who cannot (accurately) perform path-based pointer gestures - on a touchscreen, or with a mouse - will have alternative means for operating the content.\n\nUsers who cannot perform multi-pointer gestures on a touchscreen (for instance, because they are operating the touchscreen with an alternative input such as a head pointer) will have a single-pointer alternative for operating the content.\n\nUsers who may not understand the custom gesture interaction intended by the author will be able to rely on simple, frequently used gestures to interact. This can be especially beneficial for users with cognitive or learning disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pointer-gestures.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.2 ポインタのキャンセル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   シングルポインタを使って操作できる機能は、以下の要件の少なくとも 一つを満たす。\n   \t\t\t\t\t\n   \n   \n   ダウンイベントがない \n     機能を実行する目的でポインタのダウンイベントを使用していない。\n      \t\t\t\t\t\t\n   中止又は元に戻すことができる \n     機能の完了にはアップイベントを使用し、かつ機能の完了前に中止する、又は機能の完了後に元に戻すためのメカニズムが利用できる。\n      \t\t\t\t\t\t\n   アップイベントで反転 \n     アップイベントによって、先のダウンイベントのすべての結果が反転する。\n      \t\t\t\t\t\t\n   必要不可欠\n     ダウンイベントによって機能を完了させることが必要不可欠である。\n      \t\t\t\t\t\t\n   \n   注記 1キーボードまたはテンキーパッドのキープレスをエミュレートする機能は必須と考えられる。\n   \t\t\t\t\t\n  注記 2この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (ユーザエージェントや支援技術の操作に必要なアクションには適用されない)。\n\t\n",
      "intentText": "Intent\n\nThe intent of this success criterion is to make it easier for users to prevent accidental or erroneous pointer input. People with various disabilities can inadvertently initiate touch or mouse events with unwanted results. Each of the following subsections roughly aligns with the bullets of this Success Criterion, and outlines a means of allowing users to cancel pointer operations.\n\nUp-Event activation or completion\n\nThe most accessible way to incorporate pointer cancellation is to make activation occur on the up-event.\n\nUp-event activation refers to the activation of a target when the pointer is released. In a touchscreen interaction, when the finger touches a target, the up-event activation only occurs when the finger is lifted while still being within the target boundary. Similarly in mouse interaction, the up-event occurs when the mouse button is released while the cursor is still within the boundary of the initial target set when the mouse button was pressed.\n\nAuthors can reduce the problem of users inadvertently triggering an action by using generic platform activation/click events that activate functionality on the up-event. For example, the click event in JavaScript triggers on release of the primary mouse button, and is an example of an implicit up-event. Despite its name, the click event is device-independent and also works for touch and keyboard interaction.\n\nThe preference for up-events is implicit in the Success Criterion wording of the first bullet: The down-event of the pointer is not used to execute any part of the function. Authors meet the first bullet by using only the up-event.\n\nUp-Event Abort or Undo\n\nWhere the interaction is equivalent to a simple \"click\", up-event activation has a built-in ability to cancel. There is a distinction between when someone touches a screen and when they remove their finger. Similarly, in mouse interaction, there is a difference between pressing and releasing the mouse button. When activation occurs only as the pointer is released, users have the opportunity to Abort (cancel) the activation. Users who have difficulty accurately using a mouse or touchscreen benefit greatly from this basic behaviour. They normally receive visual feedback when an item is pressed. If they discover they have selected the wrong item, they can cancel the action by moving their pointer or finger away from the target before releasing.\n\nFor more complex interactions, such as drag and drop, the down- and up-events may initiate and end a series of actions to complete a process. For example, with drag and drop, the item may be:\n\nselected with a press (down-event),\nmoved to a new location, while still being depressed, and\nreleased (up-event) to conclude the drop action.\n\nIn such a complex action, the need for an Abort or Undo function increases. Designers may elect to confirm the move through something like a confirmation dialog or an undo button, giving the user the ability to Undo the process just completed. Alternatively, the ability to Abort the action can be achieved if, before completing step 3, the user returns the selected item to its original location and concludes the process there. If other parts of the screen disallow a move, the user can conclude the drag and drop there, effectively nullifying the operation.\n\nUp Reversal\n\nIn other interactions, the down-event may trigger a behaviour which can be reversed when the up-event concludes. Examples of this include press-and-hold actions such as where a transient popup appears (or a video plays) when the user presses on an object (down-event), but the popup (or video) disappears as soon as the user releases the pointer (up-event). Since the up-event reverses the preceding down event, the user is returned to their prior point, and has effectively cancelled the operation.\n\nDown-Event\n\nCompleting the function on the down-event is only permitted when it is essential that the up-event not be used.\n\nThe most prevalent essential down-event activation occurs in keyboard emulation. On a physical keyboard, keys by default activate on the down-event -- a letter appears when the key is pressed. If a software keyboard emulator tried to override this expected behaviour by making letters appear when the key is released, the behaviour would be unexpected and would adversely affect expected interaction.\n\nNote that a keyboard has a built-in Backspace or Delete button, which effectively provides an Undo option. Undo is not a requirement of the down-event Essential exception; however, providing an easy way for users to undo any action is a recommended practice (and may be a functional necessity), even where it is not a requirement of this Success Criterion.\n\nOther examples where the timing of an activation is essential and requires the down-event would be:\n\nAn activity that emulates a physical on-press trigger, such as when playing an on-screen piano keyboard. Activation on the up-event would significantly alter the desired behaviour.\nA program for shooting skeets where waiting for the \"up\" event would invalidate the precise timing necessary for the activation.",
      "benefitsText": "Benefits\nMakes it easier for all users to recover from hitting the wrong target.\nHelps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a control will be accidentally activated or an action will occur unexpectedly, and also ensures that where complex controls are activated, a means of Undoing or Aborting the action is available.\nIndividuals who are unable to detect changes of context are less likely to become disoriented while navigating a site.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pointer-cancellation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.3 ラベルを含む名前 (name)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n\t\n  ユーザインタフェース コンポーネントがテキスト又は文字画像を含むラベルを持つ場合、視覚的に提示されたテキストが名前 (name) に含まれている。\n\n  注記ベストプラクティスは、ラベルのテキストを名前 (name) の最初に使用することである。\n\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the words which visually label a component are also the words associated with the component programmatically. This helps ensure that people with disabilities can rely on visible labels as a means to interact with the components.\n\nMost controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the Accessible Name. Users typically have a much better experience if the words and characters in the visible label of a control match or are contained within the accessible name. When these match, speech-input users (i.e., users of speech recognition applications) can navigate by speaking the visible text labels of components, such as menus, links, and buttons, that appear on the screen. Sighted users who use text-to-speech (e.g., screen readers) will also have a better experience if the text they hear matches the text they see on the screen.\n\nNote that where a visible text label does not exist for a component, this Success Criterion does not apply to that component.\n\nWhere text labels exist and are properly linked to the user interface components through established authoring practices, the label and name will normally match. When they don't match, speech-input users who attempt to use the visible text label as a means of navigation or selection (e.g., \"move to Password\") will be unsuccessful. The speech-based navigation fails because the visible label spoken by the users does not match (or is not part of) the accessible name that is enabled as a speech-input command. In addition, when the accessible name is different from the visible label, it may function as a hidden command that can be accidentally activated by speech-input users.\n\nMismatches between visible labels and programmatic names for controls are even more of an issue for speech-input and text-to-speech users who also have cognitive challenges. Mismatches create an extra cognitive load for speech-input users, who must remember to say a speech command that is different from the visible label they see on a control. It also creates extra cognitive load for a text-to-speech user to absorb and understand speech output that does not match the visible label.\n\nIn order for the label text and accessible name to be matched, it is first necessary to determine which text on the screen should be considered a label for any given control. There are often multiple text strings in a user interface that may be relevant to a control. However, there are reasons why it is best to conservatively interpret the label as being only the text in close proximity.\n\nConventionally the label for user interface components is the adjacent text string. The typical positioning for left to right languages is:\n\nimmediately to the left of comboboxes, dropdown lists, text inputs, and other widgets (or in the absence of left-side labels, immediately above and aligned with the left edge of each input)\nimmediately to the right of checkboxes and radio buttons\ninside buttons and tabs or immediately below icons serving as buttons\n\nThe rationale for some of these conventions is explained in G162: Positioning labels to maximize predictability of relationships.\n\nIt is important to bias towards treating only the adjacent text as a label because liberal interpretations of what constitutes a text label can jeopardize the value of this Success Criterion (SC) by lessening predictability. Isolating the label to the single string in close proximity to the component makes it easier for developers, testers, and end users to identify the label targeted for evaluation in this SC. Predictable interpretation of labeling allows users of speech recognition technologies to interact with the element via its conventionally positioned label, and allows users of screen reading technologies to enjoy consistency between the nearby visible label and the announced name of the component.\n\nNote that placeholder text within an input field is not considered an appropriate means of providing a label. The HTML5 specification states The placeholder attribute should not be used as an alternative to a <label>. However, it is worth noting that \"label\" in that HTML5 statement is in code brackets and links to the label element. For the purposes of this Label in Name Success Criterion, \"label\" is not used in such a programmatic sense but is simply referring to a text string in close visual proximity to a component. As such, in the absence of any other nearby text string (as described in the preceding list), if an input contains placeholder text, such text may be a candidate for Label in Name. This is supported both through the accessible name calculation (discussed later) and from the practical sense that where a visible label is not otherwise provided, it is likely that a speech-input user may attempt to use the placeholder text value as a means of interacting with the input.\n\nText labels \"express something in human language\"\nSymbolic text characters\n\nFor the purposes of this SC, text should not be considered a visible label if it is used in a symbolic manner, rather than directly expressing something in human language as per the definition of text in WCAG. For example, 1.4.5 Images of Text describes considerations for \"symbolic text characters.\" In the images of text example \"B\", \"I\", and \"ABC\" appear on icons in a text editor, where they are meant to symbolize the functions for Bold, Italics, and Spelling, respectively. In such a case, the accessible name should be the function the button serves (e.g., \"Spell check\" or \"Check spelling\"), not the visible symbolic characters. A similar text editor is shown in the figure below.\n\nFigure 1 A detail of the rich text editor in Github, showing a variety of unlabeled icons, including icons resembling text characters.\n\nLikewise, where an author has used a greater-than symbol (\">\") to mimic the appearance of the right-facing arrow, the text does not convey something in human language. It is a symbol, in this scenario likely meant to mimic the icons used for a \"Play\" button or a \"Next\" arrow.\n\nPunctuation and capitalization\n\nThe use of punctuation and capitalization in labels may also be considered optional for the same reason. For example, the colon conventionally added at the end of input labels does not express something in human language, and capitals on the first letter of each word in a label do not normally alter the words' meaning. This is particularly relevant in the context of this SC, since it is primarily aimed at users of speech recognition; capitals and most punctuation are frequently ignored when a user speaks a label as a means of interacting with a control.\n\nWhile it is certainly not an error to include the colon and capitalization in the accessible name, a computed name of \"First name\" should not be considered a failure of \"First Name:\".\nFirst Name: \nLikewise, \"Next…\" visibly shown on a button could have \"Next\" as the accessible name. When in doubt, where a meaningful visible label exists, match the string exactly for the accessible name.\n\n\nMathematical expressions and formulae\n\nMathematical expressions are an exception to the previous subsection about symbolic characters. Math symbols can be used as labels; for example \"11×3=33\" and \"A>B\" convey meaning. The label should not be overwritten in the accessible name, and substitutions of words where a formula is used should be avoided since there are multiple ways to express the same equation. For example, making the name \"eleven multiplied by three is equivalent to thirty-three\" might mean a user who said \"eleven times three equals thirty-three\" may not match. It is best to leave the formulas as used in the label and count on the user's familiarity with their speech software to achieve a match. Further, converting a mathematical formula label into an accessible name that is a spelled-out equivalent may create issues for translation. The name should match the label's formula text. Note that a consideration for authors is to use the proper symbol in the formula. For instance 11x3 (with a lower or upper case letter X), 11*3 (with the asterisk symbol), and 11×3 (with the &times; symbol) are all easy for sighted users to interpret as meaning the same formula, but may not all be matched to \"11 times 3\" by the speech recognition software. The proper operator symbol (in this case the times symbol) should be used.\nA>B A=B A<B\n\nAccessible Name and Description Computation specification\n\nIt is important to understand how the accessible name is derived. The Accessible Name and Description Computation 1.1 and the HTML Accessibility API Mappings 1.0 describe how the accessible name is computed, including which attributes are considered in its calculation, and in what order of preference. If a component has multiple possible attribute values that could be used for its accessible name, only the most preferred of those values will be computed. None of the other, less preferred values will be part of the name. For the most part, existing established programmatic relationships between labels and controls are reinforced by the specification.\n\nOther text displayed on the screen that is correctly coded to meet 1.3.1: Info and Relationships is not normally factored into the calculation for the accessible name of a UI component without author intervention (via ARIA labeling techniques). The most common of these are:\n\nheadings and instructions\ngroup labels for sets of components (i.e., used with legend/fieldset or with role of group or radiogroup)\n\nSuch textual information may constitute part of the component's description. So from both a programmatic viewpoint, and from the conservative tactic of only considering a label to be \"adjacent text,\" neither headings, instructions, nor group 'labels' should normally be considered labels for the purpose of this Success Criterion.\n\nIt is important to note that the specification allows authors to override the name calculated through native semantics. Both aria-label and aria-labelledby take precedence in the name calculation, overriding the visible text as the accessible name even when the visible text label is programmatically associated with the control. For this reason, when a visible label already exists, aria-label should be avoided or used carefully, and aria-labelledby should be used as a supplement with care.\n\nFinally, aria-describedby is not included in the Accessible Name computation (instead it is part of the Accessible Description computation). By convention, text associated with a control through aria-describedby is announced immediately after the accessible name by screen readers. Therefore, the context of headings, instructions, and group labels can be provided through the accessible description to assist users of screen readers without affecting the experience of those who navigate using speech recognition software.",
      "benefitsText": "Benefits\nSpeech-input users can directly activate controls on a page with fewer surprising changes of focus.\nText-to-speech users will have a better experience because the labels that they hear match the visible text labels that they see on the screen.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.4 動きによる起動",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n  \n   \n   \t\t\t\t\t\n   デバイスの動き又は利用者の動きで操作できる機能は、ユーザインタフェース コンポーネントでも操作でき、かつ偶発的な起動を防ぐために動きへの反応を無効化することができる。ただし、次の場合は除く:\n   \n   \n   \n   サポートされたインタフェース \n     アクセシビリティ サポーテッドなインタフェースを通じて機能を操作するために動きが用いられる。\n   \n   必要不可欠\n   その機能にとって動きが必要不可欠であり、この達成基準に従うと動作を無効化してしまう。\n   \n   \n   \t\t\t\t\n",
      "intentText": "Intent\n\nThe intent of this success criterion is to ensure that functions triggered by moving a device (for example, shaking or tilting) or by gesturing towards the device (so that sensors like a camera can pick up and interpret the gesturing), can also be operated by more conventional user interface components.\n\nNote\n\nThis criterion concerns input through sensors which respond directly to motions such as gesturing towards, tilting or shaking a device. It does not cover the movement of users through space as registered by geolocation sensors or beacons, or events observed by the device other than intentional gesturing by the user. It also does not cover incidental motion associated with operating a keyboard, pointer, or assistive technology.\n\nDevices often have sensors that can act as inputs, such as accelerometer and gyroscope sensors on a phone or tablet device. These sensors can allow the user to control something by simply changing the orientation or moving the device in particular ways. In other situations, web content can interpret user gestures via the camera or other sensors to actuate functions. For example, shaking the device might issue an \"Undo\" command, or a gentle hand wave might be used to move forward or backward in a sequence of pages. Some users with disabilities are not able to operate these device sensors (either not at all, or not precisely enough) because the device is on a fixed mount (perhaps a wheelchair) or due to motor impairments. Therefore, functionality offered through motion must also be available by another mechanism.\n\nIn addition, some users may accidentally activate sensors due to tremors or other motor impairments. The user must have the ability to turn off motion actuation to prevent such accidental triggering of functions. Applications may be able to meet this requirement by supporting operating system settings which allow the user to disable motion detection at the system level.\n\nThere is an exception where motion is essential for the function or not using motions or gestures would invalidate the activity. Some applications are specifically created to use device sensor data. Examples of content that are exempt from this requirement include a pedometer that relies on device motion to count steps.",
      "benefitsText": "Benefits\nThis Success Criterion helps people who may be unable to perform particular motions (such as tilting, shaking, or gesturing) because the device may be mounted or users may be physically unable to perform the necessary movement. This success criterion ensures that users can still operate all functionality by other means such as touch or via assistive technologies.\nOther users will benefit in situations where they are unable to move their devices.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/motion-actuation.html",
      "beneficiaries": [
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.5 ターゲットのサイズ (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n  ポインタ入力のターゲットのサイズは、少なくとも 44 × 44 CSS ピクセルである。ただし、次の場合は除く:\n\n\t同等 \n  ターゲットと同等のリンク又はコントロールが同じページに 44 × 44 CSS ピクセル以上のサイズで存在する。\n\tインライン \n  ターゲットが文中、又はテキストブロック内に存在する。\n\tユーザエージェントのコントロール \n  ターゲットのサイズがユーザエージェントによって決定され、かつコンテンツ制作者によって変更されていない。\n\t必要不可欠 \n  そのターゲットを特定の方法で提示することが、伝達される情報において必要不可欠である。\n  \n   \n",
      "intentText": "Intent\n\nThe intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target. Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.\n\nTouch is particularly problematic as it is an input mechanism with coarse precision. Users lack the same level of fine control as on inputs such as a mouse or stylus. A finger is larger than a mouse pointer, and generally obstructs the user's view of the precise location on the screen that is being touched/activated.\n\nThe issue can be further complicated for responsive/mobile sites which need to accommodate different types of fine and coarse inputs (e.g. a site that can be accessed both on a traditional desktop/laptop with a mouse, as well as on a tablet or mobile phone with a touch screen).\n\nWhile this criterion defines a minimum target size, it is recommended that larger sizes are used to reduce the possibility of unintentional actions. This is particularly relevant if any of the following are true:\n\nthe control is used frequently;\nthe result of the interaction cannot be easily undone;\nthe control is positioned where it will be difficult to reach, or is near the edge of the screen;\nthe control is part of a sequential task.",
      "benefitsText": "Benefits\nUsers who use a mobile device where touch screen is the primary mode of interaction\nUsers with mobility impairments, such as hand tremors\nUsers who find fine motor movements difficult\nUsers who access a device using one hand\nUsers with large fingers, or who are operating the device with only a part of their finger or knuckle\nUsers who have low vision may better see the target",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/target-size-enhanced.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.6 入力メカニズムの共存",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n  プラットフォームで提供されている入力モダリティの使用を、ウェブコンテンツが制限しない。ただし、その制限が必要不可欠な場合、コンテンツのセキュリティのために必要な場合、又は利用者による設定を尊重するうえで必要な場合は例外とする。   \t\t\t\t\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that people can use and switch between different modes of input when interacting with web content. Users may employ a variety of input mechanisms when interacting with web content. These may be a combination of mechanisms such as a keyboard or keyboard-like interfaces and pointer devices like a mouse, stylus or touchscreen.\n\nEven though a device may have a primary input mechanism, the user may choose to employ alternative input mechanisms when interacting with the device. For example, the primary mechanism for mobile phones and tablets is the touchscreen. The user of these devices may choose to use a paired mouse or external keyboard as an alternative to using the touchscreen.\n\nUsers should be able to switch input mechanisms at any point should the user determine that certain tasks and interactions are more easily accomplished by using an alternative input mechanism. Content must not limit the user's interaction to any particular input mechanism unless the restriction is essential, or is required to ensure the security of the content or to respect user settings.\n\nNote: A touch-typing web application, which teaches users how to touch-type on a keyboard and/or measures their proficiency and speed, would be an example of an essential limitation to a particular input mechanism.",
      "benefitsText": "Benefits\nUsers can interact with web content with whichever input mechanism is preferred and available to them.\nUsers may switch between input mechanisms when they desire or the circumstances require it.\nUsers are allowed to add and remove input mechanisms at any point, where supported by the operating system.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/concurrent-input-mechanisms.html",
      "beneficiaries": [
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.7 ドラッグ動作",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n  操作にドラッグ動作を用いる全ての機能は、ドラッグなしのシングルポインタで完遂できる。ただし、ドラッグが必要不可欠である、又はその機能がユーザエージェントによって決定され、かつコンテンツ制作者によって変更されない場合は除く。\n    注記この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (すなわち、これはユーザエージェント又は支援技術の操作に必要なアクションには適用されない)。\n   \n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure functionality that uses a dragging movement has another single pointer mode of operation without the need for the dexterity required to drag elements.\n\nSome people cannot perform dragging movements in a precise manner. Others use a specialized or adapted input device, such as a trackball, head pointer, eye-gaze system, or speech-controlled mouse emulator, which may make dragging cumbersome and error-prone.\n\nWhen an interface implements functionality that uses dragging movements, users perform four discrete actions:\n\ntap or click to establish a starting point, then\npress and hold that contact while...\nperforming a repositioning of the pointer, before...\nreleasing the pointer at the end point.\n\nNot all users can accurately press and hold that contact while also repositioning the pointer. An alternative method must be provided so that users with mobility impairments who use a pointer (mouse, pen, or touch contact) can use the functionality.\n\nThis requirement is separate from keyboard accessibility because people using a touch screen device may not use a physical keyboard. Keyboard specific interactions such as tabbing or arrow keys may not be possible when encountering a drag and drop control. Note, however, that providing a text input can be an acceptable single-pointer alternative to dragging. For example, an input beside a slider could allow any user to enter a precise value for the slider. In such a situation, the on-screen keyboard that appears for touch users offers a single-pointer means of entering an alphanumeric value.\n\nThis criterion does not apply to scrolling enabled by the user-agent. Scrolling a page is not in scope, nor is using a technique such as CSS overflow to make a section of content scrollable.\n\nRelationship to other requirements\n\nSuccess Criteria 2.1.1 Keyboard and 2.1.3 Keyboard (No Exception) require dragging features to be keyboard accessible. However, achieving keyboard equivalence for a dragging operation does not automatically meet this Success Criterion. It is possible to create an interface that works with dragging and keyboard controls that does not work using only clicks or taps. While many designs can be created for a dragging alternative which address both keyboard accessibility and operability by single pointer operation, the two requirements should be assessed independently.\n\nThis Success Criterion applies to dragging movements as opposed to pointer gestures, which are covered in Success Criterion 2.5.1 Pointer Gestures. Pointer gestures include directional path-based as well as multi-point gestures. In contrast, for dragging movements, only the start and end point of the movement matters, not the actual path.\n\nAdditional examples are selection rectangles that set the first x/y rectangle coordinate at the pointer position via a pointer down-event, and the second x/y coordinate, after a dragging movement, at the next up-event. A similar example is a connecting line drawn between two different items on the screen, as in an allocation test where users are required to draw a line between questions and corresponding answers. In these cases, the dragging movement requires an alternative way to accomplish the same action that does not rely on the dragging movement. For example, two separate single tap or click actions may define the rectangle coordinates or the start and end points of a connecting line.\n\nAlternatives for dragging movements on the same page\n\nWhere functionality can be executed via dragging movements and an equivalent option exists that allows for single-pointer access without dragging, this Success Criterion is passed. It does not have to be the same component, so long as the functionality is equivalent. An example is a color wheel where a color can be changed by dragging an indicator. In addition, text fields for the numerical input of color values allow the definition of a color without requiring dragging movements. (Note that a text input is considered device agnostic; although the purpose is to enter characters, text entry can take place through voice, pointer or keyboard.)\n\nDistinguishing dragging movements from path-based pointer gestures\n\nDragging movements covered in this Success Criterion are pointer interactions where only the start- and endpoints matter. Once the pointer engages with a target, the direction of the dragging movement does not factor into the interaction until the pointer disengages the target. Since the dragging movement does not have an intermediate point, the dragging movement can go in any direction. Path-based gestures are covered in Success Criterion 2.5.1 Pointer Gestures. For more details, refer to Understanding Success Criterion 2.5.1 Pointer Gestures",
      "benefitsText": "Benefits\nUsers who struggle with performing dragging movements can still operate an interface with a pointer interface.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/dragging-movements.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.8 ターゲットのサイズ (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ポインタ入力のターゲットのサイズは、少なくとも 24 × 24 CSS ピクセルである。ただし、次の場合は除く:\n    \n        間隔: 複数の小さなターゲット (24 × 24 CSS ピクセル未満のもの) が配置されており、それぞれの境界ボックスの中心に直径 24 CSS ピクセルの円があるとした場合に、その円が別のターゲットと重なる、又は別の小さなターゲットの円と重なることがない。\n        同等: その機能は、この達成基準を満たす同一ページ上の別のコントロールを通じて達成できる。\n        インライン: ターゲットが文中に存在する、又は、そのサイズがターゲット以外のテキストに対する行の高さによって制約されている。\n        ユーザエージェントのコントロール: ターゲットのサイズがユーザエージェントによって決定され、かつコンテンツ制作者によって変更されていない。\n        必要不可欠: そのターゲットを特定の方法で提示することが、必要不可欠である、又は伝達される情報に対して法的に要求されている。\n    \n    注記 1ターゲット内の位置に基づいて空間的に値を選択できるターゲットは、この達成基準の目的上、一つのターゲットとみなされる。例としては、スライダー、色のグラデーションを表示するカラーピッカー、カーソルを置いた位置を編集できる領域などがある。\n    注記 2インラインのターゲットの場合、行の高さはテキストのフローに対して垂直方向として解釈されるべきである。例えば、縦書きで表示される言語では、行の高さは水平方向となる。\n\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help ensure targets can be easily activated without accidentally activating an adjacent target. Users with dexterity limitations and those who have difficulty with fine motor movement find it difficult to accurately activate small targets when there are other targets that are too close. Providing sufficient size, or sufficient spacing between targets, will reduce the likelihood of accidentally activating the wrong control.\n\nDisabilities addressed by this requirement include hand tremors, spasticity, and quadriplegia. Some people with disabilities use specialized input devices instead of a computer mouse or trackpad. Typically these types of input device do not provide as much accuracy as mainstream pointing devices. Meeting this requirement also ensures that touchscreen interfaces are easier to use.\n\nNote\n\nThis Success Criterion defines a minimum size and, if this can't be met, a minimum spacing. It is still possible to have very small, and difficult to activate, targets and meet the requirements of this Success Criterion, provided that the targets don't have any adjacent targets that are too close. However, using larger target sizes will help many people use targets more easily. As a best practice it is recommended to at least meet the minimum size requirement of the Success Criterion, regardless of spacing. For important links/controls, consider aiming for the stricter 2.5.5 Target Size (Enhanced).\n\nExceptions\n\nThe requirement is for targets to be at least 24 by 24 CSS pixels in size. There are five exceptions:\n\nSpacing: Undersized targets (those less than 24 by 24 CSS pixels) are positioned so that if a 24 CSS pixel diameter circle is centered on the bounding box of each, the circles do not intersect another target or the circle for another undersized target.\nEquivalent: In cases where a target does not have a size equivalent to 24 by 24 CSS pixels, but there is another control that can achieve the underlying function that does meet the minimum size, the target can be excepted based on the \"Equivalent\" exception.\nInline: The Success Criterion does not apply to inline targets in sentences, or where the size of the target is constrained by the line-height of non-target text. This exception is allowed because text reflow based on viewport size makes it impossible for authors to anticipate where links may be positioned relative to one another. When multiple links are embedded in blocks of texts in smaller text sizes, guaranteeing that undersized links in adjacent lines of text fulfill the spacing exception (their 24 CSS pixel diameter circle don't intersect any other links or their circles) would require a large line height which can be undesirable in many design contexts.\nUser agent control: Browsers have default renderings of some controls, such as the days of the month calendar in an <input type=\"date\">. As long as the author has not modified the user agent default, the target size for a User agent control is excepted.\nEssential: If the size and spacing of the targets is fundamental to the information being conveyed, the Essential exception applies. For example, in digital maps, the position of pins is analogous to the position of places shown on the map. If there are many pins close together, the spacing between pins and neighboring pins will often be below 24 CSS pixels. It is essential to show the pins at the correct map location, therefore the Essential exception applies. A similar example is an interactive data visualization where targets are necessarily dense. Another example is where jurisdictions legally require online forms to replicate paper forms, which can impose constraints on the size of targets. In such jurisdictions, any legal requirement to replicate small targets can be considered essential. When the essential exception is applicable, authors are strongly encouraged to provide equivalent functionality through alternative means to the extent practical.\nSize requirement\n\nFor a target to be \"at least 24 by 24 CSS pixels\", it must be possible to draw a solid 24 by 24 CSS pixel square, aligned to the horizontal and vertical axis such that the square is completely within the target (does not extend outside the target's area).\n\nFigure 1 Where targets are a 24 by 24px square (and larger is better), they meet the size requirement of the criterion and pass (image shown to scale - see the scalable original version)\n\nThe 24 by 24px square has to be aligned with the page, although the target itself could be skewed.\n\nFigure 2 So long as there is a solid 24 by 24px square within the target, it meets the size requirement of the criterion and passes (image shown to scale - see the scalable original version)\n\nIf a target is not large enough to allow for a 24 by 24px square to be drawn inside it, it is considered undersized, and does not pass the size requirement of the Success Criterion. However, if it has sufficient space around it without adjacent targets, it may still pass the criterion thanks to the spacing exception (below).\n\nFigure 3 The rounded corners do not leave sufficient space to draw a 24 by 24px square inside the target, making the target undersized. Depending on the spacing to other targets, it may still pass if it has sufficient clearance (image shown at 1:1 and 2:1 scale - see the scalable original version)\n\nThe requirement is independent of the zoom factor of the page; when users zoom in the CSS pixel size of elements does not change. This means that authors cannot meet it by claiming that the target will have enough spacing or sufficient size if the user zooms into the page.\n\nThe requirement does not apply to targets while they are obscured by content displayed as a result of a user interaction or scripted behavior of content, for example:\n\ninteracting with a combobox shows a dropdown list of suggestions\nactivating a button displays a modal dialog\ncontent displays a cookie banner after page load\ncontent displays a \"Take a survey\" dialog after some period of user inactivity\n\nThe requirement does however apply to targets in any new content that appears on top of other content.\n\nWhile the Success Criterion primarily helps touch users by providing target sizing to prevent accidental triggering of adjacent targets, it is also useful for mouse or pen users. It reduces the chances of erroneous activation due to either a tremor or reduced precision, whether because of reduced fine motor control or input imprecision.\n\nSpacing\n\nWhen the minimum size for a target is not met, spacing can at least improve the user experience. There is less chance of accidentally activating a neighboring target if a target is not immediately adjacent to another. Touchscreen devices and user agents generally have internal heuristics to identify which link or control is closest to a user's touch interaction - this means that sufficient spacing between targets can work as effectively as a larger target size itself.\n\nWhen a target is smaller than 24 by 24 CSS pixels, it is undersized. In this case, we check if it at least has sufficient spacing by drawing a 24 CSS pixel diameter circle over the undersized target, centered on the target's bounding box. For rectangular targets, the bounding box coincides with the target itself – thus, the circle is placed on the center of the target. If the target is not rectangular – for instance, if the target is clipped, has rounded corners, or if it's a more complex clickable SVG shape – we need to first determine the bounding box, and then find the box's center. Note that for concave shapes, the center of the bounding box may be outside of the target itself. Now, we center the circle on the center of the bounding box.\n\nFigure 4 For a square/rectangular target, the 24 CSS pixel diameter circle is centered on the target itself. For convex and concave targets, it is centered on the bounding box of the shape. Note the concave target, where in this case the center of the bounding box is outside of the actual target (image shown to scale - see the scalable original version)\n\nWe repeat this process for all adjacent undersized targets. To determine if an undersized target has sufficient spacing (to pass this Success Criterion's spacing exception), we check that the 24 CSS pixel diameter circle of the target does not intersect another target or the circle of any other adjacent undersized targets.\n\nThe following example shows three versions of a horizontal row of six icon-based buttons. In the top row, the dimensions of each target are 24 by 24 CSS pixels, passing this Success Criterion. In the second row, the same targets are only 20 by 20 CSS pixels, but have a 4 CSS pixel space between them – as the target size is below 24 by 24 CSS pixels, these need to be evaluated against the Success Criterion's spacing exception, and they pass. In the last row, the targets are again 20 by 20 CSS pixels, but have no space between them – these fail the spacing exception, because when drawing the 24 CSS pixel diameter circles over the targets, the circles intersect.\n\nFigure 5 Three rows of targets, illustrating two ways of meeting this Success Criterion and one way of failing it (image shown to scale - see the scalable original version)\n\nThe next two illustrations show sets of buttons which are only 16 CSS pixels tall. In the first set, there are no targets immediately above or below the buttons, so they pass. In the second illustration, there are further buttons, and they have been stacked on top of one another, resulting in a fail.\n\nFigure 6 While the height of the targets is only 16 CSS pixels, the lack of adjacent targets above and below means that the targets pass this Success Criterion (image shown to scale - see the scalable original version)\nFigure 7 Two rows of buttons, both with a height of only 16 CSS pixels. The rows are close, with only a 1 CSS pixel gap between them, which means that the 24 CSS pixel spacing circles of the targets in one row will intersect the targets (and their circles, depending on their respective widths) in the other line, thus failing the Success Criterion (image shown to scale - see the scalable original version)\n\nThe following two illustrations show how menu items can be adjusted to properly meet this requirement. In the first illustration, the About us menu has been activated, showing that each of the menu item targets (text and padding) has a 24 CSS pixel height. In the second illustration, the same menu is expanded, but the menu items only achieve 18 CSS pixels in height.\n\nFigure 8 The menu items with a height of 24 CSS pixels pass. For the menu items that are only 18 CSS pixels high, the 24 CSS pixel spacing circles of the targets in one row will intersect the adjacent menu item targets and circles, and fail (image shown to scale - see the scalable original version)\n\nThe following example has one large target (an image that links to a new page related to that image) and a very small second target (a control with a magnifier icon, to open a zoomed-in preview, possibly in a modal, of the image itself). In the top row, the small target overlaps - or, to be more technically accurate, clips - the large target. The small target itself has a size of 24 by 24 CSS pixels, so passes. In the second row, we see that if the second target is any smaller – in this case 16 by 16 CSS pixels – it fails the criterion, as the circle with a 24 CSS pixel diameter we draw over the small target will intersect the large target itself.\n\nFigure 9 The 24 by 24 CSS pixel small target passes, while the 16 by 16 CSS pixel small target fails, since the 24 CSS pixel diameter circle used for undersized targets intersect the large target (image shown to scale - see the scalable original version)\n\nIn the following example, we have the same two targets – a large target and a small target. This time, the small target touches/abuts the large target. If the small target is smaller than 24 by 24 CSS pixels, the circle with a 24 CSS pixel diameter we draw over the small target will intersect the large target itself, failing the requirement. The undersized target must be spaced further away from the large target until its circle doesn't intersect the large target.\n\nFigure 10 In the first row, the 16 by 16 CSS pixel target touching/abutting the large target fails, as its 24 CSS pixel diameter circle used for undersized targets intersects the large target. In the second row we see that the only way the undersized target can pass is by adding a 4 CSS pixel spacing gap between the targets (image shown to scale - see the scalable original version)\n\nNote\n\nUsers with different disabilities have different needs for control sizes. It can be beneficial to provide an option to increase the active target area without increasing the visible target size. Another option is to provide a mechanism to control the density of layout and thereby change target size or spacing, or both. This can be beneficial for a wide range of users. For example, users with visual field loss may prefer a more condensed layout with smaller sized controls while users with other forms of low vision may prefer large controls.",
      "benefitsText": "Benefits\n\nHaving targets with sufficient size - or at least sufficient target spacing - can help all users who may have difficulty in confidently targeting or operating small controls. Users who benefit include, but are not limited to:\n\nPeople who use a mobile device where the touch screen is the primary mode of interaction;\nPeople using mouse, stylus or touch input who have mobility impairments such as hand tremors;\nPeople using a device in environments where they are exposed to shaking such as public transportation;\nMouse users who have difficulty with fine motor movements;\nPeople who access a device using one hand;\nPeople with large fingers, or who are operating the device with only a part of their finger or knuckle.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.1 フォーカス時",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   いずれのユーザインターフェイス コンポーネントも、フォーカスを受け取ったときにコンテキストの変化を引き起こさない。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that functionality is predictable as visitors navigate their way through a document. Any component that is able to trigger an event when it receives focus must not change the context. Examples of changing context when a component receives focus include, but are not limited to:\n\nforms submitted automatically when a component receives focus;\nnew windows launched when a component receives focus;\nfocus is changed to another component when that component receives focus;\n\nFocus may be moved to a control either via the keyboard (e.g. tabbing to a control) or the mouse (e.g. clicking on a text field). Moving the mouse over a control does not move the focus unless scripting implements this behavior. Note that for some types of controls, clicking on a control may also activate the control (e.g. button), which may, in turn, initiate a change in context.\n\nNote\n\nWhat is meant by \"component\" here is also sometimes called \"user interface element\" or \"user interface component\".",
      "benefitsText": "Benefits\nThis Success Criterion helps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a change of context will occur unexpectedly.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/on-focus.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.3 エラー修正の提案",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   入力エラーが自動的に検出され、修正方法を提案できる場合、その提案が利用者に提示される。ただし、セキュリティ又はコンテンツの目的を損なう場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users receive appropriate suggestions for correction of an input error if it is possible. The definition of \"input error\" says that it is \"information provided by the user that is not accepted\" by the system. Some examples of information that is not accepted include information that is required but omitted by the user and information that is provided by the user but that falls outside the required data format or allowed values.\n\nSuccess Criterion 3.3.1 provides for notification of errors. However, persons with cognitive limitations may find it difficult to understand how to correct the errors. People with visual disabilities may not be able to figure out exactly how to correct the error. In the case of an unsuccessful form submission, users may abandon the form because they may be unsure of how to correct the error even though they are aware that it has occurred.\n\nThe content author may provide the description of the error, or the user agent may provide the description of the error based on technology-specific, programmatically determined information.",
      "benefitsText": "Benefits\nProviding information about how to correct input errors allows users who have learning disabilities to fill in a form successfully.\nUsers who are blind or have impaired vision understand more easily the nature of the input error and how to correct it.\nPeople with motion impairment can reduce the number of times they need to change an input value.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.4 誤り防止 (法的、金融、データ)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者にとって法律行為もしくは金融取引が生じる、利用者が制御可能なデータストレージシステム上のデータを変更もしくは削除する、又は利用者が試験の解答を送信するウェブページでは、次に挙げる事項のうち、少なくとも一つを満たしている\n\n   \n     取消送信を取り消すことができる。\n     チェック利用者が入力したデータの入力エラーがチェックされ、利用者には修正する機会が提供される。\n     確認 送信を完了する前に、利用者が情報の見直し、確認及び修正をするメカニズムが利用できる。\n  \n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users with disabilities avoid serious consequences as the result of a mistake when performing an action that cannot be reversed. For example, purchasing non-refundable airline tickets or submitting an order to purchase stock in a brokerage account are financial transactions with serious consequences. If a user has made a mistake on the date of air travel, he or she could end up with a ticket for the wrong day that cannot be exchanged. If the user made a mistake on the number of stock shares to be purchased, he or she could end up purchasing more stock than intended. Both of these types of mistakes involve transactions that take place immediately and cannot be altered afterwards, and can be very costly. Likewise, it may be an unrecoverable error if users unintentionally modify or delete data stored in a database that they later need to access, such as their entire travel profile in a travel services web site. When referring to modification or deletion of 'user controllable' data, the intent is to prevent mass loss of data such as deleting a file or record. It is not the intent to require a confirmation for each save command or the simple creation or editing of documents, records or other data.\n\nUsers with disabilities may be more likely to make mistakes. People with reading disabilities may transpose numbers and letters, and those with motor disabilities may hit keys by mistake. Providing the ability to reverse actions allows users to correct a mistake that could result in serious consequences. Providing the ability to review and correct information gives the user an opportunity to detect a mistake before taking an action that has serious consequences.\n\nUser-controllable data is user-viewable data that the user can change and/or delete through an intentional action. Examples of the user controlling such data would be updating the phone number and address for the user's account, or deleting a record of past invoices from a website. It does not refer such things as internet logs and search engine monitoring data that the user can't view or interact with directly.",
      "benefitsText": "Benefits\nProviding safeguards to avoid serious consequences resulting from mistakes helps users with all disabilities who may be more likely to make mistakes.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-prevention-legal-financial-data.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.6 誤り防止 (すべて)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者に情報の送信を要求するウェブページでは、次に挙げる事項のうち、少なくとも一つを満たしている\n   \n   \n     取消送信を取り消すことができる。\n     チェック利用者が入力したデータの入力エラーがチェックされ、利用者には修正する機会が提供される。\n     確認 送信を完了する前に、利用者が情報の見直し、確認及び修正をするメカニズムが利用できる。\n  \n\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users with disabilities avoid consequences that may result from making a mistake when submitting form data. This criterion builds on Success Criterion 3.3.4 in that it applies to all forms that require users to submit information.\n\nUsers with disabilities may be more likely to make mistakes and may have more difficulty detecting or recovering from mistakes. People with reading disabilities may transpose numbers and letters, and those with motor disabilities may hit keys by mistake. Providing the ability to reverse actions allows users to correct a mistake. Providing the ability to review and correct information gives the user an opportunity to detect a mistake before taking an action.",
      "benefitsText": "Benefits\nProviding safeguards to avoid consequences resulting from mistakes helps users with all disabilities who may be more likely to make mistakes.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-prevention-all.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.7 冗長な入力項目",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    以前に利用者によって入力された、又は利用者に対して提供された情報であって、同一のプロセスにおいて再入力する必要がある情報は、次のいずれかである。\n\n    \n        自動入力される。又は、\n        利用者が選択可能である。\n    \n    ただし、次の場合は除く: \n    \n        情報の再入力が必要不可欠である。\n        その情報がコンテンツのセキュリティを確保するために必要である。又は、\n        以前に入力された情報が無効になっている。\n    \n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users can successfully complete multi-step processes. It reduces cognitive effort where information is asked for more than once during a process. It also reduces the need to recall information provided in a previous step.\n\nInformation that is required to be remembered for input can pose a significant barrier to users with cognitive or memory difficulties. All users experience a natural gradual mental fatigue as they proceed through steps in a process. This fatigue is accelerated by the stress of recalling information from short-term working memory. Users with learning, and cognitive disabilities are highly susceptible to mental fatigue.\n\nRequiring people to recall information previously entered can cause them to give up or re-enter the same information incorrectly. The autocomplete feature of browsers is not considered sufficient because it is the content (the web site) that needs to provide the stored information for a redundant entry, or avoid asking for the same information again.\n\nThis Success Criterion does not add a requirement to store information between sessions. A process is defined on the basis of an activity and is not applicable when a user returns after closing a session or navigating away. However, a process can run across different domains, so if a check-out process includes a 3rd party payment provider, that would be in scope.\n\nThe term \"available to select\" is not prescriptive. The term allows authors to develop techniques where auto-population is not possible. It can include allowing the user to:\n\nselect and populate a field, including from a drop-down;\nselect text from the page and copy it into an input;\ntick a checkbox to populate inputs with the same values as previously entered (e.g., my billing address is the same as my shipping address).\n\nData which is \"available to select\" would need to be on the same page. Ideally, it would be visible by default and closely associated with the input where the data is required. However, it could be elsewhere on a page, including within a show/hide component.\n\nThis Success Criterion does not apply if data is provided by the user with a different method, such as uploading a resume in a document format.\n\nThis Success Criterion does not impact Accessible Authentication (Minimum), for which allowing auto-filling of passwords is a sufficient technique. In that case the filling is performed by the user's browser. Redundant Entry is asking for the website content to make the previous entry available, but not between sessions or for essential purposes such as asking for a password.\n\nThis criterion does not include requirements or exceptions specific to privacy or personally identifiable information (PII), but when implementing techniques such as auto-population, authors should ensure data protection when storing information even temporarily during a process. It is possible to eliminate redundant entry in ways that do not introduce additional privacy risks, but it is also possible that a poor implementation (for meeting this criterion) could leak additional PII.\n\nThere are exceptions for:\n\nEssential uses of input re-entry for things like memory games which would be invalidated if the previous answers were supplied.\nSecurity measures such as preventing a password string from being shown or copied. When creating a password, it should be a unique and complex string and therefore cannot be validated by the author. If the system requires the user to manually create a password that is not displayed, having users re-validate their new string is allowed as an exception.\nWhen the previously entered information is no longer valid, it can be requested that the user enter that information again.",
      "benefitsText": "Benefits\nUsers with cognitive disabilities experience short-term, working memory difficulty. Not having to repeatedly remember particular information reduces stress and the likelihood of mistakes.\nUsers who experience difficulty forming new memories, recalling information, and other functions related to cognition can complete processes without having to unnecessarily rely on their memory.\nUsers with mobility impairments, for example using switch control or voice input, benefit from a reduced need for text entry.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/redundant-entry.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 4.1.2 名前 (name)・役割 (role)・値 (value)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   すべてのユーザインタフェース コンポーネント (フォームを構成する要素、リンク、スクリプトが生成するコンポーネントなど) では、名前 (name) 及び役割 (role) は、プログラムによる解釈が可能である。又、状態、プロパティ、利用者が設定可能な値はプログラムによる設定が可能である。そして、支援技術を含むユーザエージェントが、これらの項目に対する変更通知を利用できる。\n   \n   注記この達成基準は、主に独自のユーザインタフェース コンポーネントを開発、又はスクリプトで実装するコンテンツ制作者に向けたものである。例えば、標準的な HTML のコントロールを仕様に沿って使用していれば、既にこの達成基準を満たしていることになる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather appropriate information about, activate (or set) and keep up to date on the status of user interface controls in the content.\n\nWhen standard controls from accessible technologies are used, this process is straightforward. If the user interface elements are used according to specification the conditions of this provision will be met. (See examples of Success Criterion 4.1.2 below)\n\nIf custom controls are created, however, or interface elements are programmed (in code or script) to have a different role and/or function than usual, then additional measures need to be taken to ensure that the controls provide important and appropriate information to assistive technologies and allow themselves to be controlled by assistive technologies.\n\nWhat roles and states are appropriate to convey to assistive technology will depend on what the control represents. Specifics about such information are defined by other specifications, such as WAI-ARIA, or the relevant platform standards. Another factor to consider is whether there is sufficient accessibility support with assistive technologies to convey the information as specified.\n\nA particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent to user agents and assistive technology. Other examples of user interface control state are whether or not a checkbox or radio button has been selected, or whether or not a collapsible tree or list node is expanded or collapsed.\n\nNote\n\nSuccess Criterion 4.1.2 requires a programmatically determinable name for all user interface components. Names may be visible or invisible. Occasionally, the name needs to be visible, in which case it is identified as a label. Refer to the definition of name and label in the glossary for more information.",
      "benefitsText": "Benefits\nProviding role, state, and value information on all user interface components enables compatibility with assistive technology, such as screen readers, screen magnifiers, and speech recognition software, used by people with disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/name-role-value.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    }
  ],
  "scForHearingImpairment": [
    {
      "title": "達成基準 1.1.1 非テキストコンテンツ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者に提示されるすべての非テキストコンテンツには、同等の目的を果たすテキストによる代替が提供されている。ただし、次の場合は除く:\n   \n   \n      \n      コントロール、入力\n      \n      非テキストコンテンツが、コントロール又は利用者の入力を受け付けるものであるとき、その目的を説明する名前 (name) を提供している。(コントロール及び利用者の入力を受け入れるコンテンツに関するその他の要件は、達成基準 4.1.2 を参照。) \n         \n      \n      \n      時間依存メディア\n      \n      非テキストコンテンツが、時間に依存したメディアであるとき、テキストによる代替は、少なくとも、その非テキストコンテンツを識別できる説明を提供している。(メディアに関するその他の要件は、ガイドライン 1.2 を参照。) \n         \n      \n      \n      テスト\n      \n      非テキストコンテンツが、テキストで提示されると無効になるテスト又は演習のとき、テキストによる代替は、少なくともその非テキストコンテンツを識別できる説明を提供している。\n         \n      \n      \n      感覚的\n      \n      非テキストコンテンツが、特定の感覚的体験を創り出すことを主に意図しているとき、テキストによる代替は、少なくともその非テキストコンテンツを識別できる説明を提供している。\n         \n      \n      \n      CAPTCHA\n      \n      非テキストコンテンツが、コンピュータではなく人間がコンテンツにアクセスしていることを確認する目的で用いられているとき、テキストによる代替は、その非テキストコンテンツの目的を特定し、説明している。なおかつ、他の感覚による知覚に対応して出力する CAPTCHA の代替形式を提供することで、様々な障害に対応している。\n         \n      \n      \n      装飾、整形、非表示\n      \n      非テキストコンテンツが、純粋な装飾である、見た目の整形のためだけに用いられている、又は利用者に提供されるものではないとき、支援技術が無視できるように実装されている。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by non-text content accessible through the use of a text alternative. Text alternatives are a primary way for making information accessible because they can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows the information to be rendered in a variety of ways by a variety of user agents. For example, a person who cannot see a picture can have the text alternative read aloud using synthesized speech. A person who cannot hear an audio file can have the text alternative displayed so that he or she can read it. In the future, text alternatives will also allow information to be more easily translated into sign language or into a simpler form of the same language.\n\nNote on CAPTCHA\n\nCAPTCHAs are a controversial topic in the accessibility community. As is described in the paper Inaccessibility of CAPTCHA, CAPTCHAs intrinsically push the edges of human abilities in an attempt to defeat automated processes. Every type of CAPTCHA will be unsolvable by users with certain disabilities. However, they are widely used, and the Web Content Accessibility Guidelines Working Group believes that if CAPTCHAs were forbidden outright, Web sites would choose not to conform to WCAG rather than abandon CAPTCHA. This would create barriers for a great many more users with disabilities. For this reason the Working Group has chosen to structure the requirement about CAPTCHA in a way that meets the needs of most people with disabilities, yet is also considered adoptable by sites. Requiring two different forms of CAPTCHA on a given site ensures that most people with disabilities will find a form they can use.\n\nBecause some users with disabilities will still not be able to access sites that meet the minimum requirements, the Working Group provides recommendations for additional steps. Organizations motivated to conform to WCAG should be aware of the importance of this topic and should go as far beyond the minimum requirements of the guidelines as possible. Additional recommended steps include:\n\nProviding more than two modalities of CAPTCHAs\nProviding access to a human customer service representative who can bypass CAPTCHA\nNot requiring CAPTCHAs for authorized users\nAdditional information\n\nNon-text content can take a number of forms, and this Success Criterion specifies how each is to be handled.\n\nFor non-text content that is not covered by one of the other situations listed below, such as charts, diagrams, audio recordings, pictures, and animations, text alternatives can make the same information available in a form that can be rendered through any modality (for example, visual, auditory or tactile). Short and long text alternatives can be used as needed to convey the information in the non-text content. Note that prerecorded audio-only and prerecorded video-only files are covered here. Live-audio-only and Live-video-only files are covered below (see 3rd paragraph following this one).\n\nFor non-text content that is a control or accepts user input , such as images used as submit buttons, image maps or complex animations, a name is provided to describe the purpose of the non-text content so that the person at least knows what the non-text content is and why it is there.\n\nNon-text content that is time-based media is made accessible through 1.2: Time-Based Media. However, it is important that users know what it is when they encounter it on a page so they can decide what action if any they want to take with it. A text alternative that describes the time-based media and/or gives its title is therefore provided.\n\nFor Live Audio-only and live video-only content , it can be much more difficult to provide text alternatives that provide equivalent information as live audio-only and live video-only content. For these types of non-text content, text alternatives provide a descriptive label.\n\nSometimes a test or exercise must be partially or completely presented in non-text format. Audio or visual information is provided that cannot be changed to text because the test or exercise must be conducted using that sense. For example, a hearing test would be invalid if a text alternative were provided. A visual skill development exercise would similarly make no sense in text form. And a spelling test with text alternatives would not be very effective. For these cases, text alternatives should be provided to describe the purpose of the non-text content; of course, the text alternatives would not provide the same information needed to pass the test.\n\nSometimes content is primarily intended to create a specific sensory experience that words cannot fully capture. Examples include a symphony performance, works of visual art etc. For such content, text alternatives at least identify the non-text content with a descriptive label and where possible, additional descriptive text. If the reason for including the content in the page is known and can be described it is helpful to include that information.\n\nSometimes there are non-text exercises that are used to prove you are human. To avoid spam robots and other software from gaining access to a site a device called a CAPTCHA is used. These usually involve visual or auditory tasks that are beyond the current capabilities of Web robots. Providing a text alternative to them would however make them operable by Robots, thus defeating their purpose. In this case a text alternative would describe the purpose of the CAPTCHA, and alternate forms using different modalities would be provided to address the needs of people with different disabilities.\n\nSometimes there is non-text content that really is not meant to be seen or understood by the user. Transparent images used to move text over on a page; an invisible image that is used to track usage statistics; and a swirl in the corner that conveys no information but just fills up a blank space to create an aesthetic effect are all examples of this. Putting alternative text on such items just distracts people using screen readers from the content on the page. Not marking the content in any way, though, leaves users guessing what the non-text content is and what information they may have missed (even though they have not missed anything in reality). This type of non-text content, therefore, is marked or implemented in a way that assistive technologies (AT) will ignore it and not present anything to the user.",
      "benefitsText": "Benefits\nThis Success Criterion helps people who have difficulty perceiving visual content. Assistive technology can read text aloud, present it visually, or convert it to braille.\nText alternatives may help some people who have difficulty understanding the meaning of photographs, drawings, and other images (e.g., line drawings, graphic designs, paintings, three-dimensional representations), graphs, charts, animations, etc.\nPeople who are deaf, are hard of hearing, or who are having trouble understanding audio information for any reason can read the text presentation. Research is ongoing regarding automatic translation of text into sign language.\nPeople who are deaf-blind can read the text in braille.\nAdditionally, text alternatives support the ability to search for non-text content and to repurpose content in a variety of ways.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.1 音声のみ及び映像のみ (収録済)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   収録済の音声しか含まないメディア及び収録済の映像しか含まないメディアは、次の事項を満たしている。ただし、その音声又は映像がメディアによるテキストの代替であって、メディアによる代替であることが明確にラベル付けされている場合は除く:\n   \n   \n      \n      収録済の音声しか含まない\n      \n      時間依存メディアに対する代替コンテンツによって、収録済の音声しか含まないコンテンツと同等の情報を提供している。\n         \n      \n      \n      収録済の映像しか含まない\n      \n      時間依存メディアに対する代替コンテンツ又は音声トラックによって、収録済の映像しか含まないコンテンツと同等の情報を提供している。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by prerecorded audio-only and prerecorded video-only content available to all users. Alternatives for time-based media that are text based make information accessible because text can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. In the future, text could also be translated into symbols, sign language or simpler forms of the language (future).\n\nAn example of pre-recorded video with no audio information or user interaction is a silent movie. The purpose of the transcript is to provide an equivalent to what is presented visually. For prerecorded video content, authors have the option to provide an audio track. The purpose of the audio alternative is to be an equivalent to the video. This makes it possible for users with and without vision impairment to review content simultaneously. The approach can also make it easier for those with cognitive, language and learning disabilities to understand the content because it would provide parallel presentation.\n\nNote\n\nA text equivalent is not required for audio that is provided as an equivalent for video with no audio information. For example, it is not required to caption audio description that is provided as an alternative to a silent movie.\n\nSee also 1.2.4: Audio-only (Live)",
      "benefitsText": "Benefits\nThis Success Criterion helps people who have difficulty perceiving visual content. Assistive technology can read text alternatives aloud, present them visually, or convert them to braille.\nAlternatives for timed-based media that are text based may help some people who have difficulty understanding the meaning of prerecorded video content.\nPeople who are deaf, are hard of hearing, or who are having trouble understanding audio information for any reason can read the text presentation. Research is ongoing regarding automatic translation of text into sign language.\nPeople who are deaf-blind can read the text in braille.\nAdditionally, text supports the ability to search for non-text content and to repurpose content in a variety of ways.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-only-and-video-only-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.2 キャプション (収録済)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれているすべての収録済の音声コンテンツに対して、キャプションが提供されている。ただし、その同期したメディアがメディアによるテキストの代替であって、メディアによる代替であることが明確にラベル付けされている場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to enable people who are deaf or hard of hearing to watch synchronized media presentations. Captions provide the part of the content available via the audio track. Captions not only include dialogue, but identify who is speaking and include non-speech information conveyed through sound, including meaningful sound effects.\n\nIt is acknowledged that at the present time there may be difficulty in creating captions for time-sensitive material and this may result in the author being faced with the choice of delaying the information until captions are available, or publishing time-sensitive content that is inaccessible to the deaf, at least for the interval until captions are available. Over time, the tools for captioning as well as building the captioning into the delivery process can shorten or eliminate such delays.\n\nCaptions are not needed when the synchronized media is, itself, an alternate presentation of information that is also presented via text on the Web page. For example, if information on a page is accompanied by a synchronized media presentation that presents no more information than is already presented in text, but is easier for people with cognitive, language, or learning disabilities to understand, then it would not need to be captioned since the information is already presented on the page in text or in text alternatives (e.g., for images).\n\nSee also 1.2.4: Captions (Live).",
      "benefitsText": "Benefits\nPeople who are deaf or have a hearing loss can access the auditory information in the synchronized media content through captions.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/captions-prerecorded.html",
      "beneficiaries": [
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.4 キャプション (ライブ)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれているすべてのライブの音声コンテンツに対してキャプションが提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to enable people who are deaf or hard of hearing to watch real-time presentations. Captions provide the part of the content available via the audio track. Captions not only include dialogue, but also identify who is speaking and notate sound effects and other significant audio.\n\nThis success criterion was intended to apply to broadcast of synchronized media and is not intended to require that two-way multimedia calls between two or more individuals through web apps must be captioned regardless of the needs of users. Responsibility for providing captions would fall to the content providers (the callers) or the “host” caller, and not the application.",
      "benefitsText": "Benefits\nPeople who are deaf or have a hearing loss can access the auditory information in the synchronized media content through captions.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/captions-live.html",
      "beneficiaries": [
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.6 手話 (収録済)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれているすべての収録済の音声コンテンツに対して、手話通訳が提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to enable people who are deaf or hard of hearing and who are fluent in a sign language to understand the content of the audio track of synchronized media presentations. Written text, such as that found in captions, is often a second language. Because sign language provides the ability to provide intonation, emotion and other audio information that is reflected in sign language interpretation, but not in captions, sign language interpretation provides richer and more equivalent access to synchronized media. People who communicate extensively in sign language are also faster in sign language and synchronized media is a time-based presentation.",
      "benefitsText": "Benefits\nPeople whose human language is a sign language sometimes have limited reading ability. These individuals may not be able to read and comprehend the captions and thus require a sign language interpretation to gain access to the synchronized media content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/sign-language-prerecorded.html",
      "beneficiaries": [
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.8 メディアに対する代替 (収録済) ",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   すべての収録済の同期したメディア及びすべての収録済の映像しか含まないメディアに対して、時間依存メディアに対する代替コンテンツが提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make audio visual material available to individuals whose vision is too poor to reliably read captions and whose hearing is too poor to reliably hear dialogue and audio description. This is done by providing an alternative for time-based media.\n\nThis approach involves providing all of the information in the synchronized media (both visual and auditory) in text form. An alternative for time-based media provides a running description of all that is going on in the synchronized media content. The alternative for time-based media reads something like a book. Unlike audio description, the description of the video portion is not constrained to just the pauses in the existing dialogue. Full descriptions are provided of all visual information, including visual context, actions and expressions of actors, and any other visual material. In addition, non-speech sounds (laughter, off-screen voices, etc.) are described, and transcripts of all dialogue are included. The sequence of descriptions and dialogue transcripts is the same as the sequence in the synchronized media itself. As a result, the alternative for time-based media can provide a much more complete representation of the synchronized media content than audio description alone.\n\nIf there is any interaction as part of the synchronized media presentation (e.g., \"press now to answer the question\") then the alternative for time-based media would provide hyperlinks or whatever is needed to provide parallel functionality.\n\nIndividuals whose vision is too poor to reliably read captions and whose hearing is too poor to reliably hear dialogue can access the alternative for time-based media by using a refreshable braille display.\n\nNote\n\nFor 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.\n\n1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.",
      "benefitsText": "Benefits\nPeople who are deaf-blind, who cannot see well or at all, and who also cannot hear well or at all can get access to information in audio-visual presentations.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/media-alternative-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.9 音声のみ (ライブ)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ライブの音声しか含まないコンテンツに対して、それと同等の情報を提示する、時間依存メディアの代替コンテンツが提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by live audio, such as web-based audio conferencing, live speeches and radio Webcasts, accessible through the use of a text alternative. A live text caption service will enable live audio to be accessible to people who are deaf or hard of hearing, or who cannot otherwise hear the audio. Such services use a trained human operator who listens in to what is being said and uses a special keyboard to enter the text with only a small delay. They are able to capture a live event with a high degree of fidelity, and also to insert notes on any non spoken audio which is essential to understanding the event. A transcript is sometimes a possibility if the live audio is following a set script; but a live caption service is preferred because it plays out at the same pace as the audio itself, and can adapt to any deviations from the script that might occur.\n\nUsing untrained operators, or providing a transcript which differs markedly from what actually happens would not be considered meeting this Success Criterion.\n\nThis success criterion was intended to apply to broadcast of audio and is not intended to require that two-way audio calls between two or more individuals through web apps must be captioned regardless of the needs of users. Responsibility for providing captions would fall to the content providers (the callers) or the “host” caller, and not the application.",
      "benefitsText": "",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-only-live.html",
      "beneficiaries": [
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.2 音声の制御",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ上にある音声が自動的に再生され、3 秒より長く続く場合、その音声を一時停止又は停止するメカニズム、もしくはシステム全体の音量レベルに影響を与えずに音量レベルを調整できるメカニズムが利用できる。\n   \n   注記この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n",
      "intentText": "Intent\n\nIndividuals who use screen reading software can find it hard to hear the speech output if there is other audio playing at the same time. This difficulty is exacerbated when the screen reader's speech output is software based (as most are today) and is controlled via the same volume control as the sound. Therefore, it is important that the user be able to turn off the background sound.\n\nHaving control of the volume includes being able to reduce its volume to zero. Muting the system volume is not \"pausing or stopping\" the autoplay audio. Both the \"pause or stop\" and control of audio volume need to be independent of the overall system volume.\n\nNote\n\nPlaying audio automatically when landing on a page may affect a screen reader user's ability to find the mechanism to stop it because they navigate by listening and automatically started sounds might interfere with that navigation. Therefore, we discourage the practice of automatically starting sounds (especially if they last more than 3 seconds), and encourage that the sound be started by an action initiated by the user after they reach the page, rather than requiring that the sound be stopped by an action of the user after they land on the page.\n\nSee also 1.4.7: Low or No Background Audio.",
      "benefitsText": "Benefits\nIndividuals who use screen reading technologies can hear the screen reader without other sounds playing. This is especially important for those who are hard of hearing and for those whose screen readers use the system volume (so they cannot turn sound down and screen reader up).\nThis Success Criterion also benefits people who have difficulty focusing on visual content (including text) when audio is playing.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-control.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.7 小さな背景音、又は背景音なし",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   収録済の音声しか含まないコンテンツで、(1) 前景に主として発話を含み、(2) 音声 CAPTCHA 又は音声ロゴではなく、かつ、(3) 例えば、歌やラップなどのように、主として音楽表現を意図した発声ではないものについては、次に挙げる事項のうち、少なくとも一つを満たしている:\n   \n   \n      \n      背景音なし\n      \n      音声は背景音を含まない。\n         \n      \n      \n      消音\n      \n      背景音を消すことができる。\n         \n      \n      \n      20 デシベル\n      \n      背景音は、前景にある発話のコンテンツより少なくとも 20 デシベルは低い。ただし、継続時間が 2 秒以内で発生頻度が低い背景音は除く。\n         \n         注記デシベルの定義によれば、この要件を満たす背景音は、前景にある発話のコンテンツの約 4 分の 1 の大きさになる。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that any non-speech sounds are low enough that a user who is hard of hearing can separate the speech from background sounds or other noise foreground speech content.\n\nThe value of 20 dB was chosen based on Large area assistive listening systems (ALS): Review and recommendations [[LAALS]] and In-the-ear measurements of interference in hearing aids from digital wireless telephones [[HEARING-AID-INT]]",
      "benefitsText": "Benefits\nPeople who are hard of hearing often have great difficulty separating speech from background sound.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/low-or-no-background-audio.html",
      "beneficiaries": [
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.3 タイミング非依存",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   タイミングは、コンテンツによって提示されるイベント又は動作の必要不可欠な部分ではない。ただし、インタラクティブではない同期したメディア及びリアルタイムのイベントは除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to minimize the occurrence of content that requires timed interaction. This enables people with blindness, low vision, cognitive limitations, or motor impairments to interact with content. This differs from the Level A Success Criterion in that the only exception is for real-time events.\n\nNote\n\nVideo only, such as sign language, is covered in Guideline 1.1.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/no-timing.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.5 再認証",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   認証済のセッションが切れた場合は、再認証後でもデータを失うことなく利用者が操作を継続できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow all users to complete authenticated transactions that have inactivity time limits or other circumstances that would cause a user to be logged out while in the midst of completing the transaction.\n\nFor security reasons, many sites implement an authentication time limit after a certain period of inactivity. These time limits may cause problems for persons with disabilities because it may take longer for them to complete the activity.\n\nOther sites will log a person out of a session if a person logs in on the Web site from another computer or if other activities arise that make the site suspicious of whether the person is still the same legitimate person who logged in originally. When users are logged out while still in the midst of a transaction - it is important that they be given the ability to re-authenticate and continue with the transaction without the loss of any data already entered.",
      "benefitsText": "Benefits\nThis Success Criterion benefits people who may require additional time to complete an activity. People with cognitive limitations may read slowly and require additional time to read and respond to a questionnaire. Users interacting via a screen reader may need extra time to navigate and complete a complicated form. A person with motor impairments or who navigates with an alternative input device may require additional time to navigate through or complete input within a form.\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/re-authenticating.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.1 ブロックスキップ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   複数のウェブページ上で繰り返されているコンテンツのブロックをスキップするメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow people who navigate sequentially through content more direct access to the primary content of the Web page. Web pages and applications often have content that appears on other pages or screens. Examples of repeated blocks of content include but are not limited to navigation links, header content, and advertising frames. Small repeated sections such as individual words, phrases or single links are not considered blocks for the purposes of this provision.\n\nUsers who navigate sequentially through content will generally have to navigate through repeated content on each page. This is in contrast to a sighted user's ability to ignore the repeated material either by focusing on the center of the screen (where main content usually appears) or a mouse user's ability to select a link with a single mouse click rather than encountering every link or form control that comes before the item they want.\n\nIt is not the intent of this Success Criterion to require authors to provide methods that are redundant to functionality provided by the user agent. Most web browsers provide keyboard shortcuts to move the user focus to the top of the page, so if a set of navigation links is provided at the bottom of a web page providing a \"skip\" link may be unnecessary.\n\nNote\n\nAlthough this Success Criterion deals with blocks of content that are repeated on multiple pages, we also strongly promote structural markup on individual pages as per Success Criteria 1.3.1.\n\nAlthough the success criterion does not specifically use the term “within a set of web pages”, the concept of the pages belonging to a set is implied. An author would not be expected to avoid any possible duplication of content in any two pages that are not in some way related to each other, and are not \"Web pages that share a common purpose and that are created by the same author, group or organization” (the definition of set of web pages).\n\nNote\n\nEven for web pages that are not in a set, if a web page has blocks of text that are repeated within the page it may be helpful (but not required) to provide a means to skip over them.",
      "benefitsText": "Benefits\n\nWhen this Success Criterion is not satisfied, it may be difficult for people with some disabilities to reach the main content of a Web page quickly and easily:\n\nScreen reader users who visit several pages on the same site can avoid having to hear all header content and dozens of navigation links on every page before the main content is spoken.\nPeople who use only the keyboard or a keyboard interface can reach content with fewer keystrokes. Otherwise, they might have to make dozens of keystrokes before reaching a link in the main content area. This can take a long time and may cause severe physical pain for some users.\nPeople who use screen magnifiers do not have to search through the same header content or other blocks of information to find where the main content begins each time they enter a new page.\nPeople with cognitive limitations as well as people who use screen readers may benefit when links are grouped into lists",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/bypass-blocks.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.2 ページタイトル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページには、主題又は目的を説明したタイトルがある。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users find content and orient themselves within it by ensuring that each Web page has a descriptive title. Titles identify the current location without requiring users to read or interpret page content. When titles appear in site maps or lists of search results, users can more quickly identify the content they need. User agents make the title of the page easily available to the user for identifying the page. For instance, a user agent may display the page title in the window title bar or as the name of the tab containing the page.\n\nIn cases where the page is a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the page. Note that it is not required to use the name of the document or web application; other things may also describe the purpose or the topic of the page.\n\nIn cases such as Single Page Applications (SPAs), where various distinct pages/views are all nominally served from the same URI and the content of the page is changed dynamically, the title of the page should also be changed dynamically to reflect the content or topic of the current view.\n\nSuccess Criteria 2.4.4 and 2.4.9 deal with the purpose of links, many of which are links to web pages. Here also, the name of a document or web application being linked to would be sufficient to describe the purpose of the link. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.",
      "benefitsText": "Benefits\nThis criterion benefits all users in allowing users to quickly and easily identify whether the information contained in the Web page is relevant to their needs.\nPeople with visual disabilities will benefit from being able to differentiate content when multiple Web pages are open.\nPeople with cognitive disabilities, limited short-term memory and reading disabilities also benefit from the ability to identify content by its title.\nThis criterion also benefits people with severe mobility impairments whose mode of operation relies on audio when navigating between Web pages.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/page-titled.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.1 ページの言語",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのウェブページのデフォルトの自然言語がどの言語であるか、プログラムによる解釈が可能である。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that content developers provide information in the Web page that user agents need to present text and other linguistic content correctly. Both assistive technologies and conventional user agents can render text more accurately when the language of the Web page is identified. Screen readers can load the correct pronunciation rules. Visual browsers can display characters and scripts correctly. Media players can show captions correctly. As a result, users with disabilities will be better able to understand the content.\n\nThe default human language of the Web page is the default text-processing language as discussed in Internationalization Best Practices: Specifying Language in XHTML & HTML Content. When a Web page uses several languages, the default text-processing language is the language which is used most. (If several languages are used equally, the first language used should be chosen as the default human language.)\n\nNote\n\nFor multilingual sites targeting Conformance Level A, the Working Group strongly encourages developers to follow Success Criterion 3.1.2 as well even though that is a Level AA Success Criterion.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps:\n\npeople who use screen readers or other technologies that convert text into synthetic speech;\npeople who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets or decoding words;\npeople with certain cognitive, language and learning disabilities who use text-to-speech software\npeople who rely on captions for synchronized media.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/language-of-page.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.2 一部分の言語",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツの一節、又は語句それぞれの自然言語がどの言語であるか、プログラムによる解釈が可能である。ただし、固有名詞、技術用語、言語が不明な語句、及びすぐ前後にあるテキストの言語の一部になっている単語又は語句は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that user agents can correctly present phrases, passages, and in some cases words written in multiple languages. This makes it possible for user agents and assistive technologies to present content according to the presentation and pronunciation rules for that language. This applies to graphical browsers as well as screen readers, braille displays, and other voice browsers.\n\nBoth assistive technologies and conventional user agents can render text more accurately if the language of each passage of text is identified. Screen readers can use the pronunciation rules of the language of the text. Visual browsers can display characters and scripts in appropriate ways. This is especially important when switching between languages that read from left to right and languages that read from right to left, or when text is rendered in a language that uses a different alphabet. Users with disabilities who know all the languages used in the Web page will be better able to understand the content when each passage is rendered appropriately.\n\nWhen no other language has been specified for a phrase or passage of text, its human language is the default human language of the Web page (see Success Criterion 3.1.1). So the human language of all content in single language documents can be programmatically determined.\n\nIndividual words or phrases in one language can become part of another language. For example, \"rendezvous\" is a French word that has been adopted in English, appears in English dictionaries, and is properly pronounced by English screen readers. Hence a passage of English text may contain the word \"rendezvous\" without specifying that its human language is French and still satisfy this Success Criterion. Frequently, when the human language of text appears to be changing for a single word, that word has become part of the language of the surrounding text. Because this is so common in some languages, single words should be considered part of the language of the surrounding text unless it is clear that a change in language was intended. If there is doubt whether a change in language is intended, consider whether the word would be pronounced the same (except for accent or intonation) in the language of the immediately surrounding text.\n\nMost professions require frequent use of technical terms which may originate from a foreign language. Such terms are usually not translated to all languages. The universal nature of technical terms also facilitate communication between professionals.\n\nSome common examples of technical terms include: Homo sapiens, Alpha Centauri, hertz, and habeas corpus.\n\nIdentifying changes in language is important for a number of reasons:\n\nIt allows braille translation software to follow changes in language, e.g., substitute control codes for accented characters, and insert control codes necessary to prevent erroneous creation of Grade 2 braille contractions.\nSpeech synthesizers that support multiple languages will be able to speak the text in the appropriate accent with proper pronunciation. If changes are not marked, the synthesizer will try its best to speak the words in the default language it works in. Thus, the French word for car, \"voiture\" would be pronounced \"voyture\" by a speech synthesizer that uses English as its default language.\nMarking changes in language can benefit future developments in technology, for example users who are unable to translate between languages themselves will be able to use machines to translate unfamiliar languages.\nMarking changes in language can also assist user agents in providing definitions using a dictionary.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps:\n\npeople who use screen readers or other technologies that convert text into synthetic speech;\npeople who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets, decoding words, and understanding words and phrases;\npeople with certain cognitive, language and learning disabilities who use text-to-speech software;\npeople who rely on captions to recognize language changes in the soundtrack of synchronized media content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/language-of-parts.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人"
      ]
    }
  ],
  "scForVisualImpairment": [
    {
      "title": "達成基準 1.1.1 非テキストコンテンツ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者に提示されるすべての非テキストコンテンツには、同等の目的を果たすテキストによる代替が提供されている。ただし、次の場合は除く:\n   \n   \n      \n      コントロール、入力\n      \n      非テキストコンテンツが、コントロール又は利用者の入力を受け付けるものであるとき、その目的を説明する名前 (name) を提供している。(コントロール及び利用者の入力を受け入れるコンテンツに関するその他の要件は、達成基準 4.1.2 を参照。) \n         \n      \n      \n      時間依存メディア\n      \n      非テキストコンテンツが、時間に依存したメディアであるとき、テキストによる代替は、少なくとも、その非テキストコンテンツを識別できる説明を提供している。(メディアに関するその他の要件は、ガイドライン 1.2 を参照。) \n         \n      \n      \n      テスト\n      \n      非テキストコンテンツが、テキストで提示されると無効になるテスト又は演習のとき、テキストによる代替は、少なくともその非テキストコンテンツを識別できる説明を提供している。\n         \n      \n      \n      感覚的\n      \n      非テキストコンテンツが、特定の感覚的体験を創り出すことを主に意図しているとき、テキストによる代替は、少なくともその非テキストコンテンツを識別できる説明を提供している。\n         \n      \n      \n      CAPTCHA\n      \n      非テキストコンテンツが、コンピュータではなく人間がコンテンツにアクセスしていることを確認する目的で用いられているとき、テキストによる代替は、その非テキストコンテンツの目的を特定し、説明している。なおかつ、他の感覚による知覚に対応して出力する CAPTCHA の代替形式を提供することで、様々な障害に対応している。\n         \n      \n      \n      装飾、整形、非表示\n      \n      非テキストコンテンツが、純粋な装飾である、見た目の整形のためだけに用いられている、又は利用者に提供されるものではないとき、支援技術が無視できるように実装されている。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by non-text content accessible through the use of a text alternative. Text alternatives are a primary way for making information accessible because they can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows the information to be rendered in a variety of ways by a variety of user agents. For example, a person who cannot see a picture can have the text alternative read aloud using synthesized speech. A person who cannot hear an audio file can have the text alternative displayed so that he or she can read it. In the future, text alternatives will also allow information to be more easily translated into sign language or into a simpler form of the same language.\n\nNote on CAPTCHA\n\nCAPTCHAs are a controversial topic in the accessibility community. As is described in the paper Inaccessibility of CAPTCHA, CAPTCHAs intrinsically push the edges of human abilities in an attempt to defeat automated processes. Every type of CAPTCHA will be unsolvable by users with certain disabilities. However, they are widely used, and the Web Content Accessibility Guidelines Working Group believes that if CAPTCHAs were forbidden outright, Web sites would choose not to conform to WCAG rather than abandon CAPTCHA. This would create barriers for a great many more users with disabilities. For this reason the Working Group has chosen to structure the requirement about CAPTCHA in a way that meets the needs of most people with disabilities, yet is also considered adoptable by sites. Requiring two different forms of CAPTCHA on a given site ensures that most people with disabilities will find a form they can use.\n\nBecause some users with disabilities will still not be able to access sites that meet the minimum requirements, the Working Group provides recommendations for additional steps. Organizations motivated to conform to WCAG should be aware of the importance of this topic and should go as far beyond the minimum requirements of the guidelines as possible. Additional recommended steps include:\n\nProviding more than two modalities of CAPTCHAs\nProviding access to a human customer service representative who can bypass CAPTCHA\nNot requiring CAPTCHAs for authorized users\nAdditional information\n\nNon-text content can take a number of forms, and this Success Criterion specifies how each is to be handled.\n\nFor non-text content that is not covered by one of the other situations listed below, such as charts, diagrams, audio recordings, pictures, and animations, text alternatives can make the same information available in a form that can be rendered through any modality (for example, visual, auditory or tactile). Short and long text alternatives can be used as needed to convey the information in the non-text content. Note that prerecorded audio-only and prerecorded video-only files are covered here. Live-audio-only and Live-video-only files are covered below (see 3rd paragraph following this one).\n\nFor non-text content that is a control or accepts user input , such as images used as submit buttons, image maps or complex animations, a name is provided to describe the purpose of the non-text content so that the person at least knows what the non-text content is and why it is there.\n\nNon-text content that is time-based media is made accessible through 1.2: Time-Based Media. However, it is important that users know what it is when they encounter it on a page so they can decide what action if any they want to take with it. A text alternative that describes the time-based media and/or gives its title is therefore provided.\n\nFor Live Audio-only and live video-only content , it can be much more difficult to provide text alternatives that provide equivalent information as live audio-only and live video-only content. For these types of non-text content, text alternatives provide a descriptive label.\n\nSometimes a test or exercise must be partially or completely presented in non-text format. Audio or visual information is provided that cannot be changed to text because the test or exercise must be conducted using that sense. For example, a hearing test would be invalid if a text alternative were provided. A visual skill development exercise would similarly make no sense in text form. And a spelling test with text alternatives would not be very effective. For these cases, text alternatives should be provided to describe the purpose of the non-text content; of course, the text alternatives would not provide the same information needed to pass the test.\n\nSometimes content is primarily intended to create a specific sensory experience that words cannot fully capture. Examples include a symphony performance, works of visual art etc. For such content, text alternatives at least identify the non-text content with a descriptive label and where possible, additional descriptive text. If the reason for including the content in the page is known and can be described it is helpful to include that information.\n\nSometimes there are non-text exercises that are used to prove you are human. To avoid spam robots and other software from gaining access to a site a device called a CAPTCHA is used. These usually involve visual or auditory tasks that are beyond the current capabilities of Web robots. Providing a text alternative to them would however make them operable by Robots, thus defeating their purpose. In this case a text alternative would describe the purpose of the CAPTCHA, and alternate forms using different modalities would be provided to address the needs of people with different disabilities.\n\nSometimes there is non-text content that really is not meant to be seen or understood by the user. Transparent images used to move text over on a page; an invisible image that is used to track usage statistics; and a swirl in the corner that conveys no information but just fills up a blank space to create an aesthetic effect are all examples of this. Putting alternative text on such items just distracts people using screen readers from the content on the page. Not marking the content in any way, though, leaves users guessing what the non-text content is and what information they may have missed (even though they have not missed anything in reality). This type of non-text content, therefore, is marked or implemented in a way that assistive technologies (AT) will ignore it and not present anything to the user.",
      "benefitsText": "Benefits\nThis Success Criterion helps people who have difficulty perceiving visual content. Assistive technology can read text aloud, present it visually, or convert it to braille.\nText alternatives may help some people who have difficulty understanding the meaning of photographs, drawings, and other images (e.g., line drawings, graphic designs, paintings, three-dimensional representations), graphs, charts, animations, etc.\nPeople who are deaf, are hard of hearing, or who are having trouble understanding audio information for any reason can read the text presentation. Research is ongoing regarding automatic translation of text into sign language.\nPeople who are deaf-blind can read the text in braille.\nAdditionally, text alternatives support the ability to search for non-text content and to repurpose content in a variety of ways.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.1 音声のみ及び映像のみ (収録済)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   収録済の音声しか含まないメディア及び収録済の映像しか含まないメディアは、次の事項を満たしている。ただし、その音声又は映像がメディアによるテキストの代替であって、メディアによる代替であることが明確にラベル付けされている場合は除く:\n   \n   \n      \n      収録済の音声しか含まない\n      \n      時間依存メディアに対する代替コンテンツによって、収録済の音声しか含まないコンテンツと同等の情報を提供している。\n         \n      \n      \n      収録済の映像しか含まない\n      \n      時間依存メディアに対する代替コンテンツ又は音声トラックによって、収録済の映像しか含まないコンテンツと同等の情報を提供している。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by prerecorded audio-only and prerecorded video-only content available to all users. Alternatives for time-based media that are text based make information accessible because text can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. In the future, text could also be translated into symbols, sign language or simpler forms of the language (future).\n\nAn example of pre-recorded video with no audio information or user interaction is a silent movie. The purpose of the transcript is to provide an equivalent to what is presented visually. For prerecorded video content, authors have the option to provide an audio track. The purpose of the audio alternative is to be an equivalent to the video. This makes it possible for users with and without vision impairment to review content simultaneously. The approach can also make it easier for those with cognitive, language and learning disabilities to understand the content because it would provide parallel presentation.\n\nNote\n\nA text equivalent is not required for audio that is provided as an equivalent for video with no audio information. For example, it is not required to caption audio description that is provided as an alternative to a silent movie.\n\nSee also 1.2.4: Audio-only (Live)",
      "benefitsText": "Benefits\nThis Success Criterion helps people who have difficulty perceiving visual content. Assistive technology can read text alternatives aloud, present them visually, or convert them to braille.\nAlternatives for timed-based media that are text based may help some people who have difficulty understanding the meaning of prerecorded video content.\nPeople who are deaf, are hard of hearing, or who are having trouble understanding audio information for any reason can read the text presentation. Research is ongoing regarding automatic translation of text into sign language.\nPeople who are deaf-blind can read the text in braille.\nAdditionally, text supports the ability to search for non-text content and to repurpose content in a variety of ways.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-only-and-video-only-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.3 音声解説、又はメディアに対する代替 (収録済)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれている収録済の映像コンテンツに対して、時間依存メディアに対する代替コンテンツ又は音声解説が提供されている。ただし、その同期したメディアがメディアによるテキストの代替であって、メディアによる代替であることが明確にラベル付けされている場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide people who are blind or visually impaired access to the visual information in a synchronized media presentation. This Success Criterion describes two approaches, either of which can be used.\n\nOne approach is to provide audio description of the video content. The audio description augments the audio portion of the presentation with the information needed when the video portion is not available. During existing pauses in dialogue, audio description provides information about actions, characters, scene changes, and on-screen text that are important and are not described or spoken in the main sound track.\n\nThe second approach involves providing all of the information in the synchronized media (both visual and auditory) in text form. An alternative for time-based media provides a running description of all that is going on in the synchronized media content. The alternative for time-based media reads something like a screenplay or book. Unlike audio description, the description of the video portion is not constrained to just the pauses in the existing dialogue. Full descriptions are provided of all visual information, including visual context, actions and expressions of actors, and any other visual material. In addition, non-speech sounds (laughter, off-screen voices, etc.) are described, and transcripts of all dialogue are included. The sequence of description and dialogue transcripts are the same as the sequence in the synchronized media itself. As a result, the alternative for time-based media can provide a much more complete representation of the synchronized media content than audio description alone.\n\nIf there is any interaction as part of the synchronized media presentation (e.g., \"press now to answer the question\") then the alternative for time-based media would provide hyperlinks or whatever is needed to provide the same functionality.\n\nNote\n\nFor 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.\n\n1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.\n\nSee also 1.2.5 Audio Description (Prerecorded), 1.2.7 Extended Audio Description (Prerecorded) and 1.2.8 Media Alternative (Prerecorded).",
      "benefitsText": "Benefits\nThis Success Criterion may help some people who have difficulty watching video or other synchronized media content, including people who have difficulty perceiving or understanding moving images.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-description-or-media-alternative-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.5 音声解説 (収録済)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれているすべての収録済の映像コンテンツに対して、音声解説が提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide people who are blind or visually impaired access to the visual information in a synchronized media presentation. The audio description augments the audio portion of the presentation with the information needed when the video portion is not available. During existing pauses in dialogue, audio description provides information about actions, characters, scene changes, and on-screen text that are important and are not described or spoken in the main sound track.\n\nNote\n\nFor 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.\n\n1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.",
      "benefitsText": "Benefits\nPeople who are blind or have low vision as well as those with cognitive limitations who have difficulty interpreting visually what is happening benefit from audio description of visual information.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-description-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.7 拡張音声解説 (収録済)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   前景音の合間が、音声解説で映像の意味を伝達するのに不十分な場合、同期したメディアに含まれているすべての収録済の映像コンテンツに対して、拡張音声解説が提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide people who are blind or visually impaired access to a synchronized media presentation beyond that which can be provided by standard audio description. This is done by periodically freezing the synchronized media presentation and playing additional audio description. The synchronized media presentation is then resumed.\n\nBecause it disrupts viewing for those who do not need the additional description, techniques that allow you to turn the feature on and off are often provided. Alternately, versions with and without the additional description can be provided.",
      "benefitsText": "Benefits\nPeople who are blind, people with low vision who cannot see the screen, as well as those with cognitive limitations who have difficulty interpreting visually what is happening, often use audio description of the visual information. However, if there is too much dialogue the audio description is insufficient. Extended audio description can provide the additional information needed to understand the video.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/extended-audio-description-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.8 メディアに対する代替 (収録済) ",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   すべての収録済の同期したメディア及びすべての収録済の映像しか含まないメディアに対して、時間依存メディアに対する代替コンテンツが提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make audio visual material available to individuals whose vision is too poor to reliably read captions and whose hearing is too poor to reliably hear dialogue and audio description. This is done by providing an alternative for time-based media.\n\nThis approach involves providing all of the information in the synchronized media (both visual and auditory) in text form. An alternative for time-based media provides a running description of all that is going on in the synchronized media content. The alternative for time-based media reads something like a book. Unlike audio description, the description of the video portion is not constrained to just the pauses in the existing dialogue. Full descriptions are provided of all visual information, including visual context, actions and expressions of actors, and any other visual material. In addition, non-speech sounds (laughter, off-screen voices, etc.) are described, and transcripts of all dialogue are included. The sequence of descriptions and dialogue transcripts is the same as the sequence in the synchronized media itself. As a result, the alternative for time-based media can provide a much more complete representation of the synchronized media content than audio description alone.\n\nIf there is any interaction as part of the synchronized media presentation (e.g., \"press now to answer the question\") then the alternative for time-based media would provide hyperlinks or whatever is needed to provide parallel functionality.\n\nIndividuals whose vision is too poor to reliably read captions and whose hearing is too poor to reliably hear dialogue can access the alternative for time-based media by using a refreshable braille display.\n\nNote\n\nFor 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.\n\n1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.",
      "benefitsText": "Benefits\nPeople who are deaf-blind, who cannot see well or at all, and who also cannot hear well or at all can get access to information in audio-visual presentations.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/media-alternative-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.3.1 情報及び関係性",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   何らかの形で提示されている情報、構造、及び関係性は、プログラムによる解釈が可能である、又はテキストで提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that information and relationships that are implied by visual or auditory formatting are preserved when the presentation format changes. For example, the presentation format changes when the content is read by a screen reader or when a user style sheet is substituted for the style sheet provided by the author.\n\nSighted users perceive structure and relationships through various visual cues — headings are often in a larger, bold font separated from paragraphs by blank lines; list items are preceded by a bullet and perhaps indented; paragraphs are separated by a blank line; items that share a common characteristic are organized into tabular rows and columns; form fields may be positioned as groups that share text labels; a different background color may be used to indicate that several items are related to each other; words that have special status are indicated by changing the font family and /or bolding, italicizing, or underlining them; items that share a common characteristic are organized into a table where the relationship of cells sharing the same row or column and the relationship of each cell to its row and/or column header are necessary for understanding; and so on. Having these structures and these relationships programmatically determined or available in text ensures that information important for comprehension will be perceivable to all.\n\nAuditory cues may be used as well. For example, a chime might indicate the beginning of a new section; a change in voice pitch or speech rate may be used to emphasize important information or to indicate quoted text; etc.\n\nWhen such relationships are perceivable to one set of users, those relationships can be made to be perceivable to all. One method of determining whether or not information has been properly provided to all users is to access the information serially in different modalities.\n\nIf links to glossary items are implemented using anchor elements (or the proper link element for the technology in use) and identified using a different font face, a screen reader user will hear that the item is a link when the glossary term is encountered even though they may not receive information about the change in font face. An on-line catalog may indicate prices using a larger font colored red. A screen reader or person who cannot perceive red, still has the information about the price as long as it is preceded by the currency symbol.\n\nSome technologies do not provide a means to programmatically determine some types of information and relationships. In that case then there should be a text description of the information and relationships. For instance, \"all required fields are marked with an asterisk (*)\". The text description should be near the information it is describing (when the page is linearized), such as in the parent element or in the adjacent element.\n\nThere may also be cases where it may be a judgment call as to whether the relationships should be programmatically determined or be presented in text. However, when technologies support programmatic relationships, it is strongly encouraged that information and relationships be programmatically determined rather than described in text.\n\nNote\n\nIt is not required that color values be programmatically determined. The information conveyed by color cannot be adequately presented simply by exposing the value. Therefore, Success Criterion 1.4.1 addresses the specific case of color, rather than Success Criterion 1.3.1.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with different disabilities by allowing user agents to adapt content according to the needs of individual users.\nUsers who are blind (using a screen reader) benefit when information conveyed through color is also available in text (including text alternatives for images that use color to convey information).\nUsers who are deaf-blind using braille (text) refreshable displays may be unable to access color-dependent information.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.3.2 意味のあるシーケンス",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツが提示されている順序が意味に影響を及ぼす場合には、正しく読むシーケンスはプログラムによる解釈が可能である。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to enable a user agent to provide an alternative presentation of content while preserving the reading order needed to understand the meaning. It is important that it be possible to programmatically determine at least one sequence of the content that makes sense. Content that does not meet this Success Criterion may confuse or disorient users when assistive technology reads the content in the wrong order, or when alternate style sheets or other formatting changes are applied.\n\nA sequence is meaningful if the order of content in the sequence cannot be changed without affecting its meaning. For example, if a page contains two independent articles, the relative order of the articles may not affect their meaning, as long as they are not interleaved. In such a situation, the articles themselves may have meaningful sequence, but the container that contains the articles may not have a meaningful sequence.\n\nThe semantics of some elements define whether or not their content is a meaningful sequence. For instance, in HTML, text is always a meaningful sequence. Tables and ordered lists are meaningful sequences, but unordered lists are not.\n\nThe order of content in a sequence is not always meaningful. For example, the relative order of the main section of a Web page and a navigation section does not affect their meaning. They could occur in either order in the programmatically determined reading sequence. As another example, a magazine article contains several callout sidebars. The order of the article and the sidebars does not affect their meaning. In these cases there are a number of different reading orders for a Web page that can satisfy the Success Criterion.\n\nFor clarity:\n\nProviding a particular linear order is only required where it affects meaning.\nThere may be more than one order that is \"correct\" (according to the WCAG 2.0 definition).\nOnly one correct order needs to be provided.",
      "benefitsText": "Benefits\nThis Success Criterion may help people who rely on assistive technologies that read content aloud. The meaning evident in the sequencing of the information in the default presentation will be the same when the content is presented in spoken form.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/meaningful-sequence.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.3.3 感覚的な特徴",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツを理解し操作するための説明は、形、色、大きさ、視覚的な位置、方向、又は音のような、構成要素が持つ感覚的な特徴だけに依存していない。\n  \n  注記色に関する要件は、ガイドライン 1.4 を参照。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that all users can access instructions for using the content, even when they cannot perceive shape or size or use information about spatial location or orientation. Some content relies on knowledge of the shape or position of objects that are not available from the structure of the content (for example, \"round button\" or \"button to the right\"). Some users with disabilities are not able to perceive shape or position due to the nature of the assistive technologies they use. This Success Criterion requires that additional information be provided to clarify instructions that are dependent on this kind of information.\n\nProviding information using shape and/or location, however, is an effective method for many users including those with cognitive limitations. This provision should not discourage those types of cues as long as the information is also provided in other ways.\n\nIn some languages, it is commonly understood that \"above\" refers to the content previous to that point in the content and \"below\" refers to the content after that point. In such languages, if the content being referenced is in the appropriate place in the reading order and the references are unambiguous, statements such as \"choose one of the links below\" or \"all of the above\" would conform to this Success Criterion.\n\nWCAG was designed to apply only to controls that were displayed on a web page. The intent was to avoid describing controls solely via references to visual or auditory cues. When applying this to instructions for operating physical hardware controls (e.g. a web kiosk with dedicated content), tactile cues on the hardware might be described (e.g. the arrow shaped key, the round key on the right side). This success criterion is not intended to prevent the use of tactile cues in instructions.",
      "benefitsText": "Benefits\nPeople who are blind and people who have low vision may not be able to understand instructions if they rely only on a description of the shape and/or location of content. Providing additional information in any instructions other than shape and/or location will allow users to understand the instructions even if they cannot perceive shape and/or location.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/sensory-characteristics.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.1 色の使用",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   色が、情報を伝える、動作を示す、反応を促す、又は視覚的な要素を判別するための唯一の視覚的手段になっていない。\n   \n   注記この達成基準は、特に色の知覚に関するものである。その他の知覚形態については、色やその他の視覚的提示のコーディングへのプログラムによるアクセスも含めて、ガイドライン 1.3 で網羅されている。\n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that all sighted users can access information that is conveyed by color differences, that is, by the use of color where each color has a meaning assigned to it. If the information is conveyed through color differences in an image (or other non-text format), the color may not be seen by users with color deficiencies. In this case, providing the information conveyed with color through another visual means ensures users who cannot see color can still perceive the information.\n\nColor is an important asset in design of Web content, enhancing its aesthetic appeal, its usability, and its accessibility. However, some users have difficulty perceiving color. People with partial sight often experience limited color vision, and many older users do not see color well. In addition, people using limited-color or monochrome displays and browsers will be unable to access information that is presented only in color.\n\nExamples of information conveyed by color differences: “required fields are red\", “error is shown in red\", and “Mary's sales are in red, Tom's are in blue\". Examples of indications of an action include: using color to indicate that a link will open in a new window or that a database entry has been updated successfully. An example of prompting a response would be: using highlighting on form fields to indicate that a required field had been left blank.\n\nNote\n\nThis should not in any way discourage the use of color on a page, or even color coding if it is complemented by other visual indication.\n\nNote\n\nIf content is conveyed through the use of colors that differ not only in their hue, but that also have a significant difference in lightness, then this counts as an additional visual distinction, as long as the difference in relative luminance between the colors leads to a contrast ratio of 3:1 or greater. For example, a light green and a dark red differ both by color (hue) and by lightness, so they would pass if the contrast ratio is at least 3:1. Similarly, if content is distinguished by inverting an element's foreground and background colors, this would pass (again, assuming that the foreground and background colors have a sufficient contrast).\n\nHowever, if content relies on the user's ability to accurately perceive or differentiate a particular color an additional visual indicator will be required regardless of the contrast ratio between those colors. For example, knowing whether an outline is green for valid or red for invalid.\n\nNote\n\nThis criterion does not apply to situations where color has not been used to convey information, indicate an action, prompt a response or distinguish a visual element. For instance, a hyperlink which has been styled to appear no different than neighboring static text would not fail this success criterion, as there would be no color differentiation between the actionable hyperlink text and the adjacent static text. Such lack of styling differentiation could result in poor usability for anyone looking at the interface, regardless of disability.\n\nNote\n\nThis criterion does not directly address the needs of users with assistive technologies. It aims to ensure that sighted users who cannot distinguish between some colors can still understand content. How information is conveyed to assistive technology users is covered separately in other criteria, including (but not limited to) 1.1.1 Non-text Content, 1.3.1 Info and Relationships, and 4.1.2 Name, Role, Value.\n\nConversely, even if information that is conveyed by color differences is appropriately conveyed to assistive technologies, it does not necessarily pass this criterion, as sighted users who cannot distinguish between certain color may not necessarily be using any assistive technologies. This criterion requires a visible alternative to color.\n\nNote\n\nMost user agents provide users with a color-only cue that a link has been previously activated by them (\"visited\"). However, several technical constraints result in authors having very limited control over these color-only indications of visited links. The technical constraints are as follows:\n\nUser agents constrain the exposure of a link's visited state due to privacy concerns. Author queries to user agents will indicate all links have not been visited.\nAny available information on the visited state of a link would be inaccurate since it is both user and browser-dependent. Even if an author could accurately get information on previously activated links by a certain user, the author would be constrained to the current browser's preserved history, and would be unable to determine if the user had visited the page using a different browser (or if the history was not preserved, either from cache clearing or use of private sessions).\nAuthors can only use color to modify the :visited CSS pseudoclass style. The technology constrains any non-color styling. Due to palette limitations, an author cannot use color alone to achieve 3:1 contrast between link and non-link text as well as between visited and unvisited links while also achieving 4.5:1 contrast for all link and non-link text.\nAuthors also cannot set the visited state of links. The anchor element does not include a \"visited\" attribute; therefore the author has no ability to alter the state through an attribute setting. As such, authors cannot achieve 1.3.1 Info and Relationships or 4.1.2 Name, Role, Value in regard to visited links.\n\nFor these reasons, setting or conveying a link's visited status is not an author responsibility. Where color alone distinguishes between visited and unvisited links, it does not result in a failure of this Success Criterion, even where the contrast between the two link colors is below 3:1. Note that authors must continue to ensure that all text links meet contrast minimums against the page background (SC 1.4.3).",
      "benefitsText": "Benefits\nUsers with partial sight often experience limited color vision.\nSome older users may not be able to see color well.\nUsers who have color-blindness benefit when information conveyed by color is available in other visual ways.\nPeople using limited color monochrome displays may be unable to access color-dependent information.\nUsers who have problems distinguishing between colors can look or listen for text cues.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/use-of-color.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.2 音声の制御",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ上にある音声が自動的に再生され、3 秒より長く続く場合、その音声を一時停止又は停止するメカニズム、もしくはシステム全体の音量レベルに影響を与えずに音量レベルを調整できるメカニズムが利用できる。\n   \n   注記この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n",
      "intentText": "Intent\n\nIndividuals who use screen reading software can find it hard to hear the speech output if there is other audio playing at the same time. This difficulty is exacerbated when the screen reader's speech output is software based (as most are today) and is controlled via the same volume control as the sound. Therefore, it is important that the user be able to turn off the background sound.\n\nHaving control of the volume includes being able to reduce its volume to zero. Muting the system volume is not \"pausing or stopping\" the autoplay audio. Both the \"pause or stop\" and control of audio volume need to be independent of the overall system volume.\n\nNote\n\nPlaying audio automatically when landing on a page may affect a screen reader user's ability to find the mechanism to stop it because they navigate by listening and automatically started sounds might interfere with that navigation. Therefore, we discourage the practice of automatically starting sounds (especially if they last more than 3 seconds), and encourage that the sound be started by an action initiated by the user after they reach the page, rather than requiring that the sound be stopped by an action of the user after they land on the page.\n\nSee also 1.4.7: Low or No Background Audio.",
      "benefitsText": "Benefits\nIndividuals who use screen reading technologies can hear the screen reader without other sounds playing. This is especially important for those who are hard of hearing and for those whose screen readers use the system volume (so they cannot turn sound down and screen reader up).\nThis Success Criterion also benefits people who have difficulty focusing on visual content (including text) when audio is playing.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-control.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.3 コントラスト (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   テキスト及び文字画像の視覚的提示に、少なくとも 4.5:1 のコントラスト比がある。ただし、次の場合は除く:\n   \n   \n      \n      大きな文字\n      \n      サイズの大きなテキスト及びサイズの大きな文字画像に、少なくとも 3:1 のコントラスト比がある。\n         \n      \n      \n       付随的\n      \n      テキスト又は文字画像において、次の場合はコントラストの要件はない。アクティブではないユーザインタフェース コンポーネントの一部である、純粋な装飾である、誰も視覚的に確認できない、又は重要な他の視覚的なコンテンツを含む写真の一部分である。\n         \n      \n      \n      ロゴタイプ\n      \n      ロゴ又はブランド名の一部である文字には、最低限のコントラストの要件はない。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide enough contrast between text and its background, so that it can be read by people with moderately low vision or impaired contrast perception, without the use of contrast-enhancing assistive technology.\n\nFor all consumers of visual content, adequate light-dark contrast is needed between the relative luminance of text and its background for good readability. Many different visual impairments can substantially impact contrast sensitivity, requiring more light-dark contrast, regardless of color (hue). For people who are not able to distinguish certain shades of color (often referred to as color blindness) hue and saturation have minimal or no effect on legibility as assessed by reading performance. Further, the inability to distinguish certain shades of color does not negatively affect light-dark contrast perception. Therefore, in the recommendation, contrast is calculated in such a way that color (hue) is not a key factor.\n\nText that is decorative and conveys no information is excluded. For example, if random words are used to create a background and the words could be rearranged or substituted without changing meaning, then it would be decorative and would not need to meet this criterion.\n\nText that is larger and has wider character strokes is easier to read at lower contrast. The contrast requirement for larger text is therefore lower. This allows authors to use a wider range of color choices for large text, which is helpful for design of pages, particularly titles. 18 point text or 14 point bold text is judged to be large enough to require a lower contrast ratio. (See The American Printing House for the Blind Guidelines for Large Printing and The Library of Congress Guidelines for Large Print under Resources). \"18 point\" and \"bold\" can both have different meanings in different fonts but, except for very thin or unusual fonts, they should be sufficient. Since there are so many different fonts, the general measures are used and a note regarding thin or unusual fonts is included in the definition for large-scale text.\n\nNote\n\nWhen evaluating this Success Criterion, the font size in points should be obtained from the user agent or calculated on font metrics in the way that user agents do. Point sizes are based on the CSS pt size as defined in CSS3 Values. The ratio between sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt and 18pt are equivalent to approximately 18.5px and 24px.\n\nBecause different image editing applications default to different pixel densities (e.g., 72ppi or 96ppi), specifying point sizes for fonts from within an image editing application can be unreliable when it comes to presenting text at a specific size. When creating images of large-scale text, authors should ensure that the text in the resulting image is roughly equivalent to 1.2 and 1.5 em or to 120% or 150% of the default size for body text. For example, for a 72ppi image, an author would need to use approximately 19pt and 24pt font sizes in order to successfully present images of large-scale text to a user.\n\nThe 3:1 and 4.5:1 contrast ratios referenced in this Success Criterion are intended to be treated as threshold values. When comparing the computed contrast ratio to the Success Criterion ratio, the computed values should not be rounded (e.g., 4.499:1 would not meet the 4.5:1 threshold).\n\nNote\n\nBecause authors do not have control over user settings for font smoothing/anti-aliasing, when evaluating this Success Criterion, refer to the foreground and background colors obtained from the user agent, or the underlying markup and stylesheets, rather than the text as presented on screen.\n\nDue to anti-aliasing, particularly thin or unusual fonts may be rendered by user agents with a much fainter color than the actual text color defined in the underlying CSS. This can lead to situations where text has a contrast ratio that nominally passes the Success Criterion, but has a much lower contrast in practice. In these cases, best practice would be for authors to choose a font with stronger/thicker lines, or to aim for a foreground/background color combination that exceeds the normative requirements of this Success Criterion.\n\nThe contrast requirements for text also apply to images of text (text that has been rendered into pixels and then stored in an image format) - see Success Criterion 1.4.5: Images of Text.\n\nThis requirement applies to situations in which images of text were intended to be understood as text. Incidental text, such as in photographs that happen to include a street sign, are not included. Nor is text that for some reason is designed to be invisible to all viewers. Stylized text, such as in corporate logos, should be treated in terms of its function on the page, which may or may not warrant including the content in the text alternative. Corporate visual guidelines beyond logo and logotype are not included in the exception.\n\nIn this provision there is an exception that reads \"that are part of a picture that contains significant other visual content,\". This exception is intended to separate pictures that have text in them from images of text that are done to replace text in order to get a particular look.\n\nNote\n\nImages of text do not scale as well as text because they tend to pixelate. It is also harder to change foreground and background contrast and color combinations for images of text, which is necessary for some users. Therefore, we suggest using text wherever possible, and when not, consider supplying an image of higher resolution.\n\nThis Success Criterion applies to text in the page, including placeholder text and text that is shown when a pointer is hovering over an object or when an object has keyboard focus. If any of these are used in a page, the text needs to provide sufficient contrast.\n\nAlthough this Success Criterion only applies to text, similar issues occur for content presented in charts, graphs, diagrams, and other non-text-based information, which is covered by Success Criterion 1.4.11 Non-Text Contrast.\n\nSee also 1.4.6: Contrast (Enhanced).\n\nRationale for the Ratios Chosen\n\nA contrast ratio of 3:1 is the minimum level recommended by [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] for standard text and vision. The 4.5:1 ratio is used in this Success Criterion to account for the loss in contrast that results from moderately low visual acuity, congenital or acquired color deficiencies, or the loss of contrast sensitivity that typically accompanies aging.\n\nThe rationale is based on a) adoption of the 3:1 contrast ratio for minimum acceptable contrast for normal observers, in the ANSI standard, and b) the empirical finding that in the population, visual acuity of 20/40 is associated with a contrast sensitivity loss of roughly 1.5 [[ARDITI-FAYE]]. A user with 20/40 would thus require a contrast ratio of 3 * 1.5 = 4.5 to 1. Following analogous empirical findings and the same logic, the user with 20/80 visual acuity would require contrast of about 7:1. This ratio is used in Success Criterion 1.4.6.\n\nHues are perceived differently by users with color vision deficiencies (both congenital and acquired) resulting in different colors and relative luminance contrasts than for normally sighted users. Because of this, effective contrast and readability are different for this population. However, color deficiencies are so diverse that prescribing effective general use color pairs (for contrast) based on quantitative data is not feasible. Requiring good luminance contrast accommodates this by requiring contrast that is independent of color perception. Fortunately, most of the luminance contribution is from the mid and long wave receptors which largely overlap in their spectral responses. The result is that effective luminance contrast can generally be computed without regard to specific color deficiency, except for the use of predominantly long wavelength colors against darker colors (generally appearing black) for those who have protanopia. (We provide an advisory technique on avoiding red on black for that reason). For more information see [[ARDITI-KNOBLAUCH-1994]] [[ARDITI-KNOBLAUCH-1996]] [[ARDITI]].\n\nNote\n\nSome people with cognitive disabilities require color combinations or hues that have low contrast, and therefore we allow and encourage authors to provide mechanisms to adjust the foreground and background colors of the content. Some of the combinations that could be chosen may have contrast levels that will be lower than those those specified here. This is not a violation of this Success Criterion, provided there is a mechanism that will return to the required values set out here.\n\nThe contrast ratio of 4.5:1 was chosen for level AA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/40 vision. (20/40 calculates to approximately 4.5:1.) 20/40 is commonly reported as typical visual acuity of elders at roughly age 80. [[GITTINGS-FOZARD]]\n\nThe contrast ratio of 7:1 was chosen for level AAA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/80 vision. People with more than this degree of vision loss usually use assistive technologies to access their content (and the assistive technologies usually have contrast enhancing, as well as magnification capability built into them). The 7:1 level therefore generally provides compensation for the loss in contrast sensitivity experienced by users with low vision who do not use assistive technology and provides contrast enhancement for color deficiency as well.\n\nNote\n\nCalculations in [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] are for body text. A relaxed contrast ratio is provided for text that is much larger.\n\nNotes on formula\n\nConversion from nonlinear to linear RGB values is based on IEC/4WD 61966-2-1 [[IEC-4WD]].\n\nThe formula (L1/L2) for contrast is based on [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] standards.\n\nThe ANSI/HFS 100-1988 standard calls for the contribution from ambient light to be included in the calculation of L1 and L2. The .05 value used is based on Typical Viewing Flare from [[IEC-4WD]].\n\nThis Success Criterion and its definitions use the terms \"contrast ratio\" and \"relative luminance\" rather than \"luminance\" to reflect the fact that Web content does not emit light itself. The contrast ratio gives a measure of the relative luminance that would result when displayed. (Because it is a ratio, it is dimensionless.)\n\nNote\n\nRefer to related resources for a list of tools that utilize the contrast ratio to analyze the contrast of Web content.\n\nSee also 2.4.7: Focus Visible for techniques for indicating keyboard focus.\n\nInactive User Interface Components\n\nUser Interface Components that are not available for user interaction (e.g., a disabled control in HTML) are not required to meet contrast requirements. An inactive user interface component is visible but not currently operable. An example would be a submit button at the bottom of a form that is visible but cannot be activated until all the required fields in the form are completed.\n\nFigure 1 An inactive button using default browser styles",
      "benefitsText": "Benefits\nPeople with low vision often have difficulty reading text that does not contrast with its background. This can be exacerbated if the person has a color vision deficiency that lowers the contrast even further. Providing a minimum luminance contrast ratio between the text and its background can make the text more readable even if the person does not see the full range of colors. It also works for the rare individuals who see no color.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/contrast-minimum.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.4 テキストのサイズ変更",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   キャプション及び文字画像を除き、テキストは、コンテンツ又は機能を損なうことなく、支援技術なしで 200％ までサイズ変更できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that visually rendered text, including text-based controls (text characters that have been displayed so that they can be seen [vs. text characters that are still in data form such as ASCII]) can be scaled successfully so that it can be read directly by people with mild visual disabilities, without requiring the use of assistive technology such as a screen magnifier. Users may benefit from scaling all content on the Web page, but text is most critical.\n\nThe scaling of content is primarily a user agent responsibility. User agents that satisfy UAAG 1.0 Checkpoint 4.1 allow users to configure text scale. The author's responsibility is to create Web content that does not prevent the user agent from scaling the content effectively. Authors may satisfy this Success Criterion by verifying that content does not interfere with user agent support for resizing text, including text-based controls, or by providing direct support for resizing text or changing the layout. An example of direct support might be via server-side script that can be used to assign different style sheets.\n\nIf the author is using a technology whose user agents do not provide zoom support, the author is responsible for providing this type of functionality directly or for providing content that works with the type of functionality available in the user agent. If the user agent doesn't provide zoom functionality but does let the user change the text size, the author is responsible for ensuring that the content remains usable when the text is resized.\n\nSome user interface components that function as a label and require activation by the user to access content are not wide enough to accommodate the label's content. For example, in Web mail applications the subject column may not be wide enough to accommodate every possible subject header, but activating the subject header takes the user to the full message with the full subject header. In Web-based spreadsheets, cell content that is too long to be displayed in a column can be truncated, and the full content of the cell is available to the user when the cell receives focus. The content of a user interface component may also become too wide in user interfaces where the user can resize the column width. In this type of user interface component, line wrapping is not required; truncation is acceptable if the component's full content is available on focus or after user activation and an indication that this information can be accessed, is provided to the user in some way besides the fact that it is truncated.\n\nContent satisfies the Success Criterion if it can be scaled up to 200%, that is, up to twice the width and height. Authors may support scaling beyond that limit, however, as scaling becomes more extreme, adaptive layouts may introduce usability problems. For example, words may be too wide to fit into the horizontal space available to them, causing them to be truncated; layout constraints may cause text to overlap with other content when it is scaled larger; or only one word of a sentence may fit on each line, causing the sentence to be displayed as a vertical column of text that is difficult to read.\n\nThe working group feels that 200% is a reasonable accommodation that can support a wide range of designs and layouts, and complements older screen magnifiers that provide a minimum magnification of 200%. Above 200%, zoom (which resizes text, images, and layout regions and creates a larger canvas that may require both horizontal and vertical scrolling) may be more effective than text resizing. Assistive technology dedicated to zoom support would usually be used in such a situation and may provide better accessibility than attempts by the author to support the user directly.\n\nNote\n\nImages of text do not scale as well as text because they tend to pixelate, and therefore we suggest using text wherever possible. It is also harder to change foreground and background contrast and color combinations for images of text, which are necessary for some users.\n\nSee also 1.4.3: Visual Presentation.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with low vision by letting them increase text size in content so that they can read it.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/resize-text.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.5 文字画像",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   使用している技術で意図した視覚的提示が可能である場合、文字画像ではなくテキストが情報伝達に用いられている。ただし、次に挙げる場合を除く:\n   \n   \n      \n      カスタマイズ可能\n      \n      文字画像は、利用者の要求に応じた視覚的なカスタマイズができる。\n         \n      \n      \n      必要不可欠\n      \n      テキストの特定の提示が、伝えようとする情報にとって必要不可欠である。\n         \n      \n      \n   \n   \n   注記ロゴタイプ (ロゴ又はブランド名の一部である文字) は必要不可欠なものであると考えられる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to encourage authors, who are using technologies which are capable of achieving their desired default visual presentation, to enable people who require a particular visual presentation of text to be able to adjust the text presentation as needed. This includes people who require the text in a particular font size, foreground and background color, font family, line spacing or alignment.\n\nIf an author can use text to achieve the same visual effect, he or she should present the information as text rather than using an image. If for any reason, the author cannot format the text to get the same effect, the effect won't be reliably presented on the commonly available user agents, or using a technology to meet this criterion would interfere with meeting other criteria such as 1.4.4, then an image of text can be used. This includes instances where a particular presentation of text is essential to the information being conveyed, such as type samples, logotypes, branding, etc. Images of text may also be used in order to use a particular font that is either not widely deployed or which the author doesn't have the right to redistribute, or to ensure that the text would be anti-aliased on all user agents.\n\nImages of text can also be used where it is possible for users to customize the image of text to match their requirements.\n\nThe definition of image of text contains the note: Note: This does not include text that is part of a picture that contains significant other visual content. Examples of such pictures include graphs, screenshots, and diagrams which visually convey important information through more than just text.\n\nTechniques for satisfying this Success Criterion are the same as those for Success Criterion 1.4.9, except that they only need to apply if the visual presentation can be achieved with the technologies that the author is using. For Success Criterion 1.4.9, the sufficient techniques would be applied only when the user can customize the output.\n\nSee also 1.4.9: Images of Text (No Exception).",
      "benefitsText": "Benefits\nPeople with low vision (who may have trouble reading the text with the authored font family, size and/or color).\nPeople with visual tracking problems (who may have trouble reading the text with the authored line spacing and/or alignment).\nPeople with cognitive disabilities that affect reading.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.6 コントラスト (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   テキスト及び文字画像の視覚的提示に、少なくとも 7:1 のコントラスト比がある。ただし、次の場合は除く:\n   \n   \n      \n      大きな文字\n      \n      サイズの大きなテキスト及びサイズの大きな文字画像に、少なくとも 4.5:1 のコントラスト比がある。\n         \n      \n      \n       付随的\n      \n      テキスト又は文字画像において、次の場合はコントラストの要件はない。アクティブではないユーザインタフェース コンポーネントの一部である、純粋な装飾である、誰も視覚的に確認できない、又は重要な他の視覚的なコンテンツを含む写真の一部分である。\n         \n      \n      \n      ロゴタイプ\n      \n      ロゴ又はブランド名の一部である文字には、最低限のコントラストの要件はない。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide enough contrast between text and its background so that it can be read by people with moderately low vision (who do not use contrast-enhancing assistive technology). For people without color deficiencies, hue and saturation have minimal or no effect on legibility as assessed by reading performance (Knoblauch et al., 1991). Color deficiencies can affect luminance contrast somewhat. Therefore, in the recommendation, the contrast is calculated in such a way that color is not a key factor so that people who have a color vision deficit will also have adequate contrast between the text and the background.\n\nText that is decorative and conveys no information is excluded. For example, if random words are used to create a background and the words could be rearranged or substituted without changing meaning, then it would be decorative and would not need to meet this criterion.\n\nText that is larger and has wider character strokes is easier to read at lower contrast. The contrast requirement for larger text is therefore lower. This allows authors to use a wider range of color choices for large text, which is helpful for design of pages, particularly titles. 18 point text or 14 point bold text is judged to be large enough to require a lower contrast ratio. (See The American Printing House for the Blind Guidelines for Large Printing and The Library of Congress Guidelines for Large Print under Resources). \"18 point\" and \"bold\" can both have different meanings in different fonts but, except for very thin or unusual fonts, they should be sufficient. Since there are so many different fonts, the general measures are used and a note regarding thin or unusual fonts is included in the definition for large-scale text.\n\nNote\n\nWhen evaluating this Success Criterion, the font size in points should be obtained from the user agent or calculated on font metrics in the way that user agents do. Point sizes are based on the CSS pt size as defined in CSS3 Values. The ratio between sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt and 18pt are equivalent to approximately 18.5px and 24px.\n\nBecause different image editing applications default to different pixel densities (e.g., 72ppi or 96ppi), specifying point sizes for fonts from within an image editing application can be unreliable when it comes to presenting text at a specific size. When creating images of large-scale text, authors should ensure that the text in the resulting image is roughly equivalent to 1.2 and 1.5 em or to 120% or 150% of the default size for body text. For example, for a 72ppi image, an author would need to use approximately 19pt and 24pt font sizes in order to successfully present images of large-scale text to a user.\n\nThe 7:1 and 4.5:1 contrast ratios referenced in this Success Criterion are intended to be treated as threshold values. When comparing the computed contrast ratio to the Success Criterion ratio, the computed values should not be rounded (e.g., 4.499:1 would not meet the 4.5:1 threshold).\n\nNote\n\nBecause authors do not have control over user settings for font smoothing/anti-aliasing, when evaluating this Success Criterion, refer to the foreground and background colors obtained from the user agent, or the underlying markup and stylesheets, rather than the text as presented on screen.\n\nDue to anti-aliasing, particularly thin or unusual fonts may be rendered by user agents with a much fainter color than the actual text color defined in the underlying CSS. This can lead to situations where text has a contrast ratio that nominally passes the Success Criterion, but has a much lower contrast in practice. In these cases, best practice would be for authors to choose a font with stronger/thicker lines, or to aim for a foreground/background color combination that exceeds the normative requirements of this Success Criterion.\n\nThe contrast requirements for text also apply to images of text (text that has been rendered into pixels and then stored in an image format) - see Success Criterion 1.4.5: Images of Text.\n\nThis requirement applies to situations in which images of text were intended to be understood as text. Incidental text, such as in photographs that happen to include a street sign, are not included. Nor is text that for some reason is designed to be invisible to all viewers. Stylized text, such as in corporate logos, should be treated in terms of its function on the page, which may or may not warrant including the content in the text alternative. Corporate visual guidelines beyond logo and logotype are not included in the exception.\n\nIn this provision there is an exception that reads \"that are part of a picture that contains significant other visual content,\". This exception is intended to separate pictures that have text in them from images of text that are done to replace text in order to get a particular look.\n\nNote\n\nImages of text do not scale as well as text because they tend to pixelate. It is also harder to change foreground and background contrast and color combinations for images of text, which is necessary for some users. See 1.4.5: Images of Text.\n\nThis Success Criterion applies to text in the page, including placeholder text and text that is shown when a pointer is hovering over an object or when an object has keyboard focus. If any of these are used in a page, the text needs to provide sufficient contrast.\n\nAlthough this Success Criterion only applies to text, similar issues occur for content presented in charts, graphs, diagrams, and other non-text-based information, which is covered by Success Criterion 1.4.11 Non-Text Contrast.\n\nRationale for the Ratios Chosen\n\nA contrast ratio of 3:1 is the minimum level recommended by [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] for standard text and vision. The 4.5:1 ratio is used in Success Criterion 1.4.3 to account for the loss in contrast that results from moderately low visual acuity, congenital or acquired color deficiencies, or the loss of contrast sensitivity that typically accompanies aging.\n\nThe rationale is based on a) adoption of the 3:1 contrast ratio for minimum acceptable contrast for normal observers, in the ANSI standard, and b) the empirical finding that in the population, visual acuity of 20/40 is associated with a contrast sensitivity loss of roughly 1.5 [[ARDITI-FAYE]]. A user with 20/40 would thus require a contrast ratio of 3 * 1.5 = 4.5 to 1. Following analogous empirical findings and the same logic, the user with 20/80 visual acuity would require contrast of about 7:1. This ratio is used in this Success Criterion.\n\nHues are perceived differently by users with color vision deficiencies (both congenital and acquired) resulting in different colors and relative luminance contrasts than for normally sighted users. Because of this, effective contrast and readability are different for this population. However, color deficiencies are so diverse that prescribing effective general use color pairs (for contrast) based on quantitative data is not feasible. Requiring good luminance contrast accommodates this by requiring contrast that is independent of color perception. Fortunately, most of the luminance contribution is from the mid and long wave receptors which largely overlap in their spectral responses. The result is that effective luminance contrast can generally be computed without regard to specific color deficiency, except for the use of predominantly long wavelength colors against darker colors (generally appearing black) for those who have protanopia. (We provide an advisory technique on avoiding red on black for that reason). For more information see [[ARDITI-KNOBLAUCH-1994]] [[ARDITI-KNOBLAUCH-1996]] [[ARDITI]].\n\nNote\n\nSome people with cognitive disabilities require color combinations or hues that have low contrast, and therefore we allow and encourage authors to provide mechanisms to adjust the foreground and background colors of the content. Some of the combinations that could be chosen may have contrast levels that will be lower than those specified here. This is not a violation of this Success Criterion, provided there is a mechanism that will return to the required values set out here.\n\nThe contrast ratio of 4.5:1 was chosen for level AA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/40 vision. (20/40 calculates to approximately 4.5:1.) 20/40 is commonly reported as typical visual acuity of elders at roughly age 80. [[GITTINGS-FOZARD]]\n\nThe contrast ratio of 7:1 was chosen for level AAA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/80 vision. People with more than this degree of vision loss usually use assistive technologies to access their content (and the assistive technologies usually have contrast enhancing, as well as magnification capability built into them). The 7:1 level therefore generally provides compensation for the loss in contrast sensitivity experienced by users with low vision who do not use assistive technology and provides contrast enhancement for color deficiency as well.\n\nNote\n\nCalculations in [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] are for body text. A relaxed contrast ratio is provided for text that is much larger.\n\nNotes on formula\n\nConversion from nonlinear to linear RGB values is based on IEC/4WD 61966-2-1 [[IEC-4WD]].\n\nThe formula (L1/L2) for contrast is based on [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] standards.\n\nThe ANSI/HFS 100-1988 standard calls for the contribution from ambient light to be included in the calculation of L1 and L2. The .05 value used is based on Typical Viewing Flare from [[IEC-4WD]].\n\nThis Success Criterion and its definitions use the terms \"contrast ratio\" and \"relative luminance\" rather than \"luminance\" to reflect the fact that Web content does not emit light itself. The contrast ratio gives a measure of the relative luminance that would result when displayed. (Because it is a ratio, it is dimensionless.)\n\nNote\n\nRefer to related resources for a list of tools that utilize the contrast ratio to analyze the contrast of Web content.\n\nSee also 2.4.7: Focus Visible for techniques for indicating keyboard focus.\n\nInactive User Interface Components\n\nUser Interface Components that are not available for user interaction (e.g., a disabled control in HTML) are not required to meet contrast requirements. An inactive user interface component is visible but not currently operable. An example would be a submit button at the bottom of a form that is visible but cannot be activated until all the required fields in the form are completed.\n\nFigure 1 An inactive button using default browser styles",
      "benefitsText": "Benefits\nPeople with low vision often have difficulty reading text that does not contrast with its background. This can be exacerbated if the person has a color vision deficiency that lowers the contrast even further. Providing a minimum luminance contrast ratio between the text and its background can make the text more readable even if the person does not see the full range of colors. It also works for the rare individuals who see no color.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/contrast-enhanced.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.8 視覚的提示",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   テキストブロックの視覚的提示において、次を実現するメカニズムが利用できる:\n   \n     利用者が、前景色と背景色を選択できる。   \n     幅が 80 字を越えない (全角文字の場合は、40 字)。   \n     テキストが、均等割り付けされていない (両端揃えではない)。   \n     段落中の行送りは、少なくとも 1.5 文字分ある。そして、段落の間隔は、その行送りの少なくとも 1.5 倍以上ある。   \n     テキストは、支援技術なしで 200％までサイズ変更でき、利用者が全画面表示にしたウィンドウで 1 行のテキストを読むときに横スクロールする必要がない。   \n  \n\n注記 1コンテンツがこれらの値を用いる必要はない。要求事項は、利用者がこれらの提示の外観を変更するメカニズムを利用できることである。このメカニズムは、ブラウザ又は他のユーザエージェントによって提供されることがある。コンテンツがこのメカニズムを提供する必要はない。\n\n注記 2言語の中には、書記体系において、可読性及び視認性を向上させるために用いる提示の概念が異なるものもある。ある書記体系でこの達成基準における提示の概念が用いられていない場合、その書記体系のコンテンツは、その提示の設定を用いる必要はなく、その提示の設定なしでも適合できる。コンテンツ制作者は、可読性及び視認性を向上させるために、言語の書記体系のガイドラインに従うことが推奨される。\n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that visually rendered text is presented in such a manner that it can be perceived without its layout interfering with its readability. People with some cognitive, language and learning disabilities and some low vision users cannot perceive the text and/or lose their reading place if the text is presented in a manner that is difficult for them to read.\n\nPeople with some visual or cognitive disabilities need to be able to select the color of text and the color of the background. They sometimes choose combinations that seem unintuitive to someone without that disability. Sometimes these combinations have very low contrast. Sometimes only very specific color combinations work for them. Control of color or other aspects of text presentation makes a huge difference to their comprehension.\n\nFor people with some reading or vision disabilities, long lines of text can become a significant barrier. They have trouble keeping their place and following the flow of text. Having a narrow block of text makes it easier for them to continue on to the next line in a block. Lines should not exceed 80 characters or glyphs (40 if CJK), where glyphs are the element of writing in the writing system for the text. Studies have shown that Chinese, Japanese and Korean (CJK) characters are approximately twice as wide as non-CJK characters when both types of characters are displayed with characteristics that achieve the same readability, so the maximum line width for CJK characters is half that of non-CJK characters.\n\nPeople with some cognitive disabilities find it difficult to track text where the lines are close together. Providing extra space between lines and paragraphs allows them to better track the next line and to recognize when they have reached the end of a paragraph. It is best if there are several different options, for instance, space-and-a-half and double spacing for line spacing. By space and a half within paragraphs we mean that top of one line is 150% further from the top of the line below it than would be true when the text is 'single spaced' (the default spacing for the font). By Paragraph spacing that is 1.5 times larger than the line spacing we mean that the spacing from the top of the last line of 1 paragraph is 250% farther from the Top of the first line of the next paragraph (i.e., that there is a blank line between the two paragraphs that is 150% of the single space blank line).\n\nPeople with certain cognitive disabilities have problems reading text that is both left and right justified. The uneven spacing between words in fully justified text can cause \"rivers of white\" space to run down the page making reading difficult and in some cases impossible. Text justification can also cause words to be spaced closely together, so that it is difficult for them to locate word boundaries.\n\nThe resizing provision ensures that visually rendered text (text characters that have been displayed so that they can be seen [vs. text characters that are still in data form such as ASCII]) can be scaled successfully without requiring that the user scroll left and right to see all of the content. When the content has been authored so that this is possible, the content is said to reflow. This permits people with low vision and people with cognitive disabilities to increase the size of the text without becoming disoriented.\n\nThe scaling of content is primarily a user agent responsibility. User agents that satisfy UAAG 1.0 Checkpoint 4.1 allow users to configure text scale. The author's responsibility is to create Web content that does not prevent the user agent from scaling the content and that allows the reflow of the content within the current width of the viewport. See 1.4.4: Resize Text for additional discussion of resizing text.\n\nThe horizontal scrolling requirement is not intended to apply to small-screen devices where long words may be displayed on a single line and require users to scroll horizontally. For the purposes of this requirement, authors should ensure that content meets this requirement on standard desktop/laptop displays with the browser window maximized. Since people generally keep their computers for several years, it is best not to rely on the latest desktop/laptop display resolutions but to consider the common desktop/laptop display resolutions over the course of several years when making this evaluation.\n\nWrapping should always be possible as long as words are not so long that a single word is more than half the width of a full screen. Very long URIs may run off the side of an enlarged screen, but they would not be considered text for \"reading\" and, therefore, would not violate this provision.\n\nThis provision does not mean that a user would never need to use horizontal scrolling. It only means that they would not need to use horizontal scrolling back and forth to read a line of text. For example, if a page consisted of two equal sized columns of text, it would automatically meet this provision. Enlarging the page would mean that the first column was completely on screen and the user could just scroll vertically down the page to read it. To read the second column, they would horizontally scroll to the right, where the right hand column would then fit entirely within the width of the screen, and read that column without further horizontal scrolling.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps low vision users by letting them see text without distracting presentational features. It lets them configure text in ways that will be easier for them to see by letting them control the color and size of blocks of text.\n\nThis Success Criterion helps people with cognitive, language and learning disabilities perceive text and track their location within blocks of text.\n\nPeople with some cognitive disabilities can read text better when they select their own foreground and background color combinations.\nPeople with some cognitive disabilities can track their locations more easily when blocks of text are narrow and when they can configure the amount of space between lines and paragraphs.\nPeople with some cognitive disabilities can read text more easily when the spacing between words is regular.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/visual-presentation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.9 文字画像 (例外なし)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   文字画像は、純粋な装飾に用いられているか、テキストの特定の提示が伝えようとする情報にとって必要不可欠である場合に用いられている。\n   \n   注記ロゴタイプ (ロゴ又はブランド名の一部である文字) は必要不可欠なものであると考えられる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to enable people who require a particular visual presentation of text to be able to adjust the text presentation as required. This includes people who require the text in a particular font size, foreground and background color, font family, line spacing or alignment.\n\nThis means implementing the text in a manner that allows its presentation to be changed or providing a mechanism by which users can select an alternate presentation. Using images of text is an example of an implementation that does not allow users to alter the presentation of the text within it.\n\nIn some situations, a particular visual presentation of the text is essential to the information being conveyed. This means that information would be lost without that particular visual presentation. In this case implementing the text in a manner that allows its presentation to be changed is not required. This includes text that demonstrates a particular visual aspect of the text, such as a particular font family, or text that conveys an identity, such as text within a company logo.\n\nText that is decorative does not require implementing the text in a manner that allows its presentation to be changed.\n\nThe definition of image of text contains the note: Note: This does not include text that is part of a picture that contains significant other visual content. Examples of such pictures include graphs, screenshots, and diagrams which visually convey important information through more than just text.",
      "benefitsText": "Benefits\nPeople with low vision (who may have trouble reading the text with the authored font family, size and/or color).\nPeople with visual tracking problems (who may have trouble reading the text with the authored line spacing and/or alignment).\nPeople with cognitive disabilities that affect reading.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/images-of-text-no-exception.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.10 リフロー",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   コンテンツは、情報又は機能を損なうことなく、かつ、以下において 2 次元スクロールを必要とせずに提示できる:\n   \n       320 CSS ピクセルに相当する幅の縦スクロールのコンテンツ。\n       256 CSS ピクセルに相当する高さの横スクロールのコンテンツ。\n   \n   利用や意味の理解に 2 次元のレイアウトを必要とする一部のコンテンツを除く。\n  \n   注記 1320 CSS ピクセルは、400% ズーム時の開始ビューポート幅 1280 CSS ピクセルに相当する。横スクロールになるように設計されたウェブコンテンツ (例えば、縦書きのテキスト) の場合、256 CSS ピクセルは、400% ズーム時の開始ビューポート高さ 1024 CSS ピクセルに相当する。\n   \n   注記 22 次元のレイアウトを必要とするコンテンツの例としては、理解のために必要な画像 (地図、図解など)、映像、ゲーム、プレゼンテーション、データテーブル (個々のセルではない)、及びコンテンツを操作している間にツールバーを表示しておく必要のあるインタフェースが挙げられる。コンテンツのそのような部分には、2 次元スクロールを提供することが許容される。\n   \t\t\t\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to support people with low vision who need to enlarge text and read it in a single column. When the browser zoom is used to scale content to 400%, it reflows - i.e., it is presented in one column so that scrolling in more than one direction is not necessary.\n\nFor people with low vision, both enlarging and reflowing text are critical to reading. Enlarging text enables the perception of characters. Reflowing text enables users to track from the end of one line to the beginning of the next line.\n\nAvoiding the need to scroll in the direction of reading in order to reveal lines that are cut off by the viewport is important, because such scrolling significantly increases the effort required to read. It is also important that content is not hidden off-screen. For example, zooming into a vertically scrolling page should not cause content to be hidden to one side.\n\nHow reflow works\n\nUser agents for technologies such as HTML/CSS, PDF, and ePub have methods for reflowing content to fit the width of the window (viewport). When appropriately authored, page content can reflow (wrap) to stay within the window's boundaries (viewport) when users zoom in to enlarge the size of content. Spatial relationships of content may change when users zoom, but all information and functionality should continue to be available.\n\nSupporting the reflow of content is also known as 'Responsive Web Design'. It is enabled by CSS media queries which reformat the web content for different viewport widths (at particular break points) in order to provide optimised layouts for mobile devices such as tablets or smartphones. Importantly, these breakpoints are not only triggered by narrower viewports, but also when users employ the browser zoom function to zoom into the page.\n\nIn a desktop browser at 100% (default) scale, typical web pages that support reflow display content in two, three or more columns. Zooming in will at some point trigger a change of layout, so content will now be displayed in fewer columns. At a higher magnification scale of 200% or more, content will usually be rendered in a single column. Parts of content that were in the marginal columns, like a navigation menu or supplementary content, will now typically appear on top of or below the main content.\n\nViewing distance and display resolution\n\nThe value of 320 CSS pixels was chosen as a reasonable minimum size that authors can achieve. This value lines up with the reported viewport width of small displays of common mobile devices. The width of 320 CSS pixels exactly corresponds to a desktop browser window set to a width of 1280px and zoomed in to 400%. It should be noted that 400% applies to the dimension, not the area. It means four times the default width and four times the default height.\n\nFigure 1 A letter of the same CSS pixel size on different displays with different resolutions\n\nWhen we read, the size of the print is not as important as the image it projects on the retina of our eye. Phones are designed for close viewing while desktops are designed for viewing farther away. As a consequence 16px print on a phone is physically smaller than 16px print on a desktop. This is not a problem because both print sizes cast the same image on our retina if they are viewed at their intended distance.\n\nVisibility and availability of content\n\nHow much of the content is visible may change at different scales. For example, navigation menus that are fully visible in the desktop layout are often collapsed into fewer items, or even into a single menu button (the 'hamburger' icon pattern) so they take up less screen space.\n\nThe Success Criterion is met as long as all content and functionality are still fully available - either directly, or revealed via accessible controls, or accessible via direct links.\n\nContent exceptions for reflow\n\nContent which requires two-dimensional layout for usage or meaning cannot reflow without loss of meaning, and is therefore excepted from the need to be presented without two-dimensional scrolling. For example, graphics and video are by their nature two-dimensional. Cutting up an image and stacking the blocks would render the content unusable. However, it is possible to have these elements stay within the bounds of viewport even as other content zooms to 400% (see advisory techniques).\n\nData tables have a two-dimensional relationship between the headings and data cells. This relationship is essential to convey the content. This Success Criterion therefore exempts data tables from needing to display without scrolling in the direction of text (e.g., horizontally in a vertically scrolling page). However, cells within data tables are not excepted unless the cell contains types of content that also requires two-dimensional layout for usage or meaning.\n\nInterfaces which provide toolbars to edit content need to show both the content and the toolbar in the viewport. Depending on the number of toolbar buttons, the toolbar may need to scroll in the direction of text.\n\nResponsive web design and other ways to meet this Success Criterion\n\nUsing the responsive web design approach is the most effective method of achieving the goal of allowing people to zoom in to 400%. Each variation (CSS break point) of the page at the same URL should conform (compare Conformance for WCAG 2.1).\n\nFor organisations which are using legacy systems or are not able to update their layout methods for some reason, an alternative conforming version could be a mobile site which has a fixed 320px wide layout. The user should be able to find that version from the default website.\n\nAvoiding scrolling in horizontally and vertically written languages\n\nThe success Criterion applies to both horizontally and vertically written languages. Zooming the page for horizontally written languages where pages scroll vertically by default (e.g. English) should not require horizontal scrolling. Zooming the page for vertically written languages which scroll horizontally by default should not require vertical scrolling.\n\nThe relation of Reflow to the Success Criterion 1.4.4 Resize Text\n\nThe focus of the Reflow Success Criterion is to enable users to zoom in without having to scroll in two directions. Success Criterion 1.4.4 Resize Text also applies, so it should be possible to increase the size of all text to at least 200% while simultaneously meeting the reflow requirement. For most implementations, the text is expected to continue to enlarge as the magnification increases, so that users can magnify text up to (and beyond) 400%. In an implementation where text does not consistently increase its size as people zoom in (such as when it is transformed based on a media query to adapt to small-screen usage), it must still be possible to get to 200% enlargement in order to satisfy the Resize Text criterion.\n\nFor example, if at the default browser setting of 100% zoom, text is set at 20px when the window is 1280px wide, the same 20px at 200% zoom would mean a text size of 200%. At 400% zoom, the author may decide to set the text size to 10px: the text would now still be enlarged to 200% compared to the default browser setting of 100% zoom. It is not required to achieve 200% text enlargement at every breakpoint, but it should be possible to get 200% text enlargement in some way.\n\nBrowsers on mobile operating systems\n\nMost browsers on mobile operating systems do not combine reflow and zoom in the same way as on desktop browsers. These mobile browsers normally support reflow when changing the orientation of the device -- content will be adjusted to the new viewport width. However, these mobile browsers can only magnify content to achieve 1.4.4. Resize Text in manners which do not constrain reflow to a single dimension, for example by using a pinch gesture to scale up content or a double tap on a particular column to make it fill the viewport width. This means that zoomed content in most mobile browsers involves two-dimensional scrolling regardless of what an author does.\n\nMobile user agents can offer reflow when users zoom into content, as evidenced by the Dolphin browser for Android. The lack of magnified reflow support in browsers on mobile operating systems can therefore be regarded as a user agent support issue.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with low vision who require text enlargement by enabling them to read the content seamlessly, eliminating the necessity to scroll in multiple directions.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/reflow.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.11 非テキストのコントラスト",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   以下の視覚的提示には、隣接した色との間で少なくとも 3:1 のコントラスト比がある。\n   \t\t\t\t\t\n   \n      \t\t\t\t\t\t\n      ユーザインタフェース コンポーネント \n      \t\t\t\t\t\t\n     ユーザインタフェース コンポーネント及び状態 (state) を特定するのに必要な視覚的な情報。ただし、アクティブではないユーザインタフェース コンポーネントや、そのコンポーネントの見た目がユーザエージェントによって提示されていてコンテンツ制作者が変更していない場合は除く。\n      \t\t\t\t\t\t\n      グラフィカルオブジェクト \n      \t\t\t\t\t\t\n      コンテンツを理解するのに必要なグラフィック部分。ただし、そのグラフィック特有の提示が、情報を伝えるうえで必要不可欠な場合は除く。\n      \t\t\t\t\t\t\n   \n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that user interface components (i.e., controls) and meaningful graphics are distinguishable by people with moderately low vision. The requirements and rationale are similar to those for large text in 1.4.3 Contrast (Minimum). Note that this requirement does not apply to inactive user interface components.\n\nLow contrast controls are more difficult to perceive, and may be completely missed by people with a visual impairment. Similarly, if a graphic is needed to understand the content or functionality of the webpage then it should be perceivable by people with low vision or other impairments without the need for contrast-enhancing assistive technology.\n\nNote\n\nThe 3:1 contrast ratios referenced in this Success Criterion is intended to be treated as threshold values. When comparing the computed contrast ratio to the Success Criterion ratio, the computed values should not be rounded (e.g. 2.999:1 would not meet the 3:1 threshold).\n\nNote\n\nBecause authors do not have control over user settings for font smoothing and anti-aliasing, when evaluating this Success Criterion, refer to the colors obtained from the user agent, or the underlying markup and stylesheets, rather than the non-text elements as presented on screen.\n\nDue to anti-aliasing, particularly thin lines and shapes of non-text elements may be rendered by user agents with a much fainter color than the actual color defined in the underlying CSS. This can lead to situations where non-text elements have a contrast ratio that nominally passes the Success Criterion, but have a much lower contrast in practice. In these cases, best practice would be for authors to avoid particularly thin lines and shapes, or to use a combination of colors that exceeds the normative requirements of this Success Criterion.\n\nUser Interface Components\n\nUnless the control is inactive, any visual information provided that is necessary for a user to identify that a control is present and how to operate it must have a minimum 3:1 contrast ratio with the adjacent colors. Also, any visual information necessary to indicate state, such as whether a component is selected or focused must also ensure that the information used to identify the control in that state has a minimum 3:1 contrast ratio.\n\nThis Success Criterion does not require that changes in color that differentiate between states of an individual component meet the 3:1 contrast ratio when they do not appear next to each other. For example, there is not a new requirement that visited links contrast with the default color, or that mouse hover indicators contrast with the default state. However, the component must not lose contrast with the adjacent colors, and non-text indicators such as the check in a checkbox, or an arrow graphic indicating a menu is selected or open must have sufficient contrast to the adjacent colors.\n\nBoundaries\n\nThis success criterion does not require that controls have a visual boundary indicating the hit area, but if the visual indicator of the control is the only way to identify the control, then that indicator must have sufficient contrast. If text (or an icon) within a button or placeholder text inside a text input is visible and there is no visual indication of the hit area then the Success Criterion is passed. If a button with text also has a colored border, since the border does not provide the only indication there is no contrast requirement beyond the text contrast (1.4.3 Contrast (Minimum)). Note that for people with cognitive disabilities it is recommended to delineate the boundary of controls to aid in the recognition of controls and therefore the completion of activities.\n\nFigure 1 A button without a visual boundary, and the same button with a focus indicator that is a defined visual boundary of grey (#949494) adjacent to white.\nAdjacent colors\n\nFor user interface components 'adjacent colors' means the colors adjacent to the component. For example, if an input has a white internal background, dark border, and white external background the 'adjacent color' to the component would be the white external background.\n\nFigure 2 A standard text input with a grey border (#767676) and white adjacent color outside the component\n\nIf components use several colors, any color which does not interfere with identifying the component can be ignored for the purpose of measuring contrast ratio. For example, a 3D drop-shadow on an input, or a dark border line between contrasting backgrounds is considered to be subsumed into the color closest in brightness (perceived luminance).\n\nThe following example shows an input that has a light background on the inside and a dark background around it. The input also has a dark grey border which is considered to be subsumed into the dark background. The border does not interfere with identifying the component, so the contrast ratio is taken between the white background and dark blue background.\n\nFigure 3 The contrast of the input background (white) and color adjacent to the control (dark blue #003366) is sufficient. There is also a border (silver) on the component that is not required to contrast with either.\n\nFor visual information required to identify a state, such as the check in a checkbox or the thumb of a slider, that part might be within the component so the adjacent color might be another part of the component.\n\nFigure 4 A customized checkbox with light grey check (#E5E5E5), which has a contrast ratio of 5.6:1 with the purple box (#6221EA).\n\nIt is possible to use a flat design where the status indicator fills the component and does not contrast with the component, but does contrast with the colors adjacent to the component.\n\nFigure 5 The first radio button shows the default state with a grey (#949494) circle. The second and third show the radio button selected and filled with a color that contrasts with the color adjacent to the component. The last example shows the state indicator contrasting with the component colors.\nRelationship with Use of Color\n\nThe Use of Color success criterion addresses changing only the color (hue) of an object or text without otherwise altering the object's form. The principle is that contrast ratio (the difference in brightness) can be used to distinguish text or graphics. For example, G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on hover for links or controls where color alone is used to identify them is a technique to use a contrast ratio of 3:1 with surrounding text to distinguish links and controls. In that case the Working Group regards a link color that meets the 3:1 contrast ratio relative to the non-linked text color as satisfying the Success Criterion 1.4.1 Use of color since it is relying on contrast ratio as well as color (hue) to convey that the text is a link.\n\nNon-text information within controls that uses a change of hue alone to convey the value or state of an input, such as a 1-5 star indicator with a black outline for each star filled with either yellow (full) or white (empty) is likely to fail the Use of color criterion rather than this one.\n\nFigure 6 Two examples which pass this success criterion, using either a solid fill to indicate a checked-state that has contrast, or a thicker border as well as yellow fill.\nFigure 7 Two examples which fail a success criterion, the first fails the Use of color criterion due to relying on yellow and white hues. The second example fails the Non-text contrast criterion due to the yellow (#FFF000) to white contrast ratio of 1.2:1.\n\nUsing a change of contrast for focus and other states is a technique to differentiate the states. This is the basis for G195: Using an author-supplied, visible focus indicator, and more techniques are being added.\n\nRelationship with Focus Visible\n\nIn combination with 2.4.7 Focus Visible, the visual focus indicator for a component must have sufficient contrast against the adjacent background when the component is focused, except where the appearance of the component is determined by the user agent and not modified by the author.\n\nMost focus indicators appear outside the component - in that case it needs to contrast with the background that the component is on. Other cases include focus indicators which are:\n\nonly inside the component and need to contrast with the adjacent color(s) within the component.\nthe border of the component (inside the component and adjacent to the outside) and need to contrast with both adjacent colours.\npartly inside and partly outside, where either part of the focus indicator can contrast with the adjacent colors.\nFigure 8 The internal yellow indicator (#FFFF00) contrasts with the blue button background (#4189B9), passing the criterion.\nFigure 9 The external yellow indicator (#FFFF00) does not contrast with the white background (#FFF) which the component is on, failing the criterion.\nFigure 10 The external green indicator (#008000) does contrast with the white background (#FFF) which the component is on, passing the criterion. It does not need to contrast with both the component background and the component, as visually the effect is that the button is noticeably larger, and it's not necessary for a user to be able to discern this extra border in isolation. Although this passes non-text contrast, it is not a good indicator unless it is very thick. New in WCAG 22: There is a AAA criterion in WCAG 2.2 that addresses this aspect, Focus Appearance.\n\nAlthough the figure above with a dark outline passes non-text contrast, it is not a good indicator unless it is very thick. New in WCAG 22: There is a criterion in WCAG 2.2 that addresses this aspect, Focus Appearance.\n\nIf an indicator is partly inside and partly outside the component, either part of the indicator could provide contrast.\n\nFigure 11 The focus indicator is partially inside, partially outside the button. The internal part of the yellow indicator (#FFFF00) contrasts with the blue button background (#4189B9), passing the criterion.\n\nIf the focus indicator changes the border of the component within the visible boundary it must contrast with the component. Typically an outline goes around (outside) the visible boundary of the component, in this case changing the border is just inside the visible edge of the component.\n\nFigure 12 The border of the control changes from blue (#4189B9) to green (#4B933A). This is within the component and does not contrast with the inside background of the component therefore fails non-text contrast.\nFigure 13 An inner border of dark green (#008000) does contrast with the black border, but does not contrast with the blue component background, therefore fails non-text contrast.\nFigure 14 An inner border of white contrasts with the black border and the blue component background, therefore passes non-text contrast.\n\nNote that this Success Criterion does not directly compare the focused and unfocused states of a control - if the focus state relies on a change of color (e.g., changing only the background color of a button), this Success Criterion does not define any requirement for the difference in contrast between the two states.\n\nFigure 15 The change of background within the component is not in scope of non-text contrast. However, this would not pass Use of color.\nUser Interface Component Examples\n\nFor designing focus indicators, selection indicators and user interface components that need to be perceived clearly, the following are examples that have sufficient contrast.\n\nUser Interface Component Examples\nType\tDescription\tExamples\nLink Text\tDefault link text is in the scope of 1.4.3 Contrast (Minimum), and the underline is sufficient to indicate the link.\t\nDefault focus style\tLinks are required to have a visible focus indicator by 2.4.7 Focus Visible. Where the focus style of the user-agent is not adjusted on interactive controls (such as links, form fields or buttons) by the website (author), the default focus style is exempt from contrast requirements (but must still be visible).\t\nButtons\tA button which has a distinguishing indicator such as position, text style, or context does not need a contrasting visual indicator to show that it is a button, although some users are likely to identify a button with an outline that meets contrast requirements more easily.\t\nText input (minimal)\tWhere a text-input has a visual indicator to show it is an input, such as a bottom border (#767676), that indicator must meet 3:1 contrast ratio.\t\nText input\tWhere a text-input has an indicator such as a complete border (#767676), that indicator must meet 3:1 contrast ratio.\t\nText input focus style\tA focus indicator is required. While in this case the additional gray (#CCC) outline has an insufficient contrast of 1.6:1 against the white (#FFF) background, the cursor/caret which is displayed when the input receives focus does provide a sufficiently strong visual indication.\t\nText input using background color\tText inputs that have no border and are differentiated only by a background color must have a 3:1 contrast ratio to the adjacent background (#043464).\t\nToggle button\tThe toggle button's internal background (#070CD5) has a good contrast with the external white background. Also, the round toggle within (#7AC2FF) contrasts with the internal background.\t\nDropdown indicator\tThe down-arrow is required to understand that there is drop-down functionality, it has a contrast of 4.7:1 for the white icon on dark gray (#6E747B).\t\nDropdown indicator\tThe down-arrow is required to understand that there is drop-down functionality, it has a contrast of 21:1 for the black icon on white.\t\nCheckbox - empty\tA black border on a white background indicates the checkbox.\t\nCheckbox - checked\tA black border on a white background indicates the checkbox, the black tick shape indicates the state of checked.\t\nCheckbox - Fail\tThe grey border color of the checkbox (#9D9D9D) has a contrast ratio of 2.7:1 with the white background, which is not sufficient for the visual information required to identify the checkbox.\t\nCheckbox - Subtle hover style\tA black border on a white background indicates the checkbox, when the mouse pointer activates the subtle hover state adds a grey background (#DEDEDE). The black border has a 15:1 contrast ratio with the grey background.\t\nCheckbox - Subtle focus style - fail\tA focus indicator is required. If the focus indicator is styled by the author, it must meet the 3:1 contrast ratio with adjacent colors. In this case, the gray (#AAA) indicator has an insufficient ratio of 2.3:1 with the white (#FFF) adjacent background.\t\nInactive User Interface Components\n\nUser Interface Components that are not available for user interaction (e.g., a disabled control in HTML) are not required to meet contrast requirements. An inactive user interface component is visible but not currently operable. An example would be a submit button at the bottom of a form that is visible but cannot be activated until all the required fields in the form are completed.\n\nFigure 16 An inactive button using default browser styles\n\nInactive components, such as disabled controls in HTML, are not available for user interaction. The decision to exempt inactive controls from the contrast requirements was based on a number of considerations. Although it would be beneficial to some people to discern inactive controls, a one-size-fits-all solution has been very difficult to establish. A method of varying the presentation of disabled controls, such as adding an icon for disabled controls, based on user preferences is anticipated as an advancement in the future.\n\nGraphical Objects\n\nThe term \"graphical object\" applies to stand-alone icons such as a print icon (with no text), and the important parts of a more complex diagram such as each line in a graph. For simple graphics such as single-color icons the entire image is a graphical object. Images made up of multiple lines, colors and shapes will be made of multiple graphical objects, some of which are required for understanding.\n\nNot every graphical object needs to contrast with its surroundings - only those that are required for a user to understand what the graphic is conveying. Gestalt principles such as the \"law of continuity\" can be used to ignore minor overlaps with other graphical objects or colors.\n\nImage\tNotes\n\t\n\nThe phone icon is a simple shape within the orange (#E3660E) circle. The meaning can be understood from that icon alone, the background behind the circle is irrelevant. The orange background and the white icon have a contrast ration greater than 3:1, which passes.\n\nThe graphical object is the white phone icon.\n\n\n\t\n\nA magnet can be understood by the \"U\" shape with lighter colored tips. Therefore to understand this graphic you should be able to discern the overall shape (against the background) and the lighter colored tips (against the rest of the U shape and the background).\n\nThe graphical objects are the \"U\" shape (by outline or by the solid red color #D0021B), and each tip of the magnet.\n\n\n\t\n\nThe symbol to show a currency (the £) going down can be understood with recognition of the shape (down arrow) and the currency symbol (pound icon with the shape which is part of the graphic). To understand this graphic you need to discern the arrow shape against the white background, and the pound icon against the yellow background (#F5A623).\n\nThe graphical objects are the shape and the currency symbol.\n\n\n\t\n\nIn order to understand the graph you need to discern the lines and shapes for each condition. To perceive the values of each line along the chart you need to discern the grey lines marking the graduated 100 value increments.\n\nThe graphical objects are the lines in the graph, including the background lines for the values, and the colored lines with shapes.\n\nThe lines should have 3:1 contrast against their background, but as there is little overlap with other lines they do not need to contrast with each other or the graduated lines. (See the testing principles below.)\n\n\n\t\n\nTo understand the pie chart you have to discern each slice of the pie chart from the others.\n\nThe graphical objects are the slices of the pie (chart).\n\nNote: If the values of the pie chart slices were also presented in a conforming manner (see the Pie Charts example for details), the slices would not be required for understanding.\n\nTaking the magnet image above as an example, the process for establishing the graphical object(s) is to:\n\nAssess what part of each image is needed to understand what it represents.\nThe magnet's \"U\" shape can be conveyed by the outline or by the red background (either is acceptable). The white tips are also important (otherwise it would be a horseshoe), which needs to contrast with the red background.\nAssume that the user could only see those aspects. Do they contrast with the adjacent colors?\nThe outline of the magnet contrasts with the surrounding text (black/white), and the red and white between the tips also has sufficient contrast.\n\nDue to the strong contrast of the red and white, it would also be possible to only put the outline around the white tips of the magnet and it would still conform.\n\nRequired for Understanding\n\nThe term \"required for understanding\" is used in the Success Criterion as many graphics do not need to meet the contrast requirements. If a person needs to perceive a graphic, or part of a graphic (a graphical object) in order to understand the content it should have sufficient contrast. However, that is not a requirement when:\n\nA graphic with text embedded or overlayed conveys the same information, such as labels and values on a chart.\n\nNote\n\nText within a graphic must meet 1.4.3 Contrast (Minimum).\n\nThe graphic is for aesthetic purposes that does not require the user to see or understand it to understand the content or use the functionality.\nThe information is available in another form, such as in a table that follows the graph, which becomes visible when a \"Long Description\" button is pressed.\nThe graphic is part of a logo or brand name (which is considered \"essential\" to its presentation).\nGradients\n\nGradients can reduce the apparent contrast between areas, and make it more difficult to test. The general principles is to identify the graphical object(s) required for understanding, and take the central color of that area. If you remove the adjacent color which does not have sufficient contrast, can you still identify and understand the graphical object?\n\nFigure 17 Removing the background which does not have sufficient contrast highlights that the graphical object (the \"i\") is not then understandable.\nDynamic Examples\n\nSome graphics may have interactions that either vary the contrast, or display the information as text when you mouseover/tap/focus each graphical object. In order for someone to discern the graphics exist at all, the unfocused default version must already have sufficiently contrasting colors or text. For the area that receives focus, information can then be made available dynamically as pop-up text, or be foregrounded dynamically by increasing the contrast.\n\nFigure 18 A dynamic chart where the current 'slice' is hovered or focused, which activates the associated text display of the values and highlights the series\nInfographics\n\nInfographics can mean any graphic conveying data, such as a chart or diagram. On the web it is often used to indicate a large graphic with lots of statements, pictures, charts or other ways of conveying data. In the context of graphics contrast, each item within such an infographic should be treated as a set of graphical objects, regardless of whether it is in one file or separate files.\n\nInfographics often fail to meet several WCAG level AA criteria including:\n\n1.1.1 Non-text Content\n1.4.1 Use of Color\n1.4.3 (Text) Contrast\n1.4.5 Images of Text\n\nAn infographic can use text which meets the other criteria to minimise the number of graphical objects required for understanding. For example, using text with sufficient contrast to provide the values in a chart. A long description would also be sufficient because then the infograph is not relied upon for understanding.\n\nSymbolic text characters\n\nWhen text characters are used as symbols – used for their visual appearance, rather than expressing something in human language – they fall under the definition of non-text content.\n\nFigure 19 Even though the two buttons use text characters — an uppercase X, often used for \"Close\" buttons, and a > character, to act as a right-pointing arrow — they count as non-text characters/symbols. Their contrast ratio of just above 3:1 passes this Success Criterion.\nEssential Exception\n\nGraphical objects do not have to meet the contrast requirements when \"a particular presentation of graphics is essential to the information being conveyed\". The Essential exception is intended to apply when there is no way of presenting the graphic with sufficient contrast without undermining the meaning. For example:\n\nLogotypes and flags: The brand logo of an organization or product is the representation of that organization and therefore exempt. Flags may not be identifiable if the colors are changed to have sufficient contrast.\nSensory: There is no requirement to change pictures of real life scenes such as photos of people or scenery.\nRepresenting other things: If you cannot represent the graphic in any other way, it is essential. Examples include:\nScreenshots to demonstrate how a website appeared.\nDiagrams of medical information that use the colors found in biology (example medical schematic from Wikipedia).\ncolor gradients that represent a measurement, such as heat maps (example heatmap from Wikipedia).\nTesting Principles\n\nA summary of the high-level process for finding and assessing non-text graphics on a web page:\n\nIdentify each user-interface component (link, button, form control) on the page and:\nIdentify the visual (non-text) indicators of the component that are required to identify that a control exists, and indicate the current state. In the default (on page load) state, test the contrast ratio against the adjacent colors.\nTest those contrast indicators in each state.\nIdentify each graphic on the page that includes information required for understanding the content (i.e. excluding graphics which have visible text for the same information, or are decorative) and:\nCheck the contrast of the graphical object against its adjacent colors;\nIf there are multiple colors and/or a gradient, choose the least contrasting area to test;\nIf it passes, move to the next graphical object;\nIf the least-contrasting area is less than 3:1, assume that area is invisible, is the graphical object still understandable?\nIf there is enough of the graphical object to understand, it passes, else fail.\n\nThe techniques below each have testing criteria, and the related criteria for Focus visible (2.4.7), Use of color (1.4.1), and Contrast minimum also have techniques.",
      "benefitsText": "Benefits\n\nPeople with low vision often have difficulty perceiving graphics that have insufficient contrast. This can be exacerbated if the person has a color vision deficiency that lowers the contrast even further. Providing a relative luminance (lightness difference) of 3:1 or greater can make these items more distinguishable when the person does not see a full range of colors.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/non-text-contrast.html",
      "beneficiaries": [
        "視覚障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.12 テキストの間隔",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   以下のテキストスタイルプロパティをサポートするマークアップ言語を用いて実装されているコンテンツにおいては、以下をすべて設定し、かつ他のスタイルプロパティを変更しないことによって、コンテンツ又は機能の損失が生じない:\n   \n   \n     行の間隔 (行送り) をフォントサイズの少なくとも 1.5 倍に設定する\n     段落に続く間隔をフォントサイズの少なくとも 2 倍に設定する\n     文字の間隔 (字送り) をフォントサイズの少なくとも 0.12 倍に設定する\n     単語の間隔をフォントサイズの少なくとも 0.16 倍に設定する\n   \n \n 例外: テキスト表記においてこれらのテキストスタイルプロパティの一つ以上を使用しない自然言語及び文字体系では、その言語と文字体系の組み合わせに存在するプロパティだけを用いて、この達成基準に適合することができる。\n\n 注記 1コンテンツが、これらのテキストの間隔の値を用いる必要はない。要求事項は、制作者が指定したテキストの間隔を利用者が上書きした場合に、コンテンツ又は機能が失われないことである。\n\n 注記 2言語の中には、書記体系において、例えば段落開始のインデントのように、異なるテキストの間隔の設定が用いられるものもある。コンテンツ制作者は、テキストの可読性及び視認性を向上させるために、その書記体系の、その地域に適用されるガイドラインに従うことが推奨される。\n \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion (SC) is to ensure that when people override author specified text spacing to improve their reading experience, content is still readable and operable. Each of the requirements stipulated in the SC's four bullets helps ensure text styling can be adapted by the user to suit their needs.\n\nThe specified metrics set a minimum baseline. The values in between the author's metrics and the metrics specified in this SC should not have loss of content or functionality.\n\nThis SC focuses on the adaptability of content to an increase in spacing between lines, words, letters, and paragraphs. Any combination of these may assist a user with effectively reading text. As well, ensuring that content correctly adapts when users override author settings for spacing also significantly increases the likelihood other style preferences can be set by the user. For example, a user may need to change to a wider font family than the author has set in order to effectively read text.\n\nAuthor Responsibility\n\nThis SC does not dictate that authors must set all their content to the specified metrics, nor does the SC intend to imply that all users will adjust the specified metrics. Rather, it specifies that should a user choose to set any of these metrics they can do so without any loss of content or functionality. The author requirement is both to not interfere with a user's ability to override the author settings, and to ensure that content thus modified does not break content in the manners shown in figures 1 through 3 in Effects of Not Allowing for Spacing Override.\n\nIn some human languages and scripts, some of the metrics specified by the SC are inapplicable. For example, languages such as Japanese do not use spacing following paragraphs, meaning that users are unlikely to make any paragraph spacing changes in practice. The exception in this SC allows authors to ignore text style properties which are inapplicable to the combination of language and script being used.\n\nIt is beneficial for users if authors use any locally available guidance for improving readability in the local language or writing system. If the user chooses to go beyond the metrics specified, any resulting loss of content or functionality is the user's responsibility.\n\nFurther, this SC is not concerned with how users change the line height and spacing metrics. It does not require that content implement its own mechanisms to allow users to do this. It is not a failure of the content if a user agent or platform does not provide a way for users to do this. Content does not fail this SC if the method chosen by the user - for instance, the use of an extension or bookmarklet - fails to correctly set the line height and spacing text properties on the content (provided that the content is not actively and purposely preventing the properties from being added).\n\nApplicability\n\nIf the markup-based technologies being used are capable of overriding text to the Success Criterion's metrics, then this SC is applicable. For instance Cascading Style Sheet/HTML technologies are quite able to allow for the specified spacing metrics. Plugin technologies would need to have a built-in ability to modify styles to the specified metrics. Currently, this SC does not apply to PDF as it is not implemented using markup.\n\nExamples of text that are typically not affected by style properties and not expected to adapt are:\n\nVideo captions embedded directly into the video frames and not provided as an associated caption file\nImages of text\n\nFor this SC, canvas implementations of text are considered to be images of text.\n\nUse of ellipses\n\nThere may be regions of a page where text containers cannot expand due to design constraints (such as a maximum width for the left navigation or table column headers). A common convention if text exceeds its space is to replace truncated text with an ellipsis. Where ellipses appear as a result of modifying text style properties, the page can still meet the Text Spacing requirements, so long as the content is still available. For example:\n\na mechanism is provided to reveal the truncated text on the page (for instance, the text appears on focus or on activation)\nwhere the ellipsis is part of a section of content which includes a link, the truncated text is revealed on the linked page\n\nWhere text is not truncated but it is when text is spaced, if there is no mechanism to show the truncated text, it fails this Success Criterion.\n\nUser Responsibility\n\nThe ability to read and derive meaning from the overridden spacing rests with the user. The user may choose to exceed the spacing adjustments in the SC. If the increased spacing causes loss of content or functionality, the user will adjust or return to the author’s original spacing or spacing within the bounds of the SC. Regardless, the user needs the flexibility to adjust spacing within the bounds set in the SC without loss of content or functionality. Such changes may be achieved via user stylesheet, bookmarklet, extension, or application.\n\nEffects of Not Allowing for Spacing Override\n\nThe following images show some types of failures when authors do not take into consideration that users may override spacing to the metrics specified in this Success Criterion.\n\nText Cut Off\n\nThe bottom portion of the words \"Your Needs\" is cut off in a heading making that text unreadable in Figure 1. It should read \"We Provide a Mobile Application Service to Meet Your Needs.\"\n\nFigure 1 Vertical text cut off is a failure.\n\nIn Figure 2 the last portion of text is cut off in 3 side-by-side headings. The 1st heading should read \"A cog in the wheel.\" But it reads \"A cog in the whe\". Only half of the second \"e\" is visible and the letter \"l\" is completely missing. The 2nd heading should read \"A penny for your thoughts\". But it reads \"A penny for your\". The 3rd should read \"Back to the drawing board.\" But it reads \"Back to the drawi\".\n\nFigure 2 Horizontal text cut off is a failure.\nText Overlap\n\nIn Figure 3 the last 3 words \"Groups and Programs\" of the heading \"Technologists Seeking Input from Groups and Programs\" overlap the following sentence. That sentence should read, \"You are invited to share ideas and areas of interest related to the integration of technology from a group or program perspective.\" But the words \"You are invited to share ideas\" are obscured and unreadable.\n\nFigure 3 Overlapping text is a failure.",
      "benefitsText": "Benefits\nPeople with low vision who require increased space between lines, words, and letters are able to read text.\nPeople with dyslexia may increase space between lines, words, and letters to increase reading speed.\nAlthough not required by this SC, white space between blocks of text can help people with cognitive disabilities discern sections and call out boxes.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/text-spacing.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.13 ホバー又はフォーカスで表示されるコンテンツ",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n       \n    \tポインタホバー又はキーボードフォーカスを受け取ってから外すことで、追加コンテンツを表示させてから非表示にさせる場合は、以下の要件を全て満たす:\n\n  \n\n    非表示にすることができる \n    ポインタホバー又はキーボードフォーカスを動かさずに追加コンテンツを非表示にするメカニズムが存在する。ただし、追加コンテンツが入力エラーを伝える場合や、他のコンテンツを不明瞭にしたり置き換えたりしない場合は除く。\n\n    ホバーすることができる \n   ポインタホバーによって追加コンテンツを表示させることができる場合、その追加コンテンツを消すことなく、ポインタを追加コンテンツ上で動かすことができる。\n\n    表示が継続される \n    ホバーやフォーカスが解除される、利用者が非表示にする、又はその情報が有効でなくなるまでは、追加コンテンツが表示され続ける。\n\n  \n    \t\n    \t例外: 追加コンテンツの視覚的提示がユーザエージェントによって制御されていて、かつコンテンツ制作者が変更していない場合は例外とする。\n\n    \t注記 1ユーザエージェントによって制御されている追加コンテンツの例としては、HTML の title 属性 [HTML] を用いて作られているブラウザのツールチップが挙げられる。\n     注記 2ホバー時やフォーカス時に表示されるカスタムツールチップ、サブメニュー、他の非モーダルポップアップは、この達成基準の適用対象となる「追加コンテンツ」の例である。\n     注記 3この達成基準は、トリガーとなるコンポーネント自体に追加で表示されるコンテンツに対して適用される。キーボードフォーカスによって可視化される非表示のコンポーネント (例えば、ページの別の部分にスキップするためのリンク) は追加コンテンツを提示しないため、この達成基準の適用対象外である。\n  ",
      "intentText": "Intent\n\nAdditional content that appears and disappears in coordination with keyboard focus or pointer hover often leads to accessibility issues. Reasons for such issues include:\n\nthe user may not have intended to trigger the interaction\nthe user may not know new content has appeared\nthe new content may intefere with a user's ability to do a task\n\nExamples of such interactions can include custom tooltips, sub-menus and other nonmodal popups which display on hover and focus. The intent of this success criterion is to ensure that authors who cause additional content to appear and disappear in this manner must design the interaction in such a way that users can:\n\nperceive the additional content AND\ndismiss it without disrupting their page experience.\n\nThere are usually more predictable and accessible means of adding content to the page, which authors are recommended to employ. If an author does choose to make additional content appear and disappear in coordination with hover and keyboard focus, this success criterion specifies three conditions that must be met:\n\ndismissable\nhoverable\npersistent\n\nEach of these is discussed in a separate section.\n\nDismissable\n\nThe intent of this condition is to ensure that the additional content does not interfere with viewing or operating the page's original content. When magnified, the portion of the page visible in the viewport can be significantly reduced. Mouse users frequently move the pointer to pan the magnified viewport and display another portion of the screen. However, almost the entire portion of the page visible in this restricted viewport may trigger the additional content, making it difficult for a user to pan without re-triggering the content. A keyboard means of dismissing the additional content provides a workaround.\n\nAlternatively, low vision users who can only navigate via the keyboard do not want the small area of their magnified viewport cluttered with hover text. They need a keyboard method of dismissing something that is obscuring the current focal area.\n\nTwo methods may be used to satisfy this condition and prevent such interference:\n\nPosition the additional content so that it does not obscure any other content including the trigger, with the exception of white space and purely decorative content, such as a background graphic which provides no information.\nProvide a mechanism to easily dismiss the additional content, such as by pressing Escape.\n\nFor most triggers of relatively small size, it is desirable for both methods to be implemented. If the trigger is large, noticing the additional content may be of concern if it appears away from the trigger. In those cases, only the second method may be appropriate.\n\nThe success criterion allows for input error messages to persist as there are cases that require attention, explicit confirmation or remedial action.\n\nHoverable\n\nThe intent of this condition is to ensure that additional content which may appear on hover of a target may also be hovered itself. Content which appears on hover can be difficult or impossible to perceive if a user is required to keep their mouse pointer over the trigger. When the added content is large, magnified views may mean that the user needs to scroll or pan to completely view it, which is impossible unless the user is able to move their pointer off the trigger without the additional content disappearing.\n\nAnother common situation is when large pointers have been selected via platform settings or assistive technology. Here, the pointer can obscure a significant area of the additional content. A technique to view the content fully in both situations is to move the mouse pointer directly from the trigger onto the new content. This capability also offers significant advantages for users who utilize screen reader feedback on mouse interactions. This condition generally implies that the additional content overlaps or is positioned adjacent to the target.\n\nPersistent\n\nThe intent of this condition is to ensure users have adequate time to perceive the additional content after it becomes visible. Users with disabilities may require more time for many reasons, such as to change magnification, move the pointer, or simply to bring the new content into their visual field. Once it appears, the content should remain visible until:\n\nThe user removes hover or focus from the trigger and the additional content, consistent with the typical user experience;\nThe user dismisses the additional content via the mechanism provided to satisfy the Dismissable condition; or\nThe information conveyed by the additional content becomes invalid, such as a 'busy' message that is no longer valid.\nAdditional Notes\nThis criterion does not attempt to solve such issues when the appearance of the additional content is completely controlled by the user agent. A prominent example is the common behavior of browsers to display the title  attribute in HTML as a small tooltip.\nModal dialogs are out of scope for this criterion because they must take keyboard focus and thus should not appear on hover or focus. Refer to Success Criterion 3.2.1, On Focus.\nContent which can be triggered via pointer hover should also be able to be triggered by keyboard focus. Refer to Success Criterion 2.1.1, Keyboard.",
      "benefitsText": "Benefits\nUsers with low vision who view content under magnification will be better able to view content on hover or focus without reducing their desired magnification.\nUsers who increase the size of mouse cursors via platform settings or assistive technology will be able to employ a technique to view obscured content on hover.\nUsers with low vision or cognitive disabilities will have adequate time to perceive additional content appearing on hover or focus and to view the trigger content with less distraction.\nusers with low pointer accuracy will be able to more easily dismiss unintentionally-triggered additional content",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/content-on-hover-or-focus.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.1 キーボード",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツのすべての機能は、個々のキーストロークに特定のタイミングを要することなく、キーボードインタフェースを通じて操作可能である。ただし、その根本的な機能が利用者の動作による終点だけではない軌跡に依存する入力を必要とする場合は除く。\n   \n   注記 1上記の例外は、根本的な機能に関するものであり、入力手法に関するものではない。例えば、テキスト入力に手書き入力を用いるのであれば、その入力手法 (手書き) は利用者の動作による軌跡に依存した入力を必要とするが、その根本的な機能 (テキスト入力) は利用者の動作による軌跡に依存した入力を必要とするものではない。\n   \n   注記 2これは、キーボード操作に加えて、マウス入力、又はその他の入力手段を提供することを禁ずるものでも妨げるものでもない。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that, wherever possible, content can be operated through a keyboard or keyboard interface (so an alternate keyboard can be used). When content can be operated through a keyboard or alternate keyboard, it is operable by people with no vision (who cannot use devices such as mice that require eye-hand coordination) as well as by people who must use alternate keyboards or input devices that act as keyboard emulators. Keyboard emulators include speech input software, sip-and-puff software, on-screen keyboards, scanning software and a variety of assistive technologies and alternate keyboards. Individuals with low vision also may have trouble tracking a pointer and find the use of software much easier (or only possible) if they can control it from the keyboard.\n\nExamples of \"specific timings for individual keystrokes\" include situations where a user would be required to repeat or execute multiple keystrokes within a short period of time or where a key must be held down for an extended period before the keystroke is registered.\n\nThe phrase \"except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints\" is included to separate those things that cannot reasonably be controlled from a keyboard.\n\nMost actions carried out by a pointing device can also be done from the keyboard (for example, clicking, selecting, moving, sizing). However, there is a small class of input that is done with a pointing device that cannot be done from the keyboard in any known fashion without requiring an inordinate number of keystrokes. Free hand drawing, or watercolor painting require path dependent input. Drawing straight lines, regular geometric shapes, re-sizing windows and dragging objects to a location (when the path to that location is not relevant) do not require path dependent input.\n\nThe use of MouseKeys would not satisfy this Success Criterion because it is not a keyboard equivalent to the application; it is a mouse equivalent (i.e., it looks like a mouse to the application).\n\nIt is assumed that the design of user input features takes into account that operating system keyboard accessibility features may be in use. For example, modifier key locking may be turned on. Content continues to function in such an environment, not sending events that would collide with the modifier key lock to produce unexpected results.\n\nNote\n\nPlatforms and user agents usually have conventions for how web content or applications are controlled with a keyboard interface. If content does not follow the platform/user agent conventions it may be difficult to use, as users will need to learn different interaction methods. As a best practice, content should follow the platform/user agent conventions. However, deviating from these conventions does not fail the normative requirement of this Success Criterion.\n\nFor instance, buttons that have focus can generally be activated using both the Enter key and the Space bar. If a custom button control in a web application instead only reacts to Enter (or even a completely custom key or key combination), this still satisfies the requirements of this Success Criterion.\n\nNote\n\nThis Success Criterion does not require that every visible control that can be activated using a mouse or touch screen must also be focusable and actionable using the keyboard. The normative requirement is only that there must be a way for keyboard interface users to perform the same, or comparable, actions and to operate the content. Generally, the easiest way to achieve this is to provide controls that can be operated with all possible input devices; however, if a web application implements a separate mode of operation for keyboard interface users, it will not fail the Success Criterion.",
      "benefitsText": "Benefits\nPeople who are blind (who cannot use devices such as mice that require eye-hand coordination)\nPeople with low vision (who may have trouble finding or tracking a pointer indicator on screen)\nSome people with hand tremors find using a mouse very difficult and therefore usually use a keyboard",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.2 キーボードトラップなし",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   キーボードインタフェースを用いてキーボードフォーカスをそのウェブページのあるコンポーネントに移動できる場合、キーボードインタフェースだけを用いてそのコンポーネントからフォーカスを外すことが可能である。さらに、修飾キーを伴わない矢印キー、Tab キー、又はフォーカスを外すその他の標準的な方法でフォーカスを外せない場合は、フォーカスを外す方法が利用者に通知される。\n   \n   注記この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that that content does not \"trap\" keyboard focus within subsections of content on a Web page. This is a common problem when multiple formats are combined within a page and rendered using plug-ins or embedded applications.\n\nThere may be times when the functionality of the Web page restricts the focus to a subsection of the content, as long as the user knows how to leave that state and \"untrap\" the focus.",
      "benefitsText": "Benefits\nPeople who rely on a keyboard or keyboard interface to use the Web including people who are blind and people with physical disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/no-keyboard-trap.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.3 キーボード (例外なし)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツのすべての機能は、個々のキーストロークに特定のタイミングを要することなく、キーボードインタフェースを通じて操作可能である。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that all content is operable from the keyboard. This is the same as Success Criterion 2.1.1, except that no exceptions are allowed. This does not mean that content where the underlying function requires input that depends on the path of the user's movement and not just the endpoints (excluded from the requirements of 2.1.1) must be made keyboard accessible. Rather, it means that content that uses path-dependent input cannot conform to this Success Criterion and therefore cannot meet Guideline 2.1 at Level AAA.\n\nNote\n\nPlatforms and user agents usually have conventions for how web content or applications are controlled with a keyboard interface. If content does not follow the platform/user agent conventions it may be difficult to use, as users will need to learn different interaction methods. As a best practice, content should follow the platform/user agent conventions. However, deviating from these conventions does not fail the normative requirement of this Success Criterion.\n\nFor instance, buttons that have focus can generally be activated using both the Enter key and the Space bar. If a custom button control in a web application instead only reacts to Enter (or even a completely custom key or key combination), this still satisfies the requirements of this Success Criterion.\n\nNote\n\nThis Success Criterion does not require that every visible control that can be activated using a pointer (such as a mouse or touch screen input) must also be focusable and actionable using the keyboard. The normative requirement is only that there must be a way for keyboard interface users to perform the same, or comparable, actions and to operate the content. Generally, the easiest way to achieve this is to provide controls that can be operated with all possible input devices; however, if a web application implements a separate mode of operation for keyboard interface users, it will not fail the Success Criterion.",
      "benefitsText": "",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/keyboard-no-exception.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.1 タイミング調整可能",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツに制限時間を設定する場合は、次に挙げる事項のうち、少なくとも一つを満たしている\n   \n   \n      \n      解除\n      \n      制限時間があるコンテンツを利用する前に、利用者がその制限時間を解除することができる。又は、\n         \n      \n      \n      調整\n      \n      制限時間があるコンテンツを利用する前に、利用者が少なくともデフォルト設定の 10 倍を超える、大幅な制限時間の調整をすることができる。又は、\n         \n      \n      \n      延長\n      \n      時間切れになる前に利用者に警告し、かつ少なくとも 20 秒間の猶予をもって、例えば「スペースキーを押す」などの簡単な操作により、利用者が制限時間を少なくとも 10 倍以上延長することができる。又は、\n         \n      \n      \n      リアルタイムの例外\n      \n      リアルタイムのイベント (例えば、オークション) において制限時間が必須の要素で、その制限時間に代わる手段が存在しない。又は、\n         \n      \n      \n      必要不可欠な例外\n      \n      制限時間が必要不可欠なもので、制限時間を延長することがコンテンツの動作を無効にすることになる。又は、\n         \n      \n      \n      20 時間の例外\n      \n      制限時間が 20 時間よりも長い。\n         \n      \n      \n   \n   \n   注記この達成基準は、制限時間の結果として、コンテンツ又は状況の予期せぬ変化を引き起こさないように利用者がタスクを完了できるようにするためのものである。この達成基準は、利用者の動作の結果としてのコンテンツ又はコンテキストの変化を制限する達成基準 3.2.1 と併せて考慮すること。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users with disabilities are given adequate time to interact with Web content whenever possible. People with disabilities such as blindness, low vision, dexterity impairments, and cognitive limitations may require more time to read content or to perform functions such as filling out on-line forms. If Web functions are time-dependent, it will be difficult for some users to perform the required action before a time limit occurs. This may render the service inaccessible to them. Designing functions that are not time-dependent will help people with disabilities succeed at completing these functions. Providing options to disable time limits, customize the length of time limits, or request more time before a time limit occurs helps those users who require more time than expected to successfully complete tasks. These options are listed in the order that will be most helpful for the user. Disabling time limits is better than customizing the length of time limits, which is better than requesting more time before a time limit occurs.\n\nAny process that happens without user initiation after a set time or on a periodic basis is a time limit. This includes partial or full updates of content (for example, page refresh), changes to content, or the expiration of a window of opportunity for a user to react to a request for input.\n\nIt also includes content that is advancing or updating at a rate beyond the user's ability to read and/or understand it. In other words, animated, moving or scrolling content introduces a time limit on a users ability to read content.\n\nThis success criterion is generally not applicable when the content repeats or is synchronized with other content, so long as the information and data is adjustable or otherwise under the control of the end user. Examples of time limits for which this success criterion is not applicable include scrolling text that repeats, captioning, and carousels. These are situations which do include time limits, but the content is still available to the user because it has controls for accessing it, as specified in 2.2.2 Pause, Stop, Hide.\n\nIn some cases, however, it is not possible to change the time limit (for example, for an auction or other real-time event) and exceptions are therefore provided for those cases.\n\nContent that operates on a timer does not need to be time adjustable if there is an alternative that does not rely on a timer. For example, a web application such as an email client provides notification of new email arriving with a temporary message (such as a 'toast' message) in the lower right-hand side of the interface, and the message disappears after 5 seconds. Users are able to identify the arrival of email through other means, such as viewing the Inbox, so the disappearance of the message does not set a time limit on the their ability to determine if new mail has arrived. If the user has no other means of discovering the same information (or performing the same function), then each message would need to meet this Success Criterion in order to provide users with sufficient time to access the information.\n\nNotes regarding server time limits\n\nTimed server redirects can be found below under Common Failures.\nNon-timed server redirects (e.g., 3xx response codes) are not applicable because there is no time limit: they work instantly.\nThis Success Criterion applies only to time limits that are set by the content itself. For example, if a time limit is included in order to address security concerns, it would be considered to have been set by the content because it is designed to be part of the presentation and interaction experience for that content. Time limits set externally to content, such as by the user agent or by factors intrinsic to the Internet are not under the author's control and not subject to WCAG conformance requirements. Time limits set by Web servers should be under the author's/organization's control and are covered. (Success Criteria 2.2.3, 2.2.4 and 2.2.5 may also apply.)\nTen times the default was chosen based on clinical experience and other guidelines. For example, if 15 seconds is allowed for a user to respond and hit a switch, 150 seconds would be sufficient to allow almost all users to hit a switch even if they had trouble.\n20 seconds was also based on clinical experience and other guidelines. 20 seconds to hit 'any switch' is sufficient for almost all users including those with spasticity. Some would fail, but some would fail all lengths of time. A reasonable period for requesting more time is required since an arbitrarily long time can provide security risks to all users, including those with disabilities, for some applications. For example, with kiosks or terminals that are used for financial transactions, it is quite common for people to walk away without signing off. This leaves them vulnerable to those walking up behind them. Providing a long period of inactivity before asking, and then providing a long period for the person to indicate that they are present can leave terminals open for abuse. If there is no activity the system should ask if the user is there. It should then ask for an indication that a person is there ('hit any key') and then wait long enough for almost anyone to respond. For \"hit any key,\" 20 seconds would meet this. If the person indicates that they are still present, the device should return the user to the exact condition that existed before it asked the question.\n20 hours was chosen as an upper limit because it is longer than a full waking day.\n\nIn cases where timing is not an intrinsic requirement but giving users control over timed events would invalidate the outcome, a third party can control the time limits for the user (for example, granting double time on a test).\n\nSee also 2.2.3: No Timing.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.\nPeople with reading disabilities, cognitive limitations, and learning disabilities who may need more time to read or comprehend information can have additional time to read the information by pausing the content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.3 タイミング非依存",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   タイミングは、コンテンツによって提示されるイベント又は動作の必要不可欠な部分ではない。ただし、インタラクティブではない同期したメディア及びリアルタイムのイベントは除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to minimize the occurrence of content that requires timed interaction. This enables people with blindness, low vision, cognitive limitations, or motor impairments to interact with content. This differs from the Level A Success Criterion in that the only exception is for real-time events.\n\nNote\n\nVideo only, such as sign language, is covered in Guideline 1.1.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/no-timing.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.4 割り込み",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   割り込みは、利用者が延期、又は抑制することができる。ただし、緊急を要する割り込みは除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow users to turn off updates from the author/server except in emergencies. Emergencies would include civil emergency alert messages or any other messages that warn of danger to health, safety, or property, including data loss, loss of connection, etcetera.\n\nThis allows access by people with cognitive limitations or attention disorders by enabling them to focus on the content. It also allows users who are blind or have low vision to keep their \"viewing\" focus on the content they are currently reading.",
      "benefitsText": "Benefits\nIndividuals with attention deficit disorders can focus on content without distraction.\nIndividuals with low vision or who use screen readers will not have content updated while they are viewing it (which can lead to discontinuity and misunderstanding if they start reading in one topic and finish in another).",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/interruptions.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.5 再認証",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   認証済のセッションが切れた場合は、再認証後でもデータを失うことなく利用者が操作を継続できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow all users to complete authenticated transactions that have inactivity time limits or other circumstances that would cause a user to be logged out while in the midst of completing the transaction.\n\nFor security reasons, many sites implement an authentication time limit after a certain period of inactivity. These time limits may cause problems for persons with disabilities because it may take longer for them to complete the activity.\n\nOther sites will log a person out of a session if a person logs in on the Web site from another computer or if other activities arise that make the site suspicious of whether the person is still the same legitimate person who logged in originally. When users are logged out while still in the midst of a transaction - it is important that they be given the ability to re-authenticate and continue with the transaction without the loss of any data already entered.",
      "benefitsText": "Benefits\nThis Success Criterion benefits people who may require additional time to complete an activity. People with cognitive limitations may read slowly and require additional time to read and respond to a questionnaire. Users interacting via a screen reader may need extra time to navigate and complete a complicated form. A person with motor impairments or who navigates with an alternative input device may require additional time to navigate through or complete input within a form.\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/re-authenticating.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.1 ブロックスキップ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   複数のウェブページ上で繰り返されているコンテンツのブロックをスキップするメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow people who navigate sequentially through content more direct access to the primary content of the Web page. Web pages and applications often have content that appears on other pages or screens. Examples of repeated blocks of content include but are not limited to navigation links, header content, and advertising frames. Small repeated sections such as individual words, phrases or single links are not considered blocks for the purposes of this provision.\n\nUsers who navigate sequentially through content will generally have to navigate through repeated content on each page. This is in contrast to a sighted user's ability to ignore the repeated material either by focusing on the center of the screen (where main content usually appears) or a mouse user's ability to select a link with a single mouse click rather than encountering every link or form control that comes before the item they want.\n\nIt is not the intent of this Success Criterion to require authors to provide methods that are redundant to functionality provided by the user agent. Most web browsers provide keyboard shortcuts to move the user focus to the top of the page, so if a set of navigation links is provided at the bottom of a web page providing a \"skip\" link may be unnecessary.\n\nNote\n\nAlthough this Success Criterion deals with blocks of content that are repeated on multiple pages, we also strongly promote structural markup on individual pages as per Success Criteria 1.3.1.\n\nAlthough the success criterion does not specifically use the term “within a set of web pages”, the concept of the pages belonging to a set is implied. An author would not be expected to avoid any possible duplication of content in any two pages that are not in some way related to each other, and are not \"Web pages that share a common purpose and that are created by the same author, group or organization” (the definition of set of web pages).\n\nNote\n\nEven for web pages that are not in a set, if a web page has blocks of text that are repeated within the page it may be helpful (but not required) to provide a means to skip over them.",
      "benefitsText": "Benefits\n\nWhen this Success Criterion is not satisfied, it may be difficult for people with some disabilities to reach the main content of a Web page quickly and easily:\n\nScreen reader users who visit several pages on the same site can avoid having to hear all header content and dozens of navigation links on every page before the main content is spoken.\nPeople who use only the keyboard or a keyboard interface can reach content with fewer keystrokes. Otherwise, they might have to make dozens of keystrokes before reaching a link in the main content area. This can take a long time and may cause severe physical pain for some users.\nPeople who use screen magnifiers do not have to search through the same header content or other blocks of information to find where the main content begins each time they enter a new page.\nPeople with cognitive limitations as well as people who use screen readers may benefit when links are grouped into lists",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/bypass-blocks.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.2 ページタイトル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページには、主題又は目的を説明したタイトルがある。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users find content and orient themselves within it by ensuring that each Web page has a descriptive title. Titles identify the current location without requiring users to read or interpret page content. When titles appear in site maps or lists of search results, users can more quickly identify the content they need. User agents make the title of the page easily available to the user for identifying the page. For instance, a user agent may display the page title in the window title bar or as the name of the tab containing the page.\n\nIn cases where the page is a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the page. Note that it is not required to use the name of the document or web application; other things may also describe the purpose or the topic of the page.\n\nIn cases such as Single Page Applications (SPAs), where various distinct pages/views are all nominally served from the same URI and the content of the page is changed dynamically, the title of the page should also be changed dynamically to reflect the content or topic of the current view.\n\nSuccess Criteria 2.4.4 and 2.4.9 deal with the purpose of links, many of which are links to web pages. Here also, the name of a document or web application being linked to would be sufficient to describe the purpose of the link. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.",
      "benefitsText": "Benefits\nThis criterion benefits all users in allowing users to quickly and easily identify whether the information contained in the Web page is relevant to their needs.\nPeople with visual disabilities will benefit from being able to differentiate content when multiple Web pages are open.\nPeople with cognitive disabilities, limited short-term memory and reading disabilities also benefit from the ability to identify content by its title.\nThis criterion also benefits people with severe mobility impairments whose mode of operation relies on audio when navigating between Web pages.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/page-titled.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.3 フォーカス順序",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページが順を追ってナビゲートできて、そのナビゲーション順が意味又は操作に影響を及ぼす場合、フォーカス可能なコンポーネントは、意味及び操作性を損なわない順序でフォーカスを受け取る。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that when users navigate sequentially through content, they encounter information in an order that is consistent with the meaning of the content and can be operated from the keyboard. This reduces confusion by letting users form a consistent mental model of the content. There may be different orders that reflect logical relationships in the content. For example, moving through components in a table one row at a time or one column at a time both reflect the logical relationships in the content. Either order may satisfy this Success Criterion.\n\nThe way that sequential navigation order is determined in Web content is defined by the technology of the content. For example, simple HTML defines sequential navigation via the notion of tabbing order. Dynamic HTML may modify the navigation sequence using scripting along with the addition of a tabindex attribute to allow focus to additional elements. If no scripting or tabindex attributes are used, the navigation order is the order that components appear in the content stream. (See HTML 4.01 Specification, section 17.11, \"Giving focus to an element\").\n\nAn example of keyboard navigation that is not the sequential navigation addressed by this Success Criterion is using arrow key navigation to traverse a tree component. The user can use the up and down arrow keys to move from tree node to tree node. Pressing the right arrow key may expand a node, then using the down arrow key, will move into the newly expanded nodes. This navigation sequence follows the expected sequence for a tree control - as additional items get expanded or collapsed, they are added or removed from the navigation sequence.\n\nThe focus order may not be identical to the programmatically determined reading order (see Success Criterion 1.3.2) as long as the user can still understand and operate the Web page. Since there may be several possible logical reading orders for the content, the focus order may match any of them. However, when the order of a particular presentation differs from the programmatically determined reading order, users of one of these presentations may find it difficult to understand or operate the Web page. Authors should carefully consider all these users as they design their Web pages.\n\nFor example, a screen reader user interacts with the programmatically determined reading order, while a sighted keyboard user interacts with the visual presentation of the Web page. Care should be taken so that the focus order makes sense to both of these sets of users and does not appear to either of them to jump around randomly.\n\nFor clarity:\n\nFocusable components need to receive focus in an order that preserves meaning and operability only when navigation sequences affect meaning and operability.\nIn those cases where it is required, there may be more than one order that will preserve meaning and operability.\nIf there is more than one order that preserves meaning and operability, only one of them needs to be provided.",
      "benefitsText": "Benefits\n\nThese techniques benefit keyboard users who navigate documents sequentially and expect the focus order to be consistent with the sequential reading order.\n\nPeople with mobility impairments who must rely on keyboard access for operating a page benefit from a logical, usable focus order.\nPeople with disabilities that make reading difficult can become disoriented when tabbing takes focus someplace unexpected. They benefit from a logical focus order.\nPeople with visual impairments can become disoriented when tabbing takes focus someplace unexpected or when they cannot easily find the content surrounding an interactive element.\nOnly a small portion of the page may be visible to an individual using a screen magnifier at a high level of magnification. Such a user may interpret a field in the wrong context if the focus order is not logical.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-order.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.4 リンクの目的 (コンテキスト内)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのリンクの目的が、リンクのテキスト単独で、又はリンクのテキストとプログラムによる解釈が可能なリンクのコンテキストから判断できる。ただし、リンクの目的がほとんどの利用者にとって曖昧な場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand the purpose of each link so they can decide whether they want to follow the link. Whenever possible, provide link text that identifies the purpose of the link without needing additional context. Assistive technology has the ability to provide users with a list of links that are on the Web page. Link text that is as meaningful as possible will aid users who want to choose from this list of links. Meaningful link text also helps those who wish to tab from link to link. Meaningful links help users choose which links to follow without requiring complicated strategies to understand the page.\n\nThe text of, or associated with, the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.\n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.\n\nIn some situations, authors may want to provide part of the description of the link in logically related text that provides the context for the link. In this case the user should be able to identify the purpose of the link without moving focus from the link. In other words, they can arrive on a link and find out more about it without losing their place. This can be achieved by putting the description of the link in the same sentence, paragraph, list item, or table cell as the link, or in the table header cell for a link in a data table, because these are directly associated with the link itself. Alternatively, authors may choose to use an ARIA technique to associate additional text on the page with the link.\n\nThis context will be most usable if it precedes the link. (For instance, if you must use ambiguous link text, it is better to put it at the end of the sentence that describes its destination, rather than putting the ambiguous phrase at the beginning of the sentence.) If the description follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).\n\nIt is a best practice for links with the same destination to have consistent text (and this is a requirement per Success Criterion 3.2.4 for pages in a set). It is also a best practice for links with different purposes and destinations to have different link text.\n\nA best practice for links to conforming alternate versions is to ensure that the link text to the conforming alternate version indicates in link text that the page it leads to represents the more accessible version. This information may also be provided in text - the goal is to ensure that the end user knows what the purpose of the link is.\n\nThe Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text or programmatically associated with the link to satisfy the Success Criterion.\n\nNote\n\nThere may be situations where the purpose of the link is is supposed to be unknown or obscured. For instance, a game may have links identified only as door #1, door #2, and door #3. This link text would be sufficient because the purpose of the links is to create suspense for all users.\n\nSee also 2.4.9: Link Purpose (Link Only).",
      "benefitsText": "Benefits\nThis Success Criterion helps people with motion impairment by letting them skip links that they are not interested in, avoiding the keystrokes needed to visit the referenced content and then returning to the current content.\nPeople with cognitive limitations will not become disoriented by multiple means of navigation to and from content they are not interested in.\nPeople with visual disabilities will be able to determine the purpose of a link by exploring the link's context.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.5 複数の手段",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中で、あるウェブページを見つける複数の手段が利用できる。ただし、ウェブページが一連のプロセスの中の 1 ステップ又は結果である場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make it possible for users to locate content in a manner that best meets their needs. Users may find one technique easier or more comprehensible to use than another.\n\nEven small sites should provide users some means of orientation. For a three or four page site, with all pages linked from the home page, it may be sufficient simply to provide links from and to the home page where the links on the home page can also serve as a site map.",
      "benefitsText": "Benefits\nProviding an opportunity to navigate sites in more than one manner can help people find information faster. Users with visual impairments may find it easier to navigate to the correct part of the site by using a search, rather than scrolling through a large navigation bar using a screen magnifier or screen reader. A person with cognitive disabilities may prefer a table of contents or site map that provides an overview of the site rather than reading and traversing through several Web pages. Some users may prefer to explore the site in a sequential manner, moving from Web page to Web page in order to best understand the concepts and layout.\nIndividuals with cognitive limitations may find it easier to use search features than to use a hierarchical navigation scheme that may be difficult to understand.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/multiple-ways.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.6 見出し及びラベル",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   見出し及びラベルは、主題又は目的を説明している。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand what information is contained in Web pages and how that information is organized. When headings are clear and descriptive, users can find the information they seek more easily, and they can understand the relationships between different parts of the content more easily. Descriptive labels help users identify specific components within the content.\n\nLabels and headings do not need to be lengthy. A word, or even a single character, may suffice if it provides an appropriate cue to finding and navigating content.\n\nThis Success Criterion does not require headings or labels. This Success Criterion requires that if headings or labels are provided, they be descriptive. This Success Criterion also does not require that content acting as a heading or label be correctly marked up or identified – this aspect is covered separately by 1.3.1: Info and Relationships. It is possible for content to pass this Success Criterion (providing descriptive content that acts as headings or labels) while failing Success Criterion 1.3.1 (if the headings or labels aren't correctly marked up/identified). Conversely, it is also possible for content to pass Success Criterion 1.3.1 (with headings or labels correctly marked up or identified), while failing this Success Criterion (if those headings or labels are not sufficiently clear or descriptive).\n\nFurther, in the case of labels, this Success Criterion does not take into consideration whether or not alternative methods of providing an accessible name for form controls and inputs has been used – this aspect is covered separately by 4.1.2: Name, Role and Value. It is possible for controls and inputs to have an appropriate accessible name (e.g. using aria-label=\"…\") and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion (if the label is not sufficiently clear or descriptive).\n\nThis success criterion does not require the use of labels; however, it does require that if labels are present, they must be sufficiently clear or descriptive. Please see 3.3.2: Labels or Instructions for more information on the use of labels.",
      "benefitsText": "Benefits\nDescriptive headings are especially helpful for users who have disabilities that make reading slow and for people with limited short-term memory. These people benefit when section titles make it possible to predict what each section contains.\nForm input controls with labels that clearly describe the content that is expected to be entered helps users know how to successfully complete the form.\nWhen headings and labels are also correctly marked up and identified in accordance with 1.3.1: Info and Relationships, this Success Criterion helps people who use screen readers by ensuring that labels and headings are clearer when presented in a different format – for example, in an automatically generated list of headings, a table of contents, or when jumping from heading to heading within a page.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.9 リンクの目的 (リンクのみ)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのリンクの目的を、リンクのテキスト単独で特定できるメカニズムが利用できる。ただし、リンクの目的がほとんどの利用者にとって曖昧な場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand the purpose of each link in the content, so they can decide whether they want to follow it. Best practice is that links with the same destination would have the same descriptions, but links with different purposes and destinations would have different descriptions (see also Success Criterion 3.2.4 which calls for consistency in identifying components that have the same functionality). Because the purpose of a link can be identified from its link text, links can be understood when they are out of context, such as when the user agent provides a list of all the links on a page.\n\nThe text in the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.\n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.\n\nThe Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text to satisfy the Success Criterion.\n\nThe word \"mechanism\" is used to allow authors to either make all links fully understandable out of context by default or to provide a way to make them this way. This is done because for some pages, making the links all unambiguous by themselves makes the pages easier for some users and harder for others. Providing the ability to make the links unambiguous (by them selves) or not provides both users with disabilities with the ability to use the page in the format that best meets their needs.\n\nFor example: A page listing 100 book titles along with links to download the books in HTML, PDF, DOC, TXT, MP3, or AAC might ordinarily be viewed as the title of the book as a link with the words \"in HTML\" after it. then the sentence \"Also available in: \" followed by a series of short links with text of \"HTML\", \"PDF\", \"DOC\", \"TXT\", \"MP3\", and \"AAC\". At Level 3, some users could opt to view the page this way - because they would find the page harder to understand or slower to use if the full title of the book were included in each of the links. Others could opt to view the page with the full title as part of each of the links so that each link was understandable in itself. Both the former and the latter groups could include people with visual or cognitive disabilities that used different techniques to browse or that had different types or severities of disability.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with motion impairment by letting them skip Web pages that they are not interested in, avoiding the keystrokes needed to visit the referenced content and then return to the current content.\nPeople with cognitive limitations will not become disoriented by extra navigation to and from content they are not interested in.\nPeople with visual disabilities will benefit from not losing their place in the content when they return to the original page. The screen reader's list of links is more useful for finding information because the target of the links are described.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-link-only.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.10 セクション見出し",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   セクション見出しを用いて、コンテンツが整理されている。\n   \n   注記 1見出しはその一般的な意味で用いられており、タイトルや様々なタイプのコンテンツに見出しを付加するその他の手段を含む。\n   \n   注記 2この達成基準は、文書におけるセクションを対象としており、ユーザインタフェース コンポーネントは対象としていない。ユーザインタフェース コンポーネントについては、達成基準 4.1.2 が対象にしている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide headings for sections of a Web page, when the page is organized into sections. For instance, long documents are often divided into a variety of chapters, chapters have subtopics, etc. When such sections exist, they need to have headings that introduce them. This clearly indicates the organization of the content, facilitates navigation within the content, and provides mental \"handles\" that aid in comprehension of the content. Other page elements may complement headings to improve presentation (e.g., horizontal rules and boxes), but visual presentation is not sufficient to identify document sections.\n\nThis provision is included at Level AAA because it cannot be applied to all types of content and it may not always be possible to insert headings. For example, when posting a pre-existing document to the Web, headings that an author did not include in the original document cannot be inserted. Or, a long letter would often cover different topics, but putting headings into a letter would be very strange. However, if a document can be broken up into sections with headings, it facilitates both understanding and navigation.",
      "benefitsText": "Benefits\nPeople who are blind will know when they have moved from one section of a Web page to another and will know the purpose of each section.\nPeople with some learning disabilities will be able to use the headings to understand the overall organization of the page content more easily.\nPeople who navigate content by keyboard will be able to jump the focus from heading to heading, enabling them to find quickly content of interest.\nIn pages where content in part of the page updates, headings can be used to quickly access updated content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/section-headings.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.11 隠されないフォーカス (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ユーザインタフェース コンポーネントがキーボードフォーカスを受け取るとき、コンテンツ制作者が作成したコンテンツによって、そのコンポーネントの全体が隠されるようなことがない。\n\n    注記 1設定可能なインタフェースの中にあるコンテンツが利用者によって再配置可能な場合、この達成基準のテスト及び適合性の対象として検討されるのは、利用者によって移動可能なコンテンツの初期位置だけである。\n\n    注記 2利用者が開いたコンテンツによって、フォーカスを受け取るコンポーネントが隠される場合がある。利用者がキーボードフォーカスを移動せずにフォーカスを持つコンポーネントを表示できる場合、そのフォーカスを持つコンポーネントは、コンテンツ制作者が作成したコンテンツによって隠されたとはみなされない。\n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the item receiving keyboard focus is always partially visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.\n\nIn recognition of the complex responsive designs common today, this AA criterion allows for the component receiving focus to be partially obscured by other author-created content. A partly obscured component can still be very visible, although the more of it that is obscured, the less easy it is to see. For that reason, authors should attempt to design interactions to reduce the degree and frequency with which the item receiving focus is partly obscured. For best visibility, none of the component receiving focus should be obscured. This preferred outcome is covered by the AAA criterion Focus Not Obscured (Enhanced).\n\nTypical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can obscure the item receiving focus, along with its focus indicator.\n\nA notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it entirely obscures a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.\n\nAnother form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. While less than 100 percent opacity is not causing the component to be entirely obscured, such semi-opaque overlaps may cause a failure of 1.4.11 Non-text Contrast. When a focus indicator can be covered by a semi-opaque component, the ability of the focus indicator to pass 1.4.11 should be evaluated (and pass) while the focus indicator is under the semi-opaque component. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.\n\nUser-movable content\n\nThis SC contains a note regarding content that can be repositioned. If users can move content regions, then they can potentially position the movable content such that it obscures other content that may receive focus. In such a case, the author is only responsible for ensuring that the movable content in its initial position does not obscure the item receiving focus.\n\nThis note is intended to accommodate a common interaction in complex applications such as authoring tools, where the main editing region (also called a canvas) can be enhanced by displaying toolbars or other panels, which can be repositioned around the canvas. It is possible to design such toolbars so they do not obscure focus. Authors are encouraged to do so, as well as pursue techniques which ensure equitable keyboard use of such toolbars. However, in recognition of the complexities involved in responsive design as well as in supporting the ability to transform the text size and spacing of content, only the starting position of such movable panels is assessed.\n\nUser-opened content\n\nThis SC contains a note regarding content that is opened or disclosed by the user. One example of such content is a menu button opened by a user that opens a list of choices over pre-existing content on the screen. Such content can obscure other information on the screen, but it does not obscure an item receiving keyboard focus, because the new content doesn't stay open through a change of focus. However, authors may create user-opened content that is intentionally designed to persist until closed by the user, such as a chat window. Such persistent content has the potential to fail Focus Not Obscured (Minimum). Various types are described in this section. All can be designed so that they pass this Success Criterion.\n\nThis section only applies to content that the user actively discloses. Content pre-positioned by the author (such as a sticky footer), or content that appears without direct user initiation, such as system warnings, must not prevent the item receiving focus from being immediately visible in the viewport. Also, this note is not intended to apply to disclosures that are by convention non-persistent. As discussed in the following sub-section, an open dropdown that does not close when no longer focused is not following this convention.\n\nNon-persistent opened information\n\nA number of components on the web open (or disclose) additional content (on activation or on focus) intended for immediate user interaction or information. This new content is often on top of other content, obscuring it. Examples of such components are menu items, select element items, combobox lists (and other dropdown items), date picker calendars, and tooltips. The common trait of all these components is that they are not expected to persist after being acted on or once they are no longer the primary point of user interaction. Such non-persistent disclosures do not fail this SC since they do not obscure the item with focus. However, if an author allows such components to persist after the user has 1) activated one of the opened items or 2) moved the focus away from the triggering item and the additional content, it is at risk of failing this criterion by obscuring the item with focus.\n\nUser openable, persistent disclosures\n\nSome disclosure patterns provide a mechanism for the user to open additional content that remains open until intentionally closed by the user. Accordions are a simple example of such a pattern. Chatbots and expandable side navigation are more complex examples. All of these patterns can be implemented so they are not at risk of failing this SC. Some possible approaches are:\n\nWhen the additional content appears, it displaces existing content. An accordion is an example of this. When an accordion is opened, the disclosed content shifts existing content further down the page. Since the new content does not obscure existing content, it cannot obscure the item with focus.\nWhen the additional content appears, existing content reflows. The popout sidebar on the WCAG standard is an example of this pattern. When the side menu is activated, it opens a new section of information along the left side of the page. The main content area is reduced horizontally to accommodate the new content, and the existing content reflows to fit in the thinner space. As a result, there is no overlapping content between the two sections; the item receiving focus, whether in the left navigation or in the main content, will not be obscured by the other section.\nWhen the additional content is opened, it takes focus and the tab ring is constrained to the new content until it is dismissed. This modality is somewhat like a dialog, in that a user cannot navigate beyond the opened content by keyboard without dismissing it first (typically by pressing Esc). However, unlike in a modal dialog, in some implementations a pointer user may be able to interact with content outside the opened section without dismissing it. Since this pattern potentially creates an inequitable experience between keyboard and pointer users, it should be used cautiously. That said, it does prevent the opened content from obscuring the keyboard focus in the main content, and thus should pass this SC. This is described and demonstrated in a short video in the Knowbility article in the reference section, under the section heading Keep keyboard focus in the slide-out navigation until it's closed.\nThe disclosure expands into an area of the page containing no other content. Many pages are designed with wide margins, providing significant white space into which new content can be opened. Many chatbots and toast notifications are designed to 'slide up' into the right unpopulated side of a page. Where authors are careful to ensure content is not obscured at each breakpoint in a responsive design, no obscuring of other operable content need occur.\nWhen focus leaves the additional content, the additional content is automatically hidden or collapsed, or the content can be hidden or collapsed by use of a dedicated keyboard command (for example, the Escape key.) This is very similar to patterns discussed previously under Non-persistent opened information. A distinguishing factor can be that the user's last point of interaction in the disclosure is preserved (it persists) even though it may be hidden until a user returns. Some trees and left navigation patterns behave this way.\n\nIn recognition of more complex interfaces and user needs there is a note: Content opened by the user may obscure the component receiving focus. If the user can bring the item with focus into view using a method without having to navigate back to the user-opened content to dismiss it, this criterion would be passed. For example, keyboard actions that may allow the item with focus to be revealed include:\n\nusing the Escape key to dismiss the obscuring content;\nusing keys to scroll the content in the viewport to reveal the item with focus;\nissuing a key to move between overlays.\n\nFor example:\n\nA user opens a chat interface, which is a popover non-modal dialog. This results in some content of the underlying page being fully obscured. The user navigates away from the chat interface by use of the tab key, focusing onto a link that has been fully obscured by the dialog. The user presses the Escape key to close the chat interface, which un-obscures the link.\nA user expands a fixed-position page feedback component at the bottom of a Web page. They then use their keyboard to navigate to a link that's fully obscured by the expanded component and press the down arrow or space key on their keyboard to scroll the content on the page, un-obscuring the link.\nA user opens a web-based multi-user authoring application. An overlay appears displaying a list of people who have contributed to the document. The user tabs through the list of contributors and activates one of them. The application displays a new overlay, which obscures the first one, that displays that person's recent contributions. The user presses the F6 key to toggle the stacking order of the two overlays.\nModal dialogs\n\nA properly constructed modal dialog will always pass this SC. Even if it appears directly on top of an item with focus, the dialog takes focus on appearance, and thus the item receiving focus -- the dialog or one of its components -- is visible. A properly constructed modal maintains that focus and prevents interaction outside the modal until it is dismissed.\n\nA dialog-like overlay that does not take focus on appearance and does not either constrain interaction to the overlay or dismiss itself on loss of focus (thus allowing focus to exit into the content behind it) will be at risk of failing this SC, where it is positioned such that it can obscure other focusable items.",
      "benefitsText": "Benefits\nSighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on a keyboard or on devices which use the keyboard interface, including speech input, sip-and-puff software, onscreen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.\nPeople with limited or low vision, who may primarily user a pointer for screen orientation and repositioning, nonetheless benefit from a visible indication of the current point of keyboard interaction, especially where magnification reduces the overall viewing portion of the screen.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-minimum.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.12 隠されないフォーカス (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ユーザインタフェース コンポーネントがキーボードフォーカスを受け取るとき、コンテンツ制作者が作成したコンテンツによって、そのコンポーネントのどの部分も隠されることがない。\n\n    \n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the item receiving keyboard focus is always visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.\n\nTypical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can hide the item receiving focus, along with its focus indicator.\n\nA notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it partially covers a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.\n\nAnother form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. This form of obscuring is not in scope for this Success Criterion. While less than 100 percent opacity is not causing the component to be visually hidden, such semi-opaque overlaps may cause a failure of 2.4.11 Focus Appearance. When a focus indicator can be covered by a semi-opaque component, the the focus indicator should be assessed against 2.4.11. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.",
      "benefitsText": "Benefits\nSighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on devices which use the keyboard interface, including speech input, sip-and-puff software, on-screen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.\nPeople with limited or low vision but who rely upon a pointing device (for viewport orientation and repositioning) benefit from a clearly visible indication of the current point of keyboard interaction, especially where magnification reduces the overall useable portion of content.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to more easily discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-enhanced.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.13 フォーカスの外観",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    キーボードのフォーカスインジケータが視覚的に表示される場合、フォーカスインジケータの領域が以下の全てを満たす。\n    \n        フォーカスされていないコンポーネント又はサブコンポーネントの、太さ 2 CSS ピクセルの外周の領域と同等以上の大きさである。かつ、\n        フォーカスされている状態とフォーカスされていない状態との間で、同一ピクセルに少なくとも 3:1 のコントラスト比がある。\n    \n\n    例外:\n    \n      フォーカスインジケータがユーザエージェントによって決定され、かつコンテンツ制作者が調整できない場合。又は、\n        コンテンツ制作者がフォーカスインジケータ及びそのインジケータの背景色を変更していない場合。\n    \n    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t注記 1ユーザインタフェースコンポーネント又はサブコンポーネントとして認識されるもの (輪郭又は大きさを決定づけるもの) は、その視覚的提示に依存する。視覚的提示には、コンポーネントの可視コンテンツ、ボーダー、及びコンポーネント固有の背景が含まれる。コンポーネントのコンテンツ、背景、又はボーダーの外側にある、影及びグロー効果は含まれない。\n\n    注記 2フォーカスインジケータを受け取ることができるサブコンポーネントの例としては、開いたドロップダウンメニューのメニュー項目、グリッド内のフォーカス可能なセルなどがある。\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t注記 3コントラストは、(HTML、CSS、及び SVG のような) 技術の中で定義された色を基に計算できる。その際、ユーザエージェントの高解像度化及びアンチエイリアスによって変更されたピクセルは無視できる。\n\n ",
      "intentText": "Intent\n\nThe purpose of this Success Criterion is to ensure a keyboard focus indicator is clearly visible and discernible. Focus Appearance is closely related to 2.4.7 Focus Visible and 1.4.11 Non-text Contrast. Focus Visible requires that a visible focus indicator exists while a component has keyboard focus; Focus Appearance defines a minimum level of visibility. Where Non-text Contrast requires a component to have adequate contrast against the background in each of its states, Focus Appearance requires sufficient contrast for the focus indicator itself.\n\nFor sighted people with mobility impairments who use a keyboard or a device that utilizes the keyboard interface (such as a switch or voice input), knowing the current point of focus is very important. Visible focus must also meet the needs of users with low vision, who may also rely on the keyboard.\n\nA keyboard focus indicator can take different forms. This Success Criterion encourages the use of a solid outline around the focused user interface component, but allows other types of indicators that are at least as large.\n\nThis Understanding document will elaborate on the minimum area requirement, color contrast requirements, and finally list some user agent exceptions.\n\nMinimum area\n\nThe first part of the Success Criterion specifies a minimum area for the focus indicator:\n\nis at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component\n\nThis only specifies a minimum area for the focus indicator. It does not require that the focus indicator literally be a 2 CSS pixel thick outline, only that the indicator be at least that large.\n\nHowever, the simplest way to meet the size requirement is to use a focus indicator which is a solid 2 CSS pixel thick perimeter.\n\nNote\n\nA CSS pixel is what developers use in CSS declarations like “width: 200px”. It is device-independent and not to be confused with device pixels which vary depending on the physical pixel density.\nThe rest of this document notates CSS pixels as “px”.\n\nUsing a solid outline\n\nThe easiest and most common way to meet this requirement is to use a solid outline around the component. The outline must be at least 2px thick. The following illustration shows a minimally thick focus indicator, where a 2px thick band of white pixels making up the page background around an example button have been altered to black.\n\nFigure 1 Passes: The focus indicator is a solid 2px thick outline.\n\nFor non-rectangular components, the \"perimeter\" definition allows authors to use either of the following types of outline:\n\na line which solidly encloses a shape, or\na line which solidly encloses the minimum bounding box of a shape\n\nFor example, a star-shaped button may use either a focus indicator that follows the shape of the star or a focus indicator that follows the bounding box of the star. In the following examples, the same three stars have already been selected, and focus is on the third star. The first example uses a focus indicator which matches the star shape of the focused star. The second uses a rectangular indicator.\n\nFigure 2 Passes: a solid outline indicator surrounds the third of five stars.\nFigure 3 Passes: a solidly bound focus rectangle encloses the third of five stars.\n\nOffsetting indicators slightly from the focused component, as in the examples above, is not required to meet the minimum area requirement of the success criterion, but it can help make indicators more visible. In CSS, the outline and outline-offset properties are commonly used to achieve this.\n\nThe smallest possible 2 CSS pixel thick indicator that is still a \"perimeter\" is a solid line that appears inside the component against the component's outer edge, for example by using a CSS border property. Indicators that are inset further within the component (not directly against the component's outer edge) need to be thicker than 2 CSS pixels to meet the minimum size requirement.\n\nFigure 4 All four of these example focus indicators are 2px solid lines. The \"outset\", \"outline\", and \"border\" indicators pass. The \"inset\" indicator does not meet the minimum area requirement and fails; it would need to be at least 3px thick to pass.\n\nNote that different Non-text Contrast requirements may apply depending on whether the focus indicator is offset from, inset into, or against the edge of the component. See the Relationship with Non-text Contrast section below.\n\nOther indicator shapes\n\nThis Success Criterion does not require that focus indicators be solid outlines. Other shapes may be used so long as they meet the minimum area requirement.\n\nThe minimum area of the focus indicator for a control is the area of a 2 CSS pixel thick perimeter of the control (or its minimum bounding box) in the control's unfocused state. For example, if a control is a rectangle 90px wide and 30px tall, the area of a 2 CSS pixel thick perimeter is difference between the areas of:\n\nA 92px by 32px rectangle (1px larger on all sides), and\nA 88px by 28px rectangle (1px smaller on all sides)\n\nThis results in a minimum area of (92px * 32px) - (88px * 28px) = 480px2.\n\nSome general formulas for 2 CSS pixel thick perimeters of common shapes are:\n\nRectangle with width w and height h\n4h + 4w\nCircle with radius r\n4𝜋r\nRounded rectangle with width w, height h, and border radius r\n4h + 4w - (16 - 4𝜋)r\n\nNote\n\nIf you need to use complex mathematics to work out if a focus indicator is large enough, it is probably a sign that you should use a larger indicator instead. The bigger the visible change when an item receives focus, the easier it is for someone to see.\n\nThe following 2 examples use a 90px wide by 30px tall button, with a minimum area requirement of 480px2:\n\nFigure 5 Passes: the inner outline is inset slightly from the outer edge of the component, but compensates for this by being 3px thick. It has an area of 612px2, which exceeds the 480px2 minimum.\nFigure 6 Passes: the indicator rectangles on either side of the focused button are each 9px wide by 28px tall. In total, they are 504px2, which just barely meets the 480px2 minimum.\n\nNote\n\nPrefer using focus indicator techniques that scale with both the width and height of the focused control. Otherwise, if controls change size across different variations of a page (for example, in a responsive design), the indicator might meet the area requirement in some variations but not others. For example, in the above figure, if the width of the two highlight rectangles did not scale as the button grew wider, it would stop meeting the minimum area requirement if the button needed to grow any wider to accomodate a longer button label.\n\nAnother way of achieving the area requirement is to alter the appearance of the entire component, for instance by changing its color – provided that the new color has a contrast ratio of at least 3:1 against the original color. This can be effective in a set of closely placed buttons. The following example demonstrates this with 5 rating stars; the center star is filled in with a darker color to indicate focus. However, it is much more difficult to detect such a focus indicator when components are not near each other and so cannot be easily compared. For users using magnification, even components relatively close together may be difficult to compare, so it is not considered a best practice.\n\nFigure 7 Passes: a color change applies to the whole third star to indicate focus.\nInline links\n\nIf an inline link is broken over multiple lines, some methods of creating a focus indicator create different results by browsers. CSS outline separately surrounds each part of a link that breaks across multiple lines. It is by far the most common CSS technique for focus indication, and produces a result that satisfies the minimum bounding box definition since each part is solidly bound. CSS border will split the perimeter across the parts of the link, which results in an unenclosed border for each line of the link. The minimum bounding box definition states that link focus can be assessed as if the link was all on one line, so a 2px thick border is also considered to meet the minimum area requirement. Therefore, where the contrast requirements are met, each of these methods can produce a sufficient focus indicator.\n\nFigure 8 Passes: the CSS outline property solidly bounds each part of the link completely, so it meets the definition of a perimeter.\nFigure 9 Passes: Although the CSS border on a multi-line link does not enclose the separate parts of the link, the minimum bounding box definition allows it to be assessed as if it was on a single line, so it also qualifies as a perimeter.\nChange of contrast\n\nThe second part of the Success Criterion's indicator requirements states that an area of the indicator:\n\nhas a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states\n\nThis requirement measures the change of contrast between the same pixels in different states. This is different from the Text Contrast and Non-text Contrast Success Criteria, which measure the contrast between different adjacent pixels in a single state at a time.\n\n3:1 is the minimum allowable change-of-contrast ratio, but the greater the change of contrast between states, the easier it is for users to see the focus indicator. Authors are encouraged to make the change-of-contrast ratio as great as possible.\n\nThe following illustration shows a minimally contrasting focus indicator, where some of the white pixels making up the page background have been altered to a mid-grey that has a 3:1 contrast ratio with the original white. Authors are encouraged to exceed the minimum focus appearance. For instance, the dark blue lines in figures 2 and 3 are much more visible.\n\nFigure 10 Passes: Two buttons in the shape of a star, with the second surrounded by a focus indicator whose pixels contrast 3:1 between focused (light grey) and unfocused (white) states.\n\nWhen a component changes to include a focus indicator, that change can be measured as a change of color contrast. For example, if a yellow outline is added to a button on a blue background, the change of color is from blue to yellow. This change can be measured whether the focus indicator is on the background around the component, or the background within the component.\n\nFigure 11 Passes: adding a yellow outline to a link is a change of color from blue to yellow. That change has a contrast ratio of 12:1.\n\nIf a control receiving focus changes its background (fill color) to a color that contrasts less than 3:1 with the original background, that would not pass the change of contrast.\n\nFigure 12 Fails: the second link has a dark-grey (#555) which fails this Success Criterion because the change from black-background to dark-grey background does not meet 3:1.\n\nIf the background change is sufficient, it is a method of passing the criterion.\n\nFigure 13 Passes: the second link has a white background (#fff) which passes this Success Criterion because the change from black-background to white-background meets 3:1.\nPartially contrasting indicators\n\nIt is not necessary for the entire focus indicator to have a 3:1 change of contrast. It is sufficient for just a part of the indicator to meet the change of contrast requirement, so long as the contrasting part of the indicator meets the minimum area requirement.\n\nFigure 14 Passes: The black part of the indicator meets 3:1 contrast with the white background, but the gray part does not. The black part is 2px thick, so it meets the minimum area requirement on its own and the gray part can be ignored.\nFigure 15 Fails: The indicator as a whole is 2px thick, but the part of it that has sufficient change-of-contrast is only 1px thick. The part of the indicator with sufficient change-of-contrast does not meet the minimum area requirement.\n\nWhen calculating whether a focus indicator meets the minimum area requirement, only the part of the indicator which meets the change-of-contrast requirement should be included in the calculation.\n\nGradients\n\nIf a focus indicator has a gradient, the principle is to measure the contrast of the changed area, and ignore any part of the gradient which has less than a 3:1 change-of-contrast ratio.\n\nFigure 16 When a gradient is used on a focus indicator, the measure of surface area should only include the area that has changed enough to meet the 3:1 contrast ratio.\n\nIf you eliminate the area which has less than 3:1 change-of-contrast, you can calculate the area of the remaining parts of the indicator to determine whether the indicator meets the minimum area requirement.\n\nFigure 17 Passes: the same focused button with the non-contrasting areas removed. The contrasting area is 6px thick along most of the bottom edge and 3-4px thick on the left and right edges, which is enough to meet the minimum area requirement.\n\nNote\n\nSome of the examples in this document are screen-captured images of elements. Due to loss of resolution in these images, the actual pixel color may not match the original. As such, they are intended to be used for illustrative purposes, and should not be inspected on a pixel-by-pixel basis for sufficient contrast.\n\nSome designs have pages with a non-solid background image covering the whole (or part) of the page or make use of parallax scrolling effects which result in a near-infinite number of color combinations if a page is scrolled and/or changes are made to the viewport size.\n\nIf the contrast of background colors that change are close enough to need to be tested for each combination then they would likely not meet the user need of people with low vision in certain scroll combinations and would likely fail in certain combinations as well. In these cases it would be an easy solution to use a two-color focus indicator or some other mechanism to indicate focus such as a solid box with a border to guarantee there is sufficient contrast across variations of background images or background gradients.\n\nIt is possible to use visual patterns such as strips switching places to disguise a change of focus indicator. However, this is not considered a visible indicator.\n\nRelationship with Non-text Contrast\n\nFocus indicators are visual information required to identify a state of a user interface component. That means that they are subject to 1.4.11 Non-text Contrast, in addition to 2.4.13 Focus Appearance.\n\nIn combination with 2.4.7 Focus Visible, 1.4.11 Non-text Contrast requires that the visual focus indicator for a component must have sufficient contrast against the adjacent colors when the component is focused, except where the appearance of the component is determined by the user agent and not modified by the author.\n\nThe difference between the contrast requirements in Focus Appearance and Non-text Contrast is:\n\nFocus Appearance requires that focus indicators have a change of contrast between focused and non-focused states.\nNon-text Contrast requires that focus indicators have adjacent contrast between the indicator (in the focused state) and adjacent non-indicator colors.\nFigure 18 This example passes Focus Appearance but fails Non-text Contrast; there is insufficient adjacent contrast between the focus indicator and the adjacent colors.\nFigure 19 This example passes Non-text Contrast but fails Focus Appearance; there is insufficient change of contrast between the focused and unfocused states.\n\nAdditionally, Non-text Contrast does not establish any size requirement and has slightly different rules for when exceptions are allowed.\n\nSee the Relationship with Focus Visible section of Understanding 1.4.11 Non-text Contrast for more details and examples.\n\nComponent keyboard focus\n\nThe preamble to this Success Criterion is \"When a user interface component has keyboard focus...\" The keyboard focus is the point of interaction for someone using a keyboard. For environments with a keyboard-operable interface, the keyboard focus can be moved around the interface in order to interact with different components. Whichever component is being interacted with has focus.\n\nWCAG defines user interface component as \"a part of the content that is perceived by users as a single control for a distinct function.\" Because different users may perceive controls differently, there is a potential for some variation when interpreting what constitutes both a single control and a distinct function. This is particularly the case when something visually presents in a way that may differ from how it is programmatically created under the covers. Where there is not a native HTML component upon which to base designs, there can be great variations in how the components and their focus indicators are portrayed. Further, some components have sub-components that can take focus, such as the menu items on a menu.\n\nNonetheless, consistent results from different testers were obtained for this Success Criterion by using the focus indicator itself as the gauge of what constitutes the component being interacted with. For complex components, the three typical focus indicators are as follows:\n\nFocus indicator around only the whole component\nFocus indicators around both the component and subcomponent\nFocus indicator around only the subcomponent\n\nEach of these will be discussed, using a tablist as a familiar complex component.\n\nFocus indicator around only the whole component\nFigure 20 A tablist with a focus indicator around only the whole.\n\nWhen the focus indicator is shown only around the whole tablist, the user is guided to considering the tablist as a single user component. The tab items within it are visually distinguished between selected and unselected states (and visual indicators of selection state must meet the criteria given in 1.4.11 Non-text Contrast).\n\nHaving a focus indicator only around the whole is possible where there is no need to have a selected sub-component while another sub-component has focus. For a tablist which synchronizes its tab panel content with whatever tab is active, only one tab item can be selected at a time, and since whatever tab is selected is considered active, a separate focus indicator is redundant.\n\nResult: the group focus indicator must meet the requirements of this Success Criterion.\n\nA radio button group and a star-rating widget, which each use only a whole-component focus indicator, provide working examples of different complex components that pass the primary requirements of this Success Criterion. In the star ratings example, users can increment the rating by 1/2 stars. Not only is a focus indicator for each 1/2 star unnecessary, but it would actually be difficult to achieve without making the interaction confusing.\n\nFocus indicators around both the component and subcomponent\n\n\nFigure 21 The same tablist in two states. In the first, focus is around both the tablist and the currently selected tab; in the second, focus is around both the tablist and an unselected tab.\n\nFor a tablist which does not keep its tab panel content synchronized with whatever tab is selected, there needs to be a focus indicator for the tab item subcomponent. This is because the tab item with focus may be different than the selected item.\n\nThe user can navigate to the tablist, which in this implementation has a focus rectangle around the whole tablist as well as one around a tab item (conventionally the item that is currently selected). The focus around the whole is helpful in cueing a keyboard user that this is a complex component that has its own interaction. The user can then move focus between the unselected and selected tab items -- each of which in turn has its own focus indicator -- before activating one, which then makes it selected as well as focused, and updates the tab panel to match.\n\nIn this scenario, either the group focus indicator or the sub-component indicator must meet the requirements of this Success Criterion. To avoid being overly prescriptive, the Success Criterion allows authors to choose which makes the most sense. Generally, if a sub-component focus is necessary, it should be assessed instead of the group indicator.\n\nResult: the focus indicator for the tab item meets the requirements of this Success Criterion. The tablist focus indicator does not need to meet the requirements.\n\nA slider to pick colors provides a working example of a different complex component that predominantly shows focus for the subcomponent. In this case, the thumb slider sub-component has a focus indicator of sufficient size and contrast to pass the sufficient area calculation. There is also a subtle focus around the whole slider component, but it does not need to be assessed to pass this Success Criterion.\n\nFocus indicator around only the subcomponent\nFigure 22 The same tabs as in the prior set, but the focus indicator around the whole is removed.\n\nThe same unsynchronized tablist can also be implemented as something which only shows focus on the tab items and not on the whole. The behaviour is the same as in the prior example, but there is never a focus indicator placed around the tablist. This interaction is acceptable, but it is not best practice since it demands more understanding from the user with less information. For example, some visual cues for the tablist and tab items (and tab panel) may not be clear. As well, keyboard users may not initially understand the expected keyboard interaction.\n\nResult: the focus indicator for the tab item must meet the requirements of this Success Criterion, judging focus with both selected and unselected tab items.\n\nA functional example of sub-component-only tab focus has an indicator that is large enough (at least four times the shortest side) with sufficient contrast to pass the focus area language of this Success Criterion.\n\nWhere something with focus is not a user interface component\n\nSome pages contain very large editing regions, such as web implementations of word processors and code editors. Unlike a textarea element, which is a user interface component, these large editing regions do not typically meet the definition of user interface components; they are not \"perceived by users as a single control for a distinct function.\" Providing focus indicators around such editing regions may still be beneficial to some; however, where the region is not perceived as a single control, it is not covered by this Success Criterion. The web page will still need to provide a insertion point (caret indicator) in such editing regions in order to meet the requirements of 2.4.7 Focus Visible.\n\nSome non-operable elements can take focus (such as a heading element that is the target of a skip link). However, the preamble of this Success Criterion refers to user interface components; it is only when the element with focus is operable by keyboard that this Success Criterion applies.\n\nExceptions\n\nThere are two situations where the focus appearance does not need to be assessed:\n\nthe focus indicator cannot be adjusted by the author\nthe author has not modified the effects of the user agent default\nFirst exception: the focus indicator cannot be adjusted by the author\n\nThe focus indicator is determined by the user agent and cannot be adjusted by the author \n\nSome components or technologies may not allow the author to adjust the focus indicator. This is the case with HTML select elements (both single and multi-select), where the visual treatments for selection and focus cannot be adjusted by the author. In this case the Success Criterion does not apply.\n\nFigure 23 Passes: The user agent's default select element presentation cannot be modified by the author, so it passes regardless of the quality of the focus indicator\nSecond exception: the default indicator and background are not modified\n\nThe focus indicator and the indicator's background color are not modified by the author\n\nIf the focus indicator and the background behind the focus indicator are not modified by the author, the Success Criterion does not apply.\n\nThe intent of this exception is to reduce burden on authors by allowing them to rely on the default indicators provided by user agents (browsers). If all user agents provided good focus indicators, authors would be able to concentrate efforts on other accessibility considerations. Unfortunately, browser default focus indicators vary by component, browser, and across devices and operating systems, and the default focus indicators in some browsers can be difficult to see (such as a 1px dotted outline). For this reason, most authors override browser defaults in order to overcome these deficiencies and create a more uniform user experience, regardless of browser.\n\nSome browser makers are improving their default focus indicators to make them more visible. As more browsers adopt defaults that meet the primary bullets of this Success Criterion, authors will be able to achieve improved focus indicators without customization.\n\nModifying the focus indicator background\n\nBrowser default focus indicators can be made more difficult to see if the author modifies the pixels directly adjacent to the indicator (commonly referred to as its background), such as by positioning a component on top of an image or gradient background, or altering the page's default white background color, for instance using a blue background in combination with a browser's blue default indicator. For this reason, where the author alters the pixels directly adjacent to the default focus indicator, the user agent exception does not apply, and the author will need to verify they meet the size and contrast requirements of this Success Criterion.\n\nNote\n\nAltering the body element's background-color attribute is one way of altering the pixels directly adjacent to the indicator in most implementations. However, specifying a value of white (#FFFFFF) does not nullify this exception since, as established in the third note of the contrast ratio definition, the default (\"unspecified\") color is assumed to be white.\n\nAs well, if the browser provides an indicator within a component by default, then authors can potentially reduce the visibility by changing the component color (which in such a scenario is the background color for the focus indicator). For example, if the default indicator on a button uses a colored inner border, authors can negatively affect the focus appearance by making the button or its unfocused border color a similar-luminosity color. For this reason, this user agent exception can only be met if the author both does not modify the default focus indicator and does not modify its background.\n\nFigure 24 Fails: The middle button is focused using a browser's default focus indicator, but it is very difficult to tell which button is focused because the custom blue border on the unfocused button uses a similar color.",
      "benefitsText": "Benefits\nThis Success Criterion helps anyone who relies on the keyboard to operate the page, by letting them visually determine the component on which keyboard operations will interact at any point in time.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.1 ポインタのジェスチャ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   マルチポイント又は軌跡ベースのジェスチャを使って操作する機能はすべて、軌跡ベースのジェスチャなしのシングルポインタで操作することができる。ただし、マルチポイント又は軌跡ベースのジェスチャが必要不可欠である場合は例外とする。\n   \t\t\t\t\t\n   注記この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (ユーザエージェントや支援技術の操作に必要なアクションには適用されない)。\n\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that content can be controlled with a range of pointing devices, abilities, and assistive technologies. Some people cannot perform gestures in a precise manner, or they may use a specialized or adapted input device such as a head pointer, eye-gaze system, or speech-controlled mouse emulator. Some pointing methods lack the capability or accuracy to perform multipoint or path-based gestures.\n\nA path-based gesture involves an interaction where not just the endpoints matter, but how the pointer moves between these points.\n\nIf the gesture is only recognised if the user moves in a (mostly) straight line from the start point to the end point, it is an example of a path-based gesture.\n\nFigure 1 A path-based gesture where pointer movement is only allowed in a straight line from the start-point to the end-point. If the user strays from the straight directional path, the gesture is not recognised, has no effect, or is aborted.\n\nIf going through an intermediate point (usually near the start of the gesture) affects its meaning, then it is a path-based gesture. The user engages a pointer (starting point), carries out a movement that goes through at least one intermediate-point before disengaging the pointer (end point). The intermediate point defines the gesture as requiring a specific path, even if the complete path is not defined.\n\nFigure 2 A path-based gesture involves starting a pointer movement that goes through at least one intermediate point before the end-point. The end-point may be a continuation, or allow for various movements.\n\nExamples of path-based gestures include swiping, sliders and carousels dependent on the direction of interaction, and other gestures which trace a prescribed path such as drawing a specific shape. Such paths may be drawn with a finger or stylus on a touchscreen, graphics tablet, or trackpad, or with a mouse, joystick, or similar pointer device.\n\nDragging is a movement where the user picks up an object with a pointer (such as mouse cursor or a finger) and moves it to some other position. This movement from start point to end point does not require the user to follow any particular path or direction. Dragging is therefore not path-based. In contrast, a path-based pointer gesture requires the traversal of an intermediate point, which is a technical way of expressing that the directionality and possibly speed of the gesture communicates a particular command to the system. Dragging motions are covered in Success Criterion 2.5.7: Dragging.\n\nFigure 3 A free-form gesture does not require any particular path before the end-point, only the start and (optionally) the end point matter. This is not path-based\n\nNote\n\nAny movement of a pointer could be difficult or impossible to use for someone who cannot perform precise movements, therefore alternative forms of interaction are always recommended. This success criterion is scoped to path-based gestures as it may be difficult or impossible to provide an alternative for free-form gestures.\n\nExamples of multipoint gestures include a two-finger pinch zoom, a split tap where one finger rests on the screen and a second finger taps, or a two- or three-finger tap or swipe. Users may find it difficult or impossible to accomplish these if they type and point with a single finger or stick.\n\nAuthors must ensure that their content can be operated without multipoint or path-based gestures. Multipoint or path-based gestures can be used so long as the functionality can also be operated by another method, such as a tap, click, double tap, double click, long press, or click & hold.\n\nThis Success Criterion applies to gestures in the author-provided content, not gestures defined by the operating system, user agent, or assistive technology. Examples of operating system gestures would be swiping down to see system notifications and gestures for built-in assistive technologies (AT). Examples of user agent-implemented gestures would be horizontal swiping implemented by browsers for navigating within the page history, or vertical swiping to scroll page content.\n\nThere are times when a component requires a path-based gesture for touch screen devices but not with a mouse. Taking an example of a generic slider:\n\nUsing a mouse: If the user clicks on the thumb control of the slider and moves vertically, the slider will respond by moving to the right or left, even if the movement is mostly upwards. There will be no page scrolling as a result of the vertical movement as long as they drag with focus on the slider. Therefore, the slider does not require a path-based gesture with mouse pointer.\nUsing a touch-screen: If the user puts their finger on the thumb control of the slider and moves upwards more than sideways, the slider may not respond because the browser takes control of the swipe and interprets it as a scroll, and will move the page up and down. Moving left or right on the slider thumb engages the slider and then the user can vary their vertical movement. This implementation has the 3-point requirement to work with a finger on a touch screen device so is a path-based gesture.\n\nAs touch screen devices can apply default gestures it is important to test with them if you are unsure whether a particular component does require a path-based gesture.\n\nBrowsers on a touch screen device generally provide some default gestures that impact whether a path-based gesture is needed. For example, a web browser on a touch-screen devices might detect a vertical gesture and scroll the page. If a user places their finger on a slider thumb and moves up (to scroll down) that might not activate the slider (depending on implementation). If the user moves horizontally first then the slider could capture that gesture and ignore vertical movement, resulting in a path-based gesture. If you include touch-screen devices as accessibility supported then these types of interaction need testing with a touch screen as using a mouse in a similar way would not trigger the same browser behavior.\n\nThis Success Criterion does not require all functionality to be available through pointing devices, but if it is available to pointer devices then it should not require path-based gestures. While content authors generally need to provide keyboard commands or other non-pointer mechanisms that perform actions equivalent to complex gestures (see Success Criterion 2.1.1 Keyboard), this is not sufficient to conform to this Success Criterion. That is because some users rely entirely on pointing devices, or find simple pointer inputs much easier to perform and understand than alternatives. For example, a user relying on a head-pointer would find clicking a control to be much more convenient than activating an on-screen keyboard to emulate a keyboard shortcut, and a person who has difficulty memorizing a series of keys (or gestures) may find it much easier to simply click on a labeled control. Therefore, if one or more pointer-based mechanisms are supported, then their benefits should be afforded to users through simple, single-point actions alone.\n\nSingle pointer operations include taps and clicks, double-taps and double-clicks, long presses, swiping, dragging, and path-based gestures. Gestures such as \"pinch to zoom\" or two-finger swipes are multipoint gestures, as they require two or more pointer inputs - in this case, two fingers on a touchscreen.\n\nAn exception is made for functionality that is inherently and necessarily based on complex paths or multipoint gestures. For example, entering your signature may be inherently path-based (although acknowledging something or confirming your identity need not be).\n\nThis Success Criterion does not apply to gestures that involve dragging in any direction because only the start and end points matter in a dragging operation. However, such gestures do require fine motor control. Authors are encouraged to provide non-dragging methods, for instance, a drag and drop operation could also be achieved by selecting an item (with a tap or keyboard interaction) and then selecting its destination as a second step.",
      "benefitsText": "Benefits\n\nUsers who cannot (accurately) perform path-based pointer gestures - on a touchscreen, or with a mouse - will have alternative means for operating the content.\n\nUsers who cannot perform multi-pointer gestures on a touchscreen (for instance, because they are operating the touchscreen with an alternative input such as a head pointer) will have a single-pointer alternative for operating the content.\n\nUsers who may not understand the custom gesture interaction intended by the author will be able to rely on simple, frequently used gestures to interact. This can be especially beneficial for users with cognitive or learning disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pointer-gestures.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.2 ポインタのキャンセル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   シングルポインタを使って操作できる機能は、以下の要件の少なくとも 一つを満たす。\n   \t\t\t\t\t\n   \n   \n   ダウンイベントがない \n     機能を実行する目的でポインタのダウンイベントを使用していない。\n      \t\t\t\t\t\t\n   中止又は元に戻すことができる \n     機能の完了にはアップイベントを使用し、かつ機能の完了前に中止する、又は機能の完了後に元に戻すためのメカニズムが利用できる。\n      \t\t\t\t\t\t\n   アップイベントで反転 \n     アップイベントによって、先のダウンイベントのすべての結果が反転する。\n      \t\t\t\t\t\t\n   必要不可欠\n     ダウンイベントによって機能を完了させることが必要不可欠である。\n      \t\t\t\t\t\t\n   \n   注記 1キーボードまたはテンキーパッドのキープレスをエミュレートする機能は必須と考えられる。\n   \t\t\t\t\t\n  注記 2この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (ユーザエージェントや支援技術の操作に必要なアクションには適用されない)。\n\t\n",
      "intentText": "Intent\n\nThe intent of this success criterion is to make it easier for users to prevent accidental or erroneous pointer input. People with various disabilities can inadvertently initiate touch or mouse events with unwanted results. Each of the following subsections roughly aligns with the bullets of this Success Criterion, and outlines a means of allowing users to cancel pointer operations.\n\nUp-Event activation or completion\n\nThe most accessible way to incorporate pointer cancellation is to make activation occur on the up-event.\n\nUp-event activation refers to the activation of a target when the pointer is released. In a touchscreen interaction, when the finger touches a target, the up-event activation only occurs when the finger is lifted while still being within the target boundary. Similarly in mouse interaction, the up-event occurs when the mouse button is released while the cursor is still within the boundary of the initial target set when the mouse button was pressed.\n\nAuthors can reduce the problem of users inadvertently triggering an action by using generic platform activation/click events that activate functionality on the up-event. For example, the click event in JavaScript triggers on release of the primary mouse button, and is an example of an implicit up-event. Despite its name, the click event is device-independent and also works for touch and keyboard interaction.\n\nThe preference for up-events is implicit in the Success Criterion wording of the first bullet: The down-event of the pointer is not used to execute any part of the function. Authors meet the first bullet by using only the up-event.\n\nUp-Event Abort or Undo\n\nWhere the interaction is equivalent to a simple \"click\", up-event activation has a built-in ability to cancel. There is a distinction between when someone touches a screen and when they remove their finger. Similarly, in mouse interaction, there is a difference between pressing and releasing the mouse button. When activation occurs only as the pointer is released, users have the opportunity to Abort (cancel) the activation. Users who have difficulty accurately using a mouse or touchscreen benefit greatly from this basic behaviour. They normally receive visual feedback when an item is pressed. If they discover they have selected the wrong item, they can cancel the action by moving their pointer or finger away from the target before releasing.\n\nFor more complex interactions, such as drag and drop, the down- and up-events may initiate and end a series of actions to complete a process. For example, with drag and drop, the item may be:\n\nselected with a press (down-event),\nmoved to a new location, while still being depressed, and\nreleased (up-event) to conclude the drop action.\n\nIn such a complex action, the need for an Abort or Undo function increases. Designers may elect to confirm the move through something like a confirmation dialog or an undo button, giving the user the ability to Undo the process just completed. Alternatively, the ability to Abort the action can be achieved if, before completing step 3, the user returns the selected item to its original location and concludes the process there. If other parts of the screen disallow a move, the user can conclude the drag and drop there, effectively nullifying the operation.\n\nUp Reversal\n\nIn other interactions, the down-event may trigger a behaviour which can be reversed when the up-event concludes. Examples of this include press-and-hold actions such as where a transient popup appears (or a video plays) when the user presses on an object (down-event), but the popup (or video) disappears as soon as the user releases the pointer (up-event). Since the up-event reverses the preceding down event, the user is returned to their prior point, and has effectively cancelled the operation.\n\nDown-Event\n\nCompleting the function on the down-event is only permitted when it is essential that the up-event not be used.\n\nThe most prevalent essential down-event activation occurs in keyboard emulation. On a physical keyboard, keys by default activate on the down-event -- a letter appears when the key is pressed. If a software keyboard emulator tried to override this expected behaviour by making letters appear when the key is released, the behaviour would be unexpected and would adversely affect expected interaction.\n\nNote that a keyboard has a built-in Backspace or Delete button, which effectively provides an Undo option. Undo is not a requirement of the down-event Essential exception; however, providing an easy way for users to undo any action is a recommended practice (and may be a functional necessity), even where it is not a requirement of this Success Criterion.\n\nOther examples where the timing of an activation is essential and requires the down-event would be:\n\nAn activity that emulates a physical on-press trigger, such as when playing an on-screen piano keyboard. Activation on the up-event would significantly alter the desired behaviour.\nA program for shooting skeets where waiting for the \"up\" event would invalidate the precise timing necessary for the activation.",
      "benefitsText": "Benefits\nMakes it easier for all users to recover from hitting the wrong target.\nHelps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a control will be accidentally activated or an action will occur unexpectedly, and also ensures that where complex controls are activated, a means of Undoing or Aborting the action is available.\nIndividuals who are unable to detect changes of context are less likely to become disoriented while navigating a site.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pointer-cancellation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.3 ラベルを含む名前 (name)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n\t\n  ユーザインタフェース コンポーネントがテキスト又は文字画像を含むラベルを持つ場合、視覚的に提示されたテキストが名前 (name) に含まれている。\n\n  注記ベストプラクティスは、ラベルのテキストを名前 (name) の最初に使用することである。\n\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the words which visually label a component are also the words associated with the component programmatically. This helps ensure that people with disabilities can rely on visible labels as a means to interact with the components.\n\nMost controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the Accessible Name. Users typically have a much better experience if the words and characters in the visible label of a control match or are contained within the accessible name. When these match, speech-input users (i.e., users of speech recognition applications) can navigate by speaking the visible text labels of components, such as menus, links, and buttons, that appear on the screen. Sighted users who use text-to-speech (e.g., screen readers) will also have a better experience if the text they hear matches the text they see on the screen.\n\nNote that where a visible text label does not exist for a component, this Success Criterion does not apply to that component.\n\nWhere text labels exist and are properly linked to the user interface components through established authoring practices, the label and name will normally match. When they don't match, speech-input users who attempt to use the visible text label as a means of navigation or selection (e.g., \"move to Password\") will be unsuccessful. The speech-based navigation fails because the visible label spoken by the users does not match (or is not part of) the accessible name that is enabled as a speech-input command. In addition, when the accessible name is different from the visible label, it may function as a hidden command that can be accidentally activated by speech-input users.\n\nMismatches between visible labels and programmatic names for controls are even more of an issue for speech-input and text-to-speech users who also have cognitive challenges. Mismatches create an extra cognitive load for speech-input users, who must remember to say a speech command that is different from the visible label they see on a control. It also creates extra cognitive load for a text-to-speech user to absorb and understand speech output that does not match the visible label.\n\nIn order for the label text and accessible name to be matched, it is first necessary to determine which text on the screen should be considered a label for any given control. There are often multiple text strings in a user interface that may be relevant to a control. However, there are reasons why it is best to conservatively interpret the label as being only the text in close proximity.\n\nConventionally the label for user interface components is the adjacent text string. The typical positioning for left to right languages is:\n\nimmediately to the left of comboboxes, dropdown lists, text inputs, and other widgets (or in the absence of left-side labels, immediately above and aligned with the left edge of each input)\nimmediately to the right of checkboxes and radio buttons\ninside buttons and tabs or immediately below icons serving as buttons\n\nThe rationale for some of these conventions is explained in G162: Positioning labels to maximize predictability of relationships.\n\nIt is important to bias towards treating only the adjacent text as a label because liberal interpretations of what constitutes a text label can jeopardize the value of this Success Criterion (SC) by lessening predictability. Isolating the label to the single string in close proximity to the component makes it easier for developers, testers, and end users to identify the label targeted for evaluation in this SC. Predictable interpretation of labeling allows users of speech recognition technologies to interact with the element via its conventionally positioned label, and allows users of screen reading technologies to enjoy consistency between the nearby visible label and the announced name of the component.\n\nNote that placeholder text within an input field is not considered an appropriate means of providing a label. The HTML5 specification states The placeholder attribute should not be used as an alternative to a <label>. However, it is worth noting that \"label\" in that HTML5 statement is in code brackets and links to the label element. For the purposes of this Label in Name Success Criterion, \"label\" is not used in such a programmatic sense but is simply referring to a text string in close visual proximity to a component. As such, in the absence of any other nearby text string (as described in the preceding list), if an input contains placeholder text, such text may be a candidate for Label in Name. This is supported both through the accessible name calculation (discussed later) and from the practical sense that where a visible label is not otherwise provided, it is likely that a speech-input user may attempt to use the placeholder text value as a means of interacting with the input.\n\nText labels \"express something in human language\"\nSymbolic text characters\n\nFor the purposes of this SC, text should not be considered a visible label if it is used in a symbolic manner, rather than directly expressing something in human language as per the definition of text in WCAG. For example, 1.4.5 Images of Text describes considerations for \"symbolic text characters.\" In the images of text example \"B\", \"I\", and \"ABC\" appear on icons in a text editor, where they are meant to symbolize the functions for Bold, Italics, and Spelling, respectively. In such a case, the accessible name should be the function the button serves (e.g., \"Spell check\" or \"Check spelling\"), not the visible symbolic characters. A similar text editor is shown in the figure below.\n\nFigure 1 A detail of the rich text editor in Github, showing a variety of unlabeled icons, including icons resembling text characters.\n\nLikewise, where an author has used a greater-than symbol (\">\") to mimic the appearance of the right-facing arrow, the text does not convey something in human language. It is a symbol, in this scenario likely meant to mimic the icons used for a \"Play\" button or a \"Next\" arrow.\n\nPunctuation and capitalization\n\nThe use of punctuation and capitalization in labels may also be considered optional for the same reason. For example, the colon conventionally added at the end of input labels does not express something in human language, and capitals on the first letter of each word in a label do not normally alter the words' meaning. This is particularly relevant in the context of this SC, since it is primarily aimed at users of speech recognition; capitals and most punctuation are frequently ignored when a user speaks a label as a means of interacting with a control.\n\nWhile it is certainly not an error to include the colon and capitalization in the accessible name, a computed name of \"First name\" should not be considered a failure of \"First Name:\".\nFirst Name: \nLikewise, \"Next…\" visibly shown on a button could have \"Next\" as the accessible name. When in doubt, where a meaningful visible label exists, match the string exactly for the accessible name.\n\n\nMathematical expressions and formulae\n\nMathematical expressions are an exception to the previous subsection about symbolic characters. Math symbols can be used as labels; for example \"11×3=33\" and \"A>B\" convey meaning. The label should not be overwritten in the accessible name, and substitutions of words where a formula is used should be avoided since there are multiple ways to express the same equation. For example, making the name \"eleven multiplied by three is equivalent to thirty-three\" might mean a user who said \"eleven times three equals thirty-three\" may not match. It is best to leave the formulas as used in the label and count on the user's familiarity with their speech software to achieve a match. Further, converting a mathematical formula label into an accessible name that is a spelled-out equivalent may create issues for translation. The name should match the label's formula text. Note that a consideration for authors is to use the proper symbol in the formula. For instance 11x3 (with a lower or upper case letter X), 11*3 (with the asterisk symbol), and 11×3 (with the &times; symbol) are all easy for sighted users to interpret as meaning the same formula, but may not all be matched to \"11 times 3\" by the speech recognition software. The proper operator symbol (in this case the times symbol) should be used.\nA>B A=B A<B\n\nAccessible Name and Description Computation specification\n\nIt is important to understand how the accessible name is derived. The Accessible Name and Description Computation 1.1 and the HTML Accessibility API Mappings 1.0 describe how the accessible name is computed, including which attributes are considered in its calculation, and in what order of preference. If a component has multiple possible attribute values that could be used for its accessible name, only the most preferred of those values will be computed. None of the other, less preferred values will be part of the name. For the most part, existing established programmatic relationships between labels and controls are reinforced by the specification.\n\nOther text displayed on the screen that is correctly coded to meet 1.3.1: Info and Relationships is not normally factored into the calculation for the accessible name of a UI component without author intervention (via ARIA labeling techniques). The most common of these are:\n\nheadings and instructions\ngroup labels for sets of components (i.e., used with legend/fieldset or with role of group or radiogroup)\n\nSuch textual information may constitute part of the component's description. So from both a programmatic viewpoint, and from the conservative tactic of only considering a label to be \"adjacent text,\" neither headings, instructions, nor group 'labels' should normally be considered labels for the purpose of this Success Criterion.\n\nIt is important to note that the specification allows authors to override the name calculated through native semantics. Both aria-label and aria-labelledby take precedence in the name calculation, overriding the visible text as the accessible name even when the visible text label is programmatically associated with the control. For this reason, when a visible label already exists, aria-label should be avoided or used carefully, and aria-labelledby should be used as a supplement with care.\n\nFinally, aria-describedby is not included in the Accessible Name computation (instead it is part of the Accessible Description computation). By convention, text associated with a control through aria-describedby is announced immediately after the accessible name by screen readers. Therefore, the context of headings, instructions, and group labels can be provided through the accessible description to assist users of screen readers without affecting the experience of those who navigate using speech recognition software.",
      "benefitsText": "Benefits\nSpeech-input users can directly activate controls on a page with fewer surprising changes of focus.\nText-to-speech users will have a better experience because the labels that they hear match the visible text labels that they see on the screen.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.5 ターゲットのサイズ (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n  ポインタ入力のターゲットのサイズは、少なくとも 44 × 44 CSS ピクセルである。ただし、次の場合は除く:\n\n\t同等 \n  ターゲットと同等のリンク又はコントロールが同じページに 44 × 44 CSS ピクセル以上のサイズで存在する。\n\tインライン \n  ターゲットが文中、又はテキストブロック内に存在する。\n\tユーザエージェントのコントロール \n  ターゲットのサイズがユーザエージェントによって決定され、かつコンテンツ制作者によって変更されていない。\n\t必要不可欠 \n  そのターゲットを特定の方法で提示することが、伝達される情報において必要不可欠である。\n  \n   \n",
      "intentText": "Intent\n\nThe intent of this success criterion is to help users who may have trouble activating a small target because of hand tremors, limited dexterity or other reasons. If the target is too small, it may be difficult to aim at the target. Mice and similar pointing devices can be hard to use for these users, and a larger target will help them greatly in having positive outcomes on the web page.\n\nTouch is particularly problematic as it is an input mechanism with coarse precision. Users lack the same level of fine control as on inputs such as a mouse or stylus. A finger is larger than a mouse pointer, and generally obstructs the user's view of the precise location on the screen that is being touched/activated.\n\nThe issue can be further complicated for responsive/mobile sites which need to accommodate different types of fine and coarse inputs (e.g. a site that can be accessed both on a traditional desktop/laptop with a mouse, as well as on a tablet or mobile phone with a touch screen).\n\nWhile this criterion defines a minimum target size, it is recommended that larger sizes are used to reduce the possibility of unintentional actions. This is particularly relevant if any of the following are true:\n\nthe control is used frequently;\nthe result of the interaction cannot be easily undone;\nthe control is positioned where it will be difficult to reach, or is near the edge of the screen;\nthe control is part of a sequential task.",
      "benefitsText": "Benefits\nUsers who use a mobile device where touch screen is the primary mode of interaction\nUsers with mobility impairments, such as hand tremors\nUsers who find fine motor movements difficult\nUsers who access a device using one hand\nUsers with large fingers, or who are operating the device with only a part of their finger or knuckle\nUsers who have low vision may better see the target",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/target-size-enhanced.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.7 ドラッグ動作",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n  操作にドラッグ動作を用いる全ての機能は、ドラッグなしのシングルポインタで完遂できる。ただし、ドラッグが必要不可欠である、又はその機能がユーザエージェントによって決定され、かつコンテンツ制作者によって変更されない場合は除く。\n    注記この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (すなわち、これはユーザエージェント又は支援技術の操作に必要なアクションには適用されない)。\n   \n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure functionality that uses a dragging movement has another single pointer mode of operation without the need for the dexterity required to drag elements.\n\nSome people cannot perform dragging movements in a precise manner. Others use a specialized or adapted input device, such as a trackball, head pointer, eye-gaze system, or speech-controlled mouse emulator, which may make dragging cumbersome and error-prone.\n\nWhen an interface implements functionality that uses dragging movements, users perform four discrete actions:\n\ntap or click to establish a starting point, then\npress and hold that contact while...\nperforming a repositioning of the pointer, before...\nreleasing the pointer at the end point.\n\nNot all users can accurately press and hold that contact while also repositioning the pointer. An alternative method must be provided so that users with mobility impairments who use a pointer (mouse, pen, or touch contact) can use the functionality.\n\nThis requirement is separate from keyboard accessibility because people using a touch screen device may not use a physical keyboard. Keyboard specific interactions such as tabbing or arrow keys may not be possible when encountering a drag and drop control. Note, however, that providing a text input can be an acceptable single-pointer alternative to dragging. For example, an input beside a slider could allow any user to enter a precise value for the slider. In such a situation, the on-screen keyboard that appears for touch users offers a single-pointer means of entering an alphanumeric value.\n\nThis criterion does not apply to scrolling enabled by the user-agent. Scrolling a page is not in scope, nor is using a technique such as CSS overflow to make a section of content scrollable.\n\nRelationship to other requirements\n\nSuccess Criteria 2.1.1 Keyboard and 2.1.3 Keyboard (No Exception) require dragging features to be keyboard accessible. However, achieving keyboard equivalence for a dragging operation does not automatically meet this Success Criterion. It is possible to create an interface that works with dragging and keyboard controls that does not work using only clicks or taps. While many designs can be created for a dragging alternative which address both keyboard accessibility and operability by single pointer operation, the two requirements should be assessed independently.\n\nThis Success Criterion applies to dragging movements as opposed to pointer gestures, which are covered in Success Criterion 2.5.1 Pointer Gestures. Pointer gestures include directional path-based as well as multi-point gestures. In contrast, for dragging movements, only the start and end point of the movement matters, not the actual path.\n\nAdditional examples are selection rectangles that set the first x/y rectangle coordinate at the pointer position via a pointer down-event, and the second x/y coordinate, after a dragging movement, at the next up-event. A similar example is a connecting line drawn between two different items on the screen, as in an allocation test where users are required to draw a line between questions and corresponding answers. In these cases, the dragging movement requires an alternative way to accomplish the same action that does not rely on the dragging movement. For example, two separate single tap or click actions may define the rectangle coordinates or the start and end points of a connecting line.\n\nAlternatives for dragging movements on the same page\n\nWhere functionality can be executed via dragging movements and an equivalent option exists that allows for single-pointer access without dragging, this Success Criterion is passed. It does not have to be the same component, so long as the functionality is equivalent. An example is a color wheel where a color can be changed by dragging an indicator. In addition, text fields for the numerical input of color values allow the definition of a color without requiring dragging movements. (Note that a text input is considered device agnostic; although the purpose is to enter characters, text entry can take place through voice, pointer or keyboard.)\n\nDistinguishing dragging movements from path-based pointer gestures\n\nDragging movements covered in this Success Criterion are pointer interactions where only the start- and endpoints matter. Once the pointer engages with a target, the direction of the dragging movement does not factor into the interaction until the pointer disengages the target. Since the dragging movement does not have an intermediate point, the dragging movement can go in any direction. Path-based gestures are covered in Success Criterion 2.5.1 Pointer Gestures. For more details, refer to Understanding Success Criterion 2.5.1 Pointer Gestures",
      "benefitsText": "Benefits\nUsers who struggle with performing dragging movements can still operate an interface with a pointer interface.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/dragging-movements.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.8 ターゲットのサイズ (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ポインタ入力のターゲットのサイズは、少なくとも 24 × 24 CSS ピクセルである。ただし、次の場合は除く:\n    \n        間隔: 複数の小さなターゲット (24 × 24 CSS ピクセル未満のもの) が配置されており、それぞれの境界ボックスの中心に直径 24 CSS ピクセルの円があるとした場合に、その円が別のターゲットと重なる、又は別の小さなターゲットの円と重なることがない。\n        同等: その機能は、この達成基準を満たす同一ページ上の別のコントロールを通じて達成できる。\n        インライン: ターゲットが文中に存在する、又は、そのサイズがターゲット以外のテキストに対する行の高さによって制約されている。\n        ユーザエージェントのコントロール: ターゲットのサイズがユーザエージェントによって決定され、かつコンテンツ制作者によって変更されていない。\n        必要不可欠: そのターゲットを特定の方法で提示することが、必要不可欠である、又は伝達される情報に対して法的に要求されている。\n    \n    注記 1ターゲット内の位置に基づいて空間的に値を選択できるターゲットは、この達成基準の目的上、一つのターゲットとみなされる。例としては、スライダー、色のグラデーションを表示するカラーピッカー、カーソルを置いた位置を編集できる領域などがある。\n    注記 2インラインのターゲットの場合、行の高さはテキストのフローに対して垂直方向として解釈されるべきである。例えば、縦書きで表示される言語では、行の高さは水平方向となる。\n\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help ensure targets can be easily activated without accidentally activating an adjacent target. Users with dexterity limitations and those who have difficulty with fine motor movement find it difficult to accurately activate small targets when there are other targets that are too close. Providing sufficient size, or sufficient spacing between targets, will reduce the likelihood of accidentally activating the wrong control.\n\nDisabilities addressed by this requirement include hand tremors, spasticity, and quadriplegia. Some people with disabilities use specialized input devices instead of a computer mouse or trackpad. Typically these types of input device do not provide as much accuracy as mainstream pointing devices. Meeting this requirement also ensures that touchscreen interfaces are easier to use.\n\nNote\n\nThis Success Criterion defines a minimum size and, if this can't be met, a minimum spacing. It is still possible to have very small, and difficult to activate, targets and meet the requirements of this Success Criterion, provided that the targets don't have any adjacent targets that are too close. However, using larger target sizes will help many people use targets more easily. As a best practice it is recommended to at least meet the minimum size requirement of the Success Criterion, regardless of spacing. For important links/controls, consider aiming for the stricter 2.5.5 Target Size (Enhanced).\n\nExceptions\n\nThe requirement is for targets to be at least 24 by 24 CSS pixels in size. There are five exceptions:\n\nSpacing: Undersized targets (those less than 24 by 24 CSS pixels) are positioned so that if a 24 CSS pixel diameter circle is centered on the bounding box of each, the circles do not intersect another target or the circle for another undersized target.\nEquivalent: In cases where a target does not have a size equivalent to 24 by 24 CSS pixels, but there is another control that can achieve the underlying function that does meet the minimum size, the target can be excepted based on the \"Equivalent\" exception.\nInline: The Success Criterion does not apply to inline targets in sentences, or where the size of the target is constrained by the line-height of non-target text. This exception is allowed because text reflow based on viewport size makes it impossible for authors to anticipate where links may be positioned relative to one another. When multiple links are embedded in blocks of texts in smaller text sizes, guaranteeing that undersized links in adjacent lines of text fulfill the spacing exception (their 24 CSS pixel diameter circle don't intersect any other links or their circles) would require a large line height which can be undesirable in many design contexts.\nUser agent control: Browsers have default renderings of some controls, such as the days of the month calendar in an <input type=\"date\">. As long as the author has not modified the user agent default, the target size for a User agent control is excepted.\nEssential: If the size and spacing of the targets is fundamental to the information being conveyed, the Essential exception applies. For example, in digital maps, the position of pins is analogous to the position of places shown on the map. If there are many pins close together, the spacing between pins and neighboring pins will often be below 24 CSS pixels. It is essential to show the pins at the correct map location, therefore the Essential exception applies. A similar example is an interactive data visualization where targets are necessarily dense. Another example is where jurisdictions legally require online forms to replicate paper forms, which can impose constraints on the size of targets. In such jurisdictions, any legal requirement to replicate small targets can be considered essential. When the essential exception is applicable, authors are strongly encouraged to provide equivalent functionality through alternative means to the extent practical.\nSize requirement\n\nFor a target to be \"at least 24 by 24 CSS pixels\", it must be possible to draw a solid 24 by 24 CSS pixel square, aligned to the horizontal and vertical axis such that the square is completely within the target (does not extend outside the target's area).\n\nFigure 1 Where targets are a 24 by 24px square (and larger is better), they meet the size requirement of the criterion and pass (image shown to scale - see the scalable original version)\n\nThe 24 by 24px square has to be aligned with the page, although the target itself could be skewed.\n\nFigure 2 So long as there is a solid 24 by 24px square within the target, it meets the size requirement of the criterion and passes (image shown to scale - see the scalable original version)\n\nIf a target is not large enough to allow for a 24 by 24px square to be drawn inside it, it is considered undersized, and does not pass the size requirement of the Success Criterion. However, if it has sufficient space around it without adjacent targets, it may still pass the criterion thanks to the spacing exception (below).\n\nFigure 3 The rounded corners do not leave sufficient space to draw a 24 by 24px square inside the target, making the target undersized. Depending on the spacing to other targets, it may still pass if it has sufficient clearance (image shown at 1:1 and 2:1 scale - see the scalable original version)\n\nThe requirement is independent of the zoom factor of the page; when users zoom in the CSS pixel size of elements does not change. This means that authors cannot meet it by claiming that the target will have enough spacing or sufficient size if the user zooms into the page.\n\nThe requirement does not apply to targets while they are obscured by content displayed as a result of a user interaction or scripted behavior of content, for example:\n\ninteracting with a combobox shows a dropdown list of suggestions\nactivating a button displays a modal dialog\ncontent displays a cookie banner after page load\ncontent displays a \"Take a survey\" dialog after some period of user inactivity\n\nThe requirement does however apply to targets in any new content that appears on top of other content.\n\nWhile the Success Criterion primarily helps touch users by providing target sizing to prevent accidental triggering of adjacent targets, it is also useful for mouse or pen users. It reduces the chances of erroneous activation due to either a tremor or reduced precision, whether because of reduced fine motor control or input imprecision.\n\nSpacing\n\nWhen the minimum size for a target is not met, spacing can at least improve the user experience. There is less chance of accidentally activating a neighboring target if a target is not immediately adjacent to another. Touchscreen devices and user agents generally have internal heuristics to identify which link or control is closest to a user's touch interaction - this means that sufficient spacing between targets can work as effectively as a larger target size itself.\n\nWhen a target is smaller than 24 by 24 CSS pixels, it is undersized. In this case, we check if it at least has sufficient spacing by drawing a 24 CSS pixel diameter circle over the undersized target, centered on the target's bounding box. For rectangular targets, the bounding box coincides with the target itself – thus, the circle is placed on the center of the target. If the target is not rectangular – for instance, if the target is clipped, has rounded corners, or if it's a more complex clickable SVG shape – we need to first determine the bounding box, and then find the box's center. Note that for concave shapes, the center of the bounding box may be outside of the target itself. Now, we center the circle on the center of the bounding box.\n\nFigure 4 For a square/rectangular target, the 24 CSS pixel diameter circle is centered on the target itself. For convex and concave targets, it is centered on the bounding box of the shape. Note the concave target, where in this case the center of the bounding box is outside of the actual target (image shown to scale - see the scalable original version)\n\nWe repeat this process for all adjacent undersized targets. To determine if an undersized target has sufficient spacing (to pass this Success Criterion's spacing exception), we check that the 24 CSS pixel diameter circle of the target does not intersect another target or the circle of any other adjacent undersized targets.\n\nThe following example shows three versions of a horizontal row of six icon-based buttons. In the top row, the dimensions of each target are 24 by 24 CSS pixels, passing this Success Criterion. In the second row, the same targets are only 20 by 20 CSS pixels, but have a 4 CSS pixel space between them – as the target size is below 24 by 24 CSS pixels, these need to be evaluated against the Success Criterion's spacing exception, and they pass. In the last row, the targets are again 20 by 20 CSS pixels, but have no space between them – these fail the spacing exception, because when drawing the 24 CSS pixel diameter circles over the targets, the circles intersect.\n\nFigure 5 Three rows of targets, illustrating two ways of meeting this Success Criterion and one way of failing it (image shown to scale - see the scalable original version)\n\nThe next two illustrations show sets of buttons which are only 16 CSS pixels tall. In the first set, there are no targets immediately above or below the buttons, so they pass. In the second illustration, there are further buttons, and they have been stacked on top of one another, resulting in a fail.\n\nFigure 6 While the height of the targets is only 16 CSS pixels, the lack of adjacent targets above and below means that the targets pass this Success Criterion (image shown to scale - see the scalable original version)\nFigure 7 Two rows of buttons, both with a height of only 16 CSS pixels. The rows are close, with only a 1 CSS pixel gap between them, which means that the 24 CSS pixel spacing circles of the targets in one row will intersect the targets (and their circles, depending on their respective widths) in the other line, thus failing the Success Criterion (image shown to scale - see the scalable original version)\n\nThe following two illustrations show how menu items can be adjusted to properly meet this requirement. In the first illustration, the About us menu has been activated, showing that each of the menu item targets (text and padding) has a 24 CSS pixel height. In the second illustration, the same menu is expanded, but the menu items only achieve 18 CSS pixels in height.\n\nFigure 8 The menu items with a height of 24 CSS pixels pass. For the menu items that are only 18 CSS pixels high, the 24 CSS pixel spacing circles of the targets in one row will intersect the adjacent menu item targets and circles, and fail (image shown to scale - see the scalable original version)\n\nThe following example has one large target (an image that links to a new page related to that image) and a very small second target (a control with a magnifier icon, to open a zoomed-in preview, possibly in a modal, of the image itself). In the top row, the small target overlaps - or, to be more technically accurate, clips - the large target. The small target itself has a size of 24 by 24 CSS pixels, so passes. In the second row, we see that if the second target is any smaller – in this case 16 by 16 CSS pixels – it fails the criterion, as the circle with a 24 CSS pixel diameter we draw over the small target will intersect the large target itself.\n\nFigure 9 The 24 by 24 CSS pixel small target passes, while the 16 by 16 CSS pixel small target fails, since the 24 CSS pixel diameter circle used for undersized targets intersect the large target (image shown to scale - see the scalable original version)\n\nIn the following example, we have the same two targets – a large target and a small target. This time, the small target touches/abuts the large target. If the small target is smaller than 24 by 24 CSS pixels, the circle with a 24 CSS pixel diameter we draw over the small target will intersect the large target itself, failing the requirement. The undersized target must be spaced further away from the large target until its circle doesn't intersect the large target.\n\nFigure 10 In the first row, the 16 by 16 CSS pixel target touching/abutting the large target fails, as its 24 CSS pixel diameter circle used for undersized targets intersects the large target. In the second row we see that the only way the undersized target can pass is by adding a 4 CSS pixel spacing gap between the targets (image shown to scale - see the scalable original version)\n\nNote\n\nUsers with different disabilities have different needs for control sizes. It can be beneficial to provide an option to increase the active target area without increasing the visible target size. Another option is to provide a mechanism to control the density of layout and thereby change target size or spacing, or both. This can be beneficial for a wide range of users. For example, users with visual field loss may prefer a more condensed layout with smaller sized controls while users with other forms of low vision may prefer large controls.",
      "benefitsText": "Benefits\n\nHaving targets with sufficient size - or at least sufficient target spacing - can help all users who may have difficulty in confidently targeting or operating small controls. Users who benefit include, but are not limited to:\n\nPeople who use a mobile device where the touch screen is the primary mode of interaction;\nPeople using mouse, stylus or touch input who have mobility impairments such as hand tremors;\nPeople using a device in environments where they are exposed to shaking such as public transportation;\nMouse users who have difficulty with fine motor movements;\nPeople who access a device using one hand;\nPeople with large fingers, or who are operating the device with only a part of their finger or knuckle.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.1 ページの言語",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのウェブページのデフォルトの自然言語がどの言語であるか、プログラムによる解釈が可能である。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that content developers provide information in the Web page that user agents need to present text and other linguistic content correctly. Both assistive technologies and conventional user agents can render text more accurately when the language of the Web page is identified. Screen readers can load the correct pronunciation rules. Visual browsers can display characters and scripts correctly. Media players can show captions correctly. As a result, users with disabilities will be better able to understand the content.\n\nThe default human language of the Web page is the default text-processing language as discussed in Internationalization Best Practices: Specifying Language in XHTML & HTML Content. When a Web page uses several languages, the default text-processing language is the language which is used most. (If several languages are used equally, the first language used should be chosen as the default human language.)\n\nNote\n\nFor multilingual sites targeting Conformance Level A, the Working Group strongly encourages developers to follow Success Criterion 3.1.2 as well even though that is a Level AA Success Criterion.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps:\n\npeople who use screen readers or other technologies that convert text into synthetic speech;\npeople who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets or decoding words;\npeople with certain cognitive, language and learning disabilities who use text-to-speech software\npeople who rely on captions for synchronized media.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/language-of-page.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.2 一部分の言語",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツの一節、又は語句それぞれの自然言語がどの言語であるか、プログラムによる解釈が可能である。ただし、固有名詞、技術用語、言語が不明な語句、及びすぐ前後にあるテキストの言語の一部になっている単語又は語句は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that user agents can correctly present phrases, passages, and in some cases words written in multiple languages. This makes it possible for user agents and assistive technologies to present content according to the presentation and pronunciation rules for that language. This applies to graphical browsers as well as screen readers, braille displays, and other voice browsers.\n\nBoth assistive technologies and conventional user agents can render text more accurately if the language of each passage of text is identified. Screen readers can use the pronunciation rules of the language of the text. Visual browsers can display characters and scripts in appropriate ways. This is especially important when switching between languages that read from left to right and languages that read from right to left, or when text is rendered in a language that uses a different alphabet. Users with disabilities who know all the languages used in the Web page will be better able to understand the content when each passage is rendered appropriately.\n\nWhen no other language has been specified for a phrase or passage of text, its human language is the default human language of the Web page (see Success Criterion 3.1.1). So the human language of all content in single language documents can be programmatically determined.\n\nIndividual words or phrases in one language can become part of another language. For example, \"rendezvous\" is a French word that has been adopted in English, appears in English dictionaries, and is properly pronounced by English screen readers. Hence a passage of English text may contain the word \"rendezvous\" without specifying that its human language is French and still satisfy this Success Criterion. Frequently, when the human language of text appears to be changing for a single word, that word has become part of the language of the surrounding text. Because this is so common in some languages, single words should be considered part of the language of the surrounding text unless it is clear that a change in language was intended. If there is doubt whether a change in language is intended, consider whether the word would be pronounced the same (except for accent or intonation) in the language of the immediately surrounding text.\n\nMost professions require frequent use of technical terms which may originate from a foreign language. Such terms are usually not translated to all languages. The universal nature of technical terms also facilitate communication between professionals.\n\nSome common examples of technical terms include: Homo sapiens, Alpha Centauri, hertz, and habeas corpus.\n\nIdentifying changes in language is important for a number of reasons:\n\nIt allows braille translation software to follow changes in language, e.g., substitute control codes for accented characters, and insert control codes necessary to prevent erroneous creation of Grade 2 braille contractions.\nSpeech synthesizers that support multiple languages will be able to speak the text in the appropriate accent with proper pronunciation. If changes are not marked, the synthesizer will try its best to speak the words in the default language it works in. Thus, the French word for car, \"voiture\" would be pronounced \"voyture\" by a speech synthesizer that uses English as its default language.\nMarking changes in language can benefit future developments in technology, for example users who are unable to translate between languages themselves will be able to use machines to translate unfamiliar languages.\nMarking changes in language can also assist user agents in providing definitions using a dictionary.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps:\n\npeople who use screen readers or other technologies that convert text into synthetic speech;\npeople who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets, decoding words, and understanding words and phrases;\npeople with certain cognitive, language and learning disabilities who use text-to-speech software;\npeople who rely on captions to recognize language changes in the soundtrack of synchronized media content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/language-of-parts.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.3 一般的ではない用語",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   慣用句及び業界用語を含めて、一般的ではない、又は限定された用法で使われている単語、又は語句の、明確な定義を特定するメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nCertain disabilities make it difficult to understand nonliteral word usage and specialized words or usage. Certain disabilities make it difficult to understand figurative language or specialized usage. Providing such mechanisms is vital for these audiences. Specialized information intended for non-specialist readers is encouraged to satisfy this Success Criterion, even when claiming only Single-A or Double-A conformance.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people with cognitive, language and learning disabilities who:\n\nhave difficulty decoding words\nhave difficulty understanding words and phrases\nhave difficulty using context to aid understanding\n\nIt would also help people with visual disabilities who:\n\nlose context when zoomed-in with a screen magnifier",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/unusual-words.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.4 略語",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   略語の元の語、又は意味を特定するメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users can access the expanded form of abbreviations.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people who:\n\nhave difficulty decoding words;\nrely on screen magnifiers (magnification may reduce contextual cues);\nhave limited memory;\nhave difficulty using context to aid understanding.\n\nAbbreviations may confuse some readers in different ways:\n\nSome abbreviations do not look like normal words and cannot be pronounced according to the usual rules of the language. For example, the English word \"room\" is abbreviated as \"rm,\" which does not correspond to any English word or phoneme. The user has to know that \"rm\" is an abbreviation for the word \"room\" in order to say it correctly.\nSometimes, the same abbreviation means different things in different contexts. For example, in the English sentence \"Dr. Johnson lives on Boswell Dr.,\" the first \"Dr.\" is an abbreviation for \"Doctor\" and the second instance is an abbreviation for the word \"Drive\" (a word that means \"street\"). Users must be able to understand the context in order to know what the abbreviations mean.\nSome acronyms spell common words but are used in different ways. For example, \"JAWS\" is an acronym for a screen reader whose full name is \"Job Access with Speech.\" It is also a common English word referring to the part of the mouth that holds the teeth. The acronym is used differently than the common word.\nSome acronyms sound like common words but are spelled differently. For example, the acronym for Synchronized Multimedia Integration Language, S M I L, is pronounced like the English word \"smile.\"\n\nIt would also help people with visual disabilities who:\n\nLose context when zoomed-in with a screen magnifier",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/abbreviations.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.6 発音",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   文脈において、発音が分からないと単語の意味が不明瞭になる場合、その単語の明確な発音を特定するメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help people who are blind, people who have low vision, and people with reading disabilities to understand content in cases where meaning depends on pronunciation. Often words or characters have different meanings, each with its own pronunciation. The meaning of such words or characters can usually be determined from the context of the sentence. However, for more complex or ambiguous sentences, or for some languages, the meaning of the word cannot be easily determined or determined at all without knowing the pronunciation. When the sentence is read aloud and the screen reader reads the word using the wrong pronunciation, it can be even more difficult to understand than when read visually. When words are ambiguous or indeterminate unless the pronunciation is known, then providing some means of determining the pronunciation is needed.\n\nFor example, in the English language heteronyms are words that are spelled the same but have different pronunciations and meanings, such as the words desert (abandon) and desert (arid region). If the proper pronunciation can be determined from the context of the sentence, then nothing is required. If it cannot then some mechanism for determining the proper pronunciation would be required. Additionally, in some languages certain characters can be pronounced in different ways. In Japanese, for example, there are characters like Han characters(Kanji) that have multiple pronunciations. Screen readers may speak the characters incorrectly without the information on pronunciation. When read incorrectly, the content will not make sense to users.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people who:\n\nhave difficulty decoding words\nhave difficulty using context to aid understanding\nuse technologies that read the words aloud",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pronunciation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.1 フォーカス時",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   いずれのユーザインターフェイス コンポーネントも、フォーカスを受け取ったときにコンテキストの変化を引き起こさない。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that functionality is predictable as visitors navigate their way through a document. Any component that is able to trigger an event when it receives focus must not change the context. Examples of changing context when a component receives focus include, but are not limited to:\n\nforms submitted automatically when a component receives focus;\nnew windows launched when a component receives focus;\nfocus is changed to another component when that component receives focus;\n\nFocus may be moved to a control either via the keyboard (e.g. tabbing to a control) or the mouse (e.g. clicking on a text field). Moving the mouse over a control does not move the focus unless scripting implements this behavior. Note that for some types of controls, clicking on a control may also activate the control (e.g. button), which may, in turn, initiate a change in context.\n\nNote\n\nWhat is meant by \"component\" here is also sometimes called \"user interface element\" or \"user interface component\".",
      "benefitsText": "Benefits\nThis Success Criterion helps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a change of context will occur unexpectedly.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/on-focus.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.2 入力時",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ユーザインタフェース コンポーネントの設定を変更することが、コンテキストの変化を自動的に引き起こさない。ただし、利用者が使用する前にその挙動を知らせてある場合を除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that entering data or selecting a form control has predictable effects. Changing the setting of any user interface component is changing some aspect in the control that will persist when the user is no longer interacting with it. So checking a checkbox, entering text into a text field, or changing the selected option in a list control changes its setting, but activating a link or a button does not. Changes in context can confuse users who do not easily perceive the change or are easily distracted by changes. Changes of context are appropriate only when it is clear that such a change will happen in response to the user's action.\n\nNote\n\nThis Success Criterion covers changes in context due to changing the setting of a control. Clicking on links or tabs in a tab control is activating the control, not changing the setting of that control.\n\nNote\n\nWhat is meant by \"component\" and \"user interface component\" here is also sometimes called \"user interface element\".",
      "benefitsText": "Benefits\nThis Success Criterion helps users with disabilities by making interactive content more predictable. Unexpected changes of context can be so disorienting for users with visual disabilities or cognitive limitations that they are unable to use the content.\n\nIndividuals who are unable to detect changes of context are less likely to become disoriented while navigating a site. For example:\n\nIndividuals who are blind or have low vision may have difficulty knowing when a visual context change has occurred, such as a new window popping up. In this case, warning users of context changes in advance minimizes confusion when the user discovers that the back button no longer behaves as expected.\nSome individuals with low vision, with reading and intellectual disabilities, and others who have difficulty interpreting visual cues may benefit from additional cues in order to detect changes of context.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/on-input.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.3 一貫したナビゲーション",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中にある複数のウェブページ上で繰り返されているナビゲーションのメカニズムは、繰り返されるたびに相対的に同じ順序で出現する。ただし、利用者が変更した場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to encourage the use of consistent presentation and layout for users who interact with repeated content within a set of Web pages and need to locate specific information or functionality more than once. Individuals with low vision who use screen magnification to display a small portion of the screen at a time often use visual cues and page boundaries to quickly locate repeated content. Presenting repeated content in the same order is also important for visual users who use spatial memory or visual cues within the design to locate repeated content.\n\nIt is important to note that the use of the phrase \"same order\" in this section is not meant to imply that subnavigation menus cannot be used or that blocks of secondary navigation or page structure cannot be used. Instead, this Success Criterion is intended to assist users who interact with repeated content across Web pages to be able to predict the location of the content they are looking for and find it more quickly when they encounter it again.\n\nUsers may initiate a change in the order by using adaptive user agents or by setting preferences so that the information is presented in a way that is most useful to them.",
      "benefitsText": "Benefits\nEnsuring that repeated components occur in the same order on each page of a site helps users become comfortable that they will able to predict where they can find things on each page. This helps users with cognitive limitations, users with low vision, users with intellectual disabilities, and also those who are blind.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.4 一貫した識別性",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中で同じ機能を有するコンポーネントは、一貫して識別できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure consistent identification of functional components that appear repeatedly within a set of Web pages. A strategy that people who use screen readers use when operating a Web site is to rely heavily on their familiarity with functions that may appear on different Web pages. If identical functions have different labels (or, more generally, a different accessible name) on different Web pages, the site will be considerably more difficult to use. It may also be confusing and increase the cognitive load for people with cognitive limitations. Therefore, consistent labeling will help.\n\nThis consistency extends to the text alternatives. If icons or other non-text items have the same functionality, then their text alternatives should be consistent as well.\n\nIf there are two components on a web page that both have the same functionality as a component on another page in a set of web pages, then all 3 must be consistent. Hence the two on the same page will be consistent.\n\nWhile it is desirable and best practice always to be consistent within a single web page, 3.2.4 only addresses consistency within a set of web pages where something is repeated on more than one page in the set.",
      "benefitsText": "Benefits\nPeople who learn functionality on one page on a site can find the desired functions on other pages if they are present.\nWhen non-text content is used in a consistent way to identify components with the same functionality, people with difficulty reading text or detecting text alternatives can interact with the Web without depending on text alternatives.\nPeople who depend on text alternatives can have a more predictable experience. They can also search for the component if it has a consistent label on different pages.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/consistent-identification.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.5 要求による変化",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテキストの変化は利用者の要求によってだけ生じるか、又は、そのような変化を止めるメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to encourage design of Web content that gives users full control of changes of context. This Success Criterion aims to eliminate potential confusion that may be caused by unexpected changes of context such as automatic launching of new windows, automatic submission of forms after selecting an item from a list, etcetera. Such unexpected changes of context may cause difficulties for people with motor impairments, people with low vision, people who are blind, and people with certain cognitive limitations.\n\nSome types of change of context are not disruptive to some users, or actively benefit some users. For example, single-switch users rely on context changes that are animated by the system, and the preferences of low-vision users may vary depending on how much of the content they can see at once and how much of the session structure they can retain in working memory. Some types of content, such as slide shows, require the ability to change context in order to provide the intended user experience. Content that initiates changes of context automatically only when user preferences allow can conform to this Success Criterion.\n\nNote\n\nIt is possible for more than one change of context to occur simultaneously. For example, clicking on a link which automatically opens a new window is an example of two separate changes of context related to the change in content and to the change in the viewport (window). The change in the content in this case is initiated by user request when they click on the link, but unless the user can be aware that the link will open in a new window then that change of context cannot be regarded as user-initiated.",
      "benefitsText": "Benefits\n\nIndividuals who are unable to detect changes of context or may not realize that the context has changed are less likely to become disoriented while navigating a site. For example:\n\nindividuals who are blind or have low vision may have difficulty knowing when a visual context change has occurred, such as a new window popping up. In this case, warning users of context changes in advance minimizes confusion when the user discovers that the back button no longer behaves as expected.\nSome individuals with low vision, with reading and intellectual disabilities, and who have difficulty interpreting visual cues may benefit from additional cues in order to detect changes of context.\nPeople with certain cognitive limitations do not get confused if automatic redirects are performed by the Web server instead of the browser.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/change-on-request.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.6 一貫したヘルプ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n  ウェブページが次のヘルプのメカニズムのいずれかを含み、かつ、それらのメカニズムがウェブページ一式の中にある複数のウェブページで繰り返されている場合、他のページコンテンツに対して相対的に同じ順序で出現する。ただし、変更が利用者によって行われた場合は除く。\n\n    \n        人間への連絡先\n        人間への連絡メカニズム\n        自己解決のためのオプション\n        完全に自動化された連絡メカニズム\n    \n\n  注記 1ヘルプのメカニズムは、ページ上で直接提供されることもあれば、その情報を含む別のページへの直接リンクを経由して提供されることもある。\n  注記 2この達成基準における「他のページコンテンツに対して相対的に同じ順序」は、ページが線形化されたときのコンテンツの並べ方と考えることができる。ヘルプのメカニズムの視覚的な位置は、ページの同じバリエーション (例えば CSS のブレークポイント) に対してページ間で一貫している可能性が高い。利用者は、ページのズーム、ページの向きを変えるなどの変更を発生させることができ、これはページのバリエーションが変化するきっかけになる可能性がある。この達成基準で扱うのは、同じバリエーション (例えば、同じズームレベル、向き) で表示されるページ同士の間における、相対的な順序である。\n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure users can find help for completing tasks on a Web site, when it is available. When the placement of the help mechanism is kept consistent across a set of pages, users looking for help will find it easier to identify. This is distinct from interface-level help, such as contextual help, features like spell checkers, and instructional text in a form.\n\nLocating the help mechanism in a consistent location across pages makes it easier for users to find it. For example, when a mechanism or link is located in the header of one Web page, it will be easier to find if it is in the header of other pages. The help mechanism, such as a contact phone number, may be provided directly on the page, or it may also be a direct link to a contact page. Regardless of which approach is used, the mechanism must be located in the same relative order on each page within the set of pages.\n\nWhen testing this Success Criterion, it is the help item which is relative to the rest of the content. When testing a page, other content that is present across the set of web pages and is before the help item should be before the help item on this page. Items which are after the help item on other pages should be after the help item on this page.\n\nIf the help item is visually in a different location, but in the same serial order, that is not helpful from a user's point of view, but it would not fail this criterion.\n\nWhen having problems completing a task on a Web site (or part of a Web site, what we call a set of Web pages), people with some types of disabilities may not be able to work through the issue without further help. Issues could include difficulty: completing a form, or finding a document or page which provides information required to complete a task.\n\nWithout help, some users may abandon the task. They may also fail to correctly complete a task, or they may require assistance from people who do not necessarily keep private information secure.\n\nLimitations and Exceptions\n\nIt is not the intent of this Success Criterion to require authors to provide help or access to help. The Criterion only requires that when one of the listed forms of help is available across multiple pages that it be in a consistent location. It does not require authors to provide help information on PDFs or other static documents that may be available for viewing/download from the Web pages. PDFs and other static documents are not considered part of the \"set of web pages\" from which they are downloaded.\n\nIt is also not the intent of this Success Criterion to require a human be available at all times. Ideally, if the human contact is not available during certain hours or certain days then information would be provided so the user can tell when it will be available.\n\nThis Success Criterion only requires help mechanisms to be consistent within a particular set of web pages. Some complex Web sites consist of multiple different sets of web pages with different purposes. For example, a web-based spreadsheet application might have one set of pages for editing spreadsheets and a separate set of pages for marketing the application. This Success Criterion would allow the different sets of web pages to use different help mechanism locations. However, it is best if help mechanisms are located as consistently as possible even among different related sets of web pages.\n\nThis Success Criterion contains an exception when \"a change is initiated by the user.\" This exception is intended to cover cases where a user performs an action with the intent of changing the display or layout of a page, such as changing the zoom level, orientation, or viewport size. Help mechanism locations may change in response to such a user-initiated change; as the criterion's second note clarifies, \"this criterion is concerned with relative order across pages displayed in the same page variation (e.g., same zoom level and orientation).\"\n\nThis exception allows the location in a smaller viewport to be different than in a larger viewport. However, it is best if the mechanism or link is consistent across a set of web pages. A consistent location, both visually and programmatically, is the most usable.\n\nThis exception is not intended to treat every action that a user might initiate as a \"change\"; to qualify for the exception, the user must be initiating an action that would reasonably be expected to change the relative order of components within a page. For example, merely navigating between pages within a set of web pages is not a \"change initiated by the user\" for the purposes of this exception. Similarly, logging into or out of a page would not typically qualify, unless logging in would present the user with a distinct set of web pages.\n\nHelp Mechanisms\n\nTypical help mechanisms include:\n\nHuman contact details such as a phone number, email address, hours of operation.\nHuman contact mechanism such as a messaging system, chat client, contact form, social media channel.\nSelf-help option such as an up-to-date Frequently Asked Questions, How Do I page, Support page.\nA fully automated contact mechanism such as a chatbot.\n\nThe order of the types of help listed in the Success Criterion does not imply priority.\n\nSupport for people with cognitive and learning disabilities\n\nThis section is not required by the Consistent Help success criterion, but provides advice related to Making Content Usable for People with Cognitive and Learning Disabilities.\n\nThe human contact details enable users to connect with the organization or the part of the organization that can assist with the content. For example, an online jobs / recruitment portal may provide a contact method for the team that supports the recruitment portal and not a catch-all for the entire company. Each layer of contact added prolongs the time before the user will receive help.\n\nThe human contact mechanism enables a person to express what they are looking for using their own words. For some with cognitive disabilities, this may be the best way for them to find an answer to their problem.\n\nFor pages for which no human support is available it helps if a self-help option says that no human support is available. Self-help options can go beyond allowing the user to search within the site. Contextual help is still recommended (see Success Criterion 3.3.5 for more information), but a self-help option provides a single location that makes it easier for people with cognitive disabilities to understand what help is available without having to hunt for it. While some people may easily be able to identify that no support would be available for a particular type of Web site, this may not be apparent to some users with disabilities.\n\nChatbots can work for many people, and particularly for people with cognitive disabilities if they:\n\nrecognize misspelled words,\nprovide human contact details if the chatbot is unable to provide a satisfactory response after 3 attempts, and\ncan be dismissed with a single interaction, and recalled using a link or button.\n\nThis criterion does not require that a site provide a help mechanism. However, when help is available:\n\nPeople who may have difficulty locating help are more likely to find it and complete their task.\nUsers that experience cognitive fatigue or cognitive shut down will be able to reserve their energy for the task, instead of using it to find support.\nEnabling users (especially those with cognitive disabilities) to find solutions while expressing their question using their own words (for example by interacting with a chatbot) increases their chances of success for completing a task.\n\nSelf help methods beyond the site, such as using internet search to find the contact information for an organization, can be too difficult. Further, the user's disability may make it more difficult to find the help available (such as a \"contact us\" link, phone number, or support page) if the information is not consistently present within a few interactions (e.g., displayed in the header, or via a menu). In addition, for some users with disabilities, struggling to complete a task on a site may cause additional cognitive challenges when searching for help within the site.\n\nWhen a user is quickly able to find help, they are able to complete the task even if they encounter challenges.",
      "benefitsText": "Benefits\nPeople who may have difficulty locating help are more likely to find it when it is consistently located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/consistent-help.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.1 エラーの特定",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   入力エラーが自動的に検出された場合は、エラーとなっている箇所が特定され、そのエラーが利用者にテキストで説明される。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users are aware that an error has occurred and can determine what is wrong. The error message should be as specific as possible. In the case of an unsuccessful form submission, re-displaying the form and indicating the fields in error is insufficient for some users to perceive that an error has occurred. Screen reader users, for example, will not know there was an error until they encounter one of the indicators. They may abandon the form altogether before encountering the error indicator, thinking that the page simply is not functional. Per the definition, an \"input error\" is information provided by the user that is not accepted. This includes:\n\ninformation that is required by the web page but omitted by the user, or\ninformation that is provided by the user but that falls outside the required data format or allowed values.\n\nFor example:\n\nthe user fails to enter the proper abbreviation in to state, province, region, etc. field;\nthe user enters a state abbreviation that is not a valid state;\nthe user enters a non existent zip or postal code;\nthe user enters a birth date 2 years in the future;\nthe user enters alphabetic characters or parentheses into their phone number field that only accepts numbers;\nthe user enters a bid that is below the previous bid or the minimum bid increment.\n\nNote\n\nIf a user enters a value that is too high or too low, and the coding on the page automatically changes that value to fall within the allowed range, the user's error would still need to be described to them as required by the success criterion. Such an error description telling the person of the changed value would meet both this success criterion (Error Identification) and Success Criterion 3.3.3 (Error Suggestion).\n\nThe identification and description of an error can be combined with programmatic information that user agents or assistive technologies can use to identify an error and provide error information to the user. For example, certain technologies can specify that the user's input must not fall outside a specific range, or that a form field is required. This type of programmatic information is not required for this success criterion, but may be covered by other criteria such as 4.1.2 Name, Role, Value.\n\nIt is perfectly acceptable to indicate the error in other ways such as image, color etc, in addition to the text description.\n\nSee also 3.3.3: Error Suggestion.",
      "benefitsText": "Benefits\nProviding information about input errors in text allows users who are blind or colorblind to perceive the fact that an error occurred.\nThis Success Criterion may help people with cognitive, language, and learning disabilities who have difficulty understanding the meaning represented by icons and other visual cues.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-identification.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.3 エラー修正の提案",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   入力エラーが自動的に検出され、修正方法を提案できる場合、その提案が利用者に提示される。ただし、セキュリティ又はコンテンツの目的を損なう場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users receive appropriate suggestions for correction of an input error if it is possible. The definition of \"input error\" says that it is \"information provided by the user that is not accepted\" by the system. Some examples of information that is not accepted include information that is required but omitted by the user and information that is provided by the user but that falls outside the required data format or allowed values.\n\nSuccess Criterion 3.3.1 provides for notification of errors. However, persons with cognitive limitations may find it difficult to understand how to correct the errors. People with visual disabilities may not be able to figure out exactly how to correct the error. In the case of an unsuccessful form submission, users may abandon the form because they may be unsure of how to correct the error even though they are aware that it has occurred.\n\nThe content author may provide the description of the error, or the user agent may provide the description of the error based on technology-specific, programmatically determined information.",
      "benefitsText": "Benefits\nProviding information about how to correct input errors allows users who have learning disabilities to fill in a form successfully.\nUsers who are blind or have impaired vision understand more easily the nature of the input error and how to correct it.\nPeople with motion impairment can reduce the number of times they need to change an input value.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 4.1.2 名前 (name)・役割 (role)・値 (value)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   すべてのユーザインタフェース コンポーネント (フォームを構成する要素、リンク、スクリプトが生成するコンポーネントなど) では、名前 (name) 及び役割 (role) は、プログラムによる解釈が可能である。又、状態、プロパティ、利用者が設定可能な値はプログラムによる設定が可能である。そして、支援技術を含むユーザエージェントが、これらの項目に対する変更通知を利用できる。\n   \n   注記この達成基準は、主に独自のユーザインタフェース コンポーネントを開発、又はスクリプトで実装するコンテンツ制作者に向けたものである。例えば、標準的な HTML のコントロールを仕様に沿って使用していれば、既にこの達成基準を満たしていることになる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather appropriate information about, activate (or set) and keep up to date on the status of user interface controls in the content.\n\nWhen standard controls from accessible technologies are used, this process is straightforward. If the user interface elements are used according to specification the conditions of this provision will be met. (See examples of Success Criterion 4.1.2 below)\n\nIf custom controls are created, however, or interface elements are programmed (in code or script) to have a different role and/or function than usual, then additional measures need to be taken to ensure that the controls provide important and appropriate information to assistive technologies and allow themselves to be controlled by assistive technologies.\n\nWhat roles and states are appropriate to convey to assistive technology will depend on what the control represents. Specifics about such information are defined by other specifications, such as WAI-ARIA, or the relevant platform standards. Another factor to consider is whether there is sufficient accessibility support with assistive technologies to convey the information as specified.\n\nA particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent to user agents and assistive technology. Other examples of user interface control state are whether or not a checkbox or radio button has been selected, or whether or not a collapsible tree or list node is expanded or collapsed.\n\nNote\n\nSuccess Criterion 4.1.2 requires a programmatically determinable name for all user interface components. Names may be visible or invisible. Occasionally, the name needs to be visible, in which case it is identified as a label. Refer to the definition of name and label in the glossary for more information.",
      "benefitsText": "Benefits\nProviding role, state, and value information on all user interface components enables compatibility with assistive technology, such as screen readers, screen magnifiers, and speech recognition software, used by people with disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/name-role-value.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 4.1.3 ステータスメッセージ",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   マークアップ言語を使って実装されたコンテンツでは、ステータスメッセージは、役割 (role) 又はプロパティを通してプログラムによる解釈が可能であり、フォーカスを受けとらなくても支援技術によって利用者に提示することができる。\n   \t\t\t\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make users aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.\n\nThe intended beneficiaries are blind and low vision users of assistive technologies with screen reader capabilities. An additional benefit is that assistive technologies for users with cognitive disabilities may achieve an alternative means of indicating (or even delaying or supressing) status messages, as preferred by the user.\n\nThe scope of this Success Criterion is specific to changes in content that involve status messages. A status message is a defined term in WCAG. There are two main criteria that determine whether something meets the definition of a status message:\n\nthe message provides information to the user on the success or results of an action, on the waiting state of an application, on the progress of a process, or on the existence of errors;\nthe message is not delivered via a change in context.\n\nInformation can be added to pages which does not meet the definition of a status message. For example, the list of results obtained from a search are not considered a status update and thus are not covered by this Success Criterion. However, brief text messages displayed about the completion or status of the search, such as \"Searching...\", \"18 results returned\" or \"No results returned\" would be status updates if they do not take focus. Examples of status messages are given in the section titled Status Message Examples below.\n\nThis Success Criterion specifically addresses scenarios where new content is added to the page without changing the user's context. Changes of context, by their nature, interrupt the user by taking focus. They are already surfaced by assistive technologies, and so have already met the goal to alert the user to new content. As such, messages that involve changes of context do not need to be considered and are not within the scope of this Success Criterion. Examples of scenarios that add new content by changing the context are given in the section titled Examples of Changes That Are Not Status Messages below.",
      "benefitsText": "Benefits\nWhen appropriate roles or properties are assigned to status messages, the new content is spoken by screen readers in such a way as to assist blind and low vision users. Most sighted users can observe text peripherally added to the viewport. Such content provides additional information without affecting the user's current point of regard. The ability of an assistive technology to announce such new important text content allows more users to benefit from an awareness of the information in an equivalent manner.\nAssigning proper roles or properties to status messages provides possible future uses and personalization opportunities, such as the potential to be exploited by assistive technologies created for users with some cognitive disabilities. Where page authors elect to design additions to the screen which do not change the user's context (i.e., take focus), the information is arguably of less importance than something presented using a modal dialog, which must be acknowledged by the user. As such, depending on the user's preferences, an assistive technology may choose to delay, suppress, or transform such messages so a user is not unnecessarily interrupted; or conversely the assistive technology may highlight such messages where the user finds it optimal to do so.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    }
  ],
  "scForCognitiveImpairment": [
    {
      "title": "達成基準 1.1.1 非テキストコンテンツ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者に提示されるすべての非テキストコンテンツには、同等の目的を果たすテキストによる代替が提供されている。ただし、次の場合は除く:\n   \n   \n      \n      コントロール、入力\n      \n      非テキストコンテンツが、コントロール又は利用者の入力を受け付けるものであるとき、その目的を説明する名前 (name) を提供している。(コントロール及び利用者の入力を受け入れるコンテンツに関するその他の要件は、達成基準 4.1.2 を参照。) \n         \n      \n      \n      時間依存メディア\n      \n      非テキストコンテンツが、時間に依存したメディアであるとき、テキストによる代替は、少なくとも、その非テキストコンテンツを識別できる説明を提供している。(メディアに関するその他の要件は、ガイドライン 1.2 を参照。) \n         \n      \n      \n      テスト\n      \n      非テキストコンテンツが、テキストで提示されると無効になるテスト又は演習のとき、テキストによる代替は、少なくともその非テキストコンテンツを識別できる説明を提供している。\n         \n      \n      \n      感覚的\n      \n      非テキストコンテンツが、特定の感覚的体験を創り出すことを主に意図しているとき、テキストによる代替は、少なくともその非テキストコンテンツを識別できる説明を提供している。\n         \n      \n      \n      CAPTCHA\n      \n      非テキストコンテンツが、コンピュータではなく人間がコンテンツにアクセスしていることを確認する目的で用いられているとき、テキストによる代替は、その非テキストコンテンツの目的を特定し、説明している。なおかつ、他の感覚による知覚に対応して出力する CAPTCHA の代替形式を提供することで、様々な障害に対応している。\n         \n      \n      \n      装飾、整形、非表示\n      \n      非テキストコンテンツが、純粋な装飾である、見た目の整形のためだけに用いられている、又は利用者に提供されるものではないとき、支援技術が無視できるように実装されている。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by non-text content accessible through the use of a text alternative. Text alternatives are a primary way for making information accessible because they can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows the information to be rendered in a variety of ways by a variety of user agents. For example, a person who cannot see a picture can have the text alternative read aloud using synthesized speech. A person who cannot hear an audio file can have the text alternative displayed so that he or she can read it. In the future, text alternatives will also allow information to be more easily translated into sign language or into a simpler form of the same language.\n\nNote on CAPTCHA\n\nCAPTCHAs are a controversial topic in the accessibility community. As is described in the paper Inaccessibility of CAPTCHA, CAPTCHAs intrinsically push the edges of human abilities in an attempt to defeat automated processes. Every type of CAPTCHA will be unsolvable by users with certain disabilities. However, they are widely used, and the Web Content Accessibility Guidelines Working Group believes that if CAPTCHAs were forbidden outright, Web sites would choose not to conform to WCAG rather than abandon CAPTCHA. This would create barriers for a great many more users with disabilities. For this reason the Working Group has chosen to structure the requirement about CAPTCHA in a way that meets the needs of most people with disabilities, yet is also considered adoptable by sites. Requiring two different forms of CAPTCHA on a given site ensures that most people with disabilities will find a form they can use.\n\nBecause some users with disabilities will still not be able to access sites that meet the minimum requirements, the Working Group provides recommendations for additional steps. Organizations motivated to conform to WCAG should be aware of the importance of this topic and should go as far beyond the minimum requirements of the guidelines as possible. Additional recommended steps include:\n\nProviding more than two modalities of CAPTCHAs\nProviding access to a human customer service representative who can bypass CAPTCHA\nNot requiring CAPTCHAs for authorized users\nAdditional information\n\nNon-text content can take a number of forms, and this Success Criterion specifies how each is to be handled.\n\nFor non-text content that is not covered by one of the other situations listed below, such as charts, diagrams, audio recordings, pictures, and animations, text alternatives can make the same information available in a form that can be rendered through any modality (for example, visual, auditory or tactile). Short and long text alternatives can be used as needed to convey the information in the non-text content. Note that prerecorded audio-only and prerecorded video-only files are covered here. Live-audio-only and Live-video-only files are covered below (see 3rd paragraph following this one).\n\nFor non-text content that is a control or accepts user input , such as images used as submit buttons, image maps or complex animations, a name is provided to describe the purpose of the non-text content so that the person at least knows what the non-text content is and why it is there.\n\nNon-text content that is time-based media is made accessible through 1.2: Time-Based Media. However, it is important that users know what it is when they encounter it on a page so they can decide what action if any they want to take with it. A text alternative that describes the time-based media and/or gives its title is therefore provided.\n\nFor Live Audio-only and live video-only content , it can be much more difficult to provide text alternatives that provide equivalent information as live audio-only and live video-only content. For these types of non-text content, text alternatives provide a descriptive label.\n\nSometimes a test or exercise must be partially or completely presented in non-text format. Audio or visual information is provided that cannot be changed to text because the test or exercise must be conducted using that sense. For example, a hearing test would be invalid if a text alternative were provided. A visual skill development exercise would similarly make no sense in text form. And a spelling test with text alternatives would not be very effective. For these cases, text alternatives should be provided to describe the purpose of the non-text content; of course, the text alternatives would not provide the same information needed to pass the test.\n\nSometimes content is primarily intended to create a specific sensory experience that words cannot fully capture. Examples include a symphony performance, works of visual art etc. For such content, text alternatives at least identify the non-text content with a descriptive label and where possible, additional descriptive text. If the reason for including the content in the page is known and can be described it is helpful to include that information.\n\nSometimes there are non-text exercises that are used to prove you are human. To avoid spam robots and other software from gaining access to a site a device called a CAPTCHA is used. These usually involve visual or auditory tasks that are beyond the current capabilities of Web robots. Providing a text alternative to them would however make them operable by Robots, thus defeating their purpose. In this case a text alternative would describe the purpose of the CAPTCHA, and alternate forms using different modalities would be provided to address the needs of people with different disabilities.\n\nSometimes there is non-text content that really is not meant to be seen or understood by the user. Transparent images used to move text over on a page; an invisible image that is used to track usage statistics; and a swirl in the corner that conveys no information but just fills up a blank space to create an aesthetic effect are all examples of this. Putting alternative text on such items just distracts people using screen readers from the content on the page. Not marking the content in any way, though, leaves users guessing what the non-text content is and what information they may have missed (even though they have not missed anything in reality). This type of non-text content, therefore, is marked or implemented in a way that assistive technologies (AT) will ignore it and not present anything to the user.",
      "benefitsText": "Benefits\nThis Success Criterion helps people who have difficulty perceiving visual content. Assistive technology can read text aloud, present it visually, or convert it to braille.\nText alternatives may help some people who have difficulty understanding the meaning of photographs, drawings, and other images (e.g., line drawings, graphic designs, paintings, three-dimensional representations), graphs, charts, animations, etc.\nPeople who are deaf, are hard of hearing, or who are having trouble understanding audio information for any reason can read the text presentation. Research is ongoing regarding automatic translation of text into sign language.\nPeople who are deaf-blind can read the text in braille.\nAdditionally, text alternatives support the ability to search for non-text content and to repurpose content in a variety of ways.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.1 音声のみ及び映像のみ (収録済)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   収録済の音声しか含まないメディア及び収録済の映像しか含まないメディアは、次の事項を満たしている。ただし、その音声又は映像がメディアによるテキストの代替であって、メディアによる代替であることが明確にラベル付けされている場合は除く:\n   \n   \n      \n      収録済の音声しか含まない\n      \n      時間依存メディアに対する代替コンテンツによって、収録済の音声しか含まないコンテンツと同等の情報を提供している。\n         \n      \n      \n      収録済の映像しか含まない\n      \n      時間依存メディアに対する代替コンテンツ又は音声トラックによって、収録済の映像しか含まないコンテンツと同等の情報を提供している。\n         \n      \n      \n   \n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by prerecorded audio-only and prerecorded video-only content available to all users. Alternatives for time-based media that are text based make information accessible because text can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. In the future, text could also be translated into symbols, sign language or simpler forms of the language (future).\n\nAn example of pre-recorded video with no audio information or user interaction is a silent movie. The purpose of the transcript is to provide an equivalent to what is presented visually. For prerecorded video content, authors have the option to provide an audio track. The purpose of the audio alternative is to be an equivalent to the video. This makes it possible for users with and without vision impairment to review content simultaneously. The approach can also make it easier for those with cognitive, language and learning disabilities to understand the content because it would provide parallel presentation.\n\nNote\n\nA text equivalent is not required for audio that is provided as an equivalent for video with no audio information. For example, it is not required to caption audio description that is provided as an alternative to a silent movie.\n\nSee also 1.2.4: Audio-only (Live)",
      "benefitsText": "Benefits\nThis Success Criterion helps people who have difficulty perceiving visual content. Assistive technology can read text alternatives aloud, present them visually, or convert them to braille.\nAlternatives for timed-based media that are text based may help some people who have difficulty understanding the meaning of prerecorded video content.\nPeople who are deaf, are hard of hearing, or who are having trouble understanding audio information for any reason can read the text presentation. Research is ongoing regarding automatic translation of text into sign language.\nPeople who are deaf-blind can read the text in braille.\nAdditionally, text supports the ability to search for non-text content and to repurpose content in a variety of ways.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-only-and-video-only-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.3 音声解説、又はメディアに対する代替 (収録済)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれている収録済の映像コンテンツに対して、時間依存メディアに対する代替コンテンツ又は音声解説が提供されている。ただし、その同期したメディアがメディアによるテキストの代替であって、メディアによる代替であることが明確にラベル付けされている場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide people who are blind or visually impaired access to the visual information in a synchronized media presentation. This Success Criterion describes two approaches, either of which can be used.\n\nOne approach is to provide audio description of the video content. The audio description augments the audio portion of the presentation with the information needed when the video portion is not available. During existing pauses in dialogue, audio description provides information about actions, characters, scene changes, and on-screen text that are important and are not described or spoken in the main sound track.\n\nThe second approach involves providing all of the information in the synchronized media (both visual and auditory) in text form. An alternative for time-based media provides a running description of all that is going on in the synchronized media content. The alternative for time-based media reads something like a screenplay or book. Unlike audio description, the description of the video portion is not constrained to just the pauses in the existing dialogue. Full descriptions are provided of all visual information, including visual context, actions and expressions of actors, and any other visual material. In addition, non-speech sounds (laughter, off-screen voices, etc.) are described, and transcripts of all dialogue are included. The sequence of description and dialogue transcripts are the same as the sequence in the synchronized media itself. As a result, the alternative for time-based media can provide a much more complete representation of the synchronized media content than audio description alone.\n\nIf there is any interaction as part of the synchronized media presentation (e.g., \"press now to answer the question\") then the alternative for time-based media would provide hyperlinks or whatever is needed to provide the same functionality.\n\nNote\n\nFor 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.\n\n1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.\n\nSee also 1.2.5 Audio Description (Prerecorded), 1.2.7 Extended Audio Description (Prerecorded) and 1.2.8 Media Alternative (Prerecorded).",
      "benefitsText": "Benefits\nThis Success Criterion may help some people who have difficulty watching video or other synchronized media content, including people who have difficulty perceiving or understanding moving images.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-description-or-media-alternative-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.5 音声解説 (収録済)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   同期したメディアに含まれているすべての収録済の映像コンテンツに対して、音声解説が提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide people who are blind or visually impaired access to the visual information in a synchronized media presentation. The audio description augments the audio portion of the presentation with the information needed when the video portion is not available. During existing pauses in dialogue, audio description provides information about actions, characters, scene changes, and on-screen text that are important and are not described or spoken in the main sound track.\n\nNote\n\nFor 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already provided in the audio track, no audio description is necessary.\n\n1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author some choice at the minimum conformance level, and to provide additional requirements at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice of providing either an audio description or a full text alternative. If they wish to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio description - a requirement already met if they chose that alternative for 1.2.3, otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they must provide an extended text description. This is an additional requirement if both 1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met, however, by providing a text description, and the 1.2.5 requirement for an audio description was met, then 1.2.8 does not add new requirements.",
      "benefitsText": "Benefits\nPeople who are blind or have low vision as well as those with cognitive limitations who have difficulty interpreting visually what is happening benefit from audio description of visual information.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-description-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.7 拡張音声解説 (収録済)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   前景音の合間が、音声解説で映像の意味を伝達するのに不十分な場合、同期したメディアに含まれているすべての収録済の映像コンテンツに対して、拡張音声解説が提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide people who are blind or visually impaired access to a synchronized media presentation beyond that which can be provided by standard audio description. This is done by periodically freezing the synchronized media presentation and playing additional audio description. The synchronized media presentation is then resumed.\n\nBecause it disrupts viewing for those who do not need the additional description, techniques that allow you to turn the feature on and off are often provided. Alternately, versions with and without the additional description can be provided.",
      "benefitsText": "Benefits\nPeople who are blind, people with low vision who cannot see the screen, as well as those with cognitive limitations who have difficulty interpreting visually what is happening, often use audio description of the visual information. However, if there is too much dialogue the audio description is insufficient. Extended audio description can provide the additional information needed to understand the video.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/extended-audio-description-prerecorded.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.2.9 音声のみ (ライブ)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ライブの音声しか含まないコンテンツに対して、それと同等の情報を提示する、時間依存メディアの代替コンテンツが提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make information conveyed by live audio, such as web-based audio conferencing, live speeches and radio Webcasts, accessible through the use of a text alternative. A live text caption service will enable live audio to be accessible to people who are deaf or hard of hearing, or who cannot otherwise hear the audio. Such services use a trained human operator who listens in to what is being said and uses a special keyboard to enter the text with only a small delay. They are able to capture a live event with a high degree of fidelity, and also to insert notes on any non spoken audio which is essential to understanding the event. A transcript is sometimes a possibility if the live audio is following a set script; but a live caption service is preferred because it plays out at the same pace as the audio itself, and can adapt to any deviations from the script that might occur.\n\nUsing untrained operators, or providing a transcript which differs markedly from what actually happens would not be considered meeting this Success Criterion.\n\nThis success criterion was intended to apply to broadcast of audio and is not intended to require that two-way audio calls between two or more individuals through web apps must be captioned regardless of the needs of users. Responsibility for providing captions would fall to the content providers (the callers) or the “host” caller, and not the application.",
      "benefitsText": "",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-only-live.html",
      "beneficiaries": [
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.3.1 情報及び関係性",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   何らかの形で提示されている情報、構造、及び関係性は、プログラムによる解釈が可能である、又はテキストで提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that information and relationships that are implied by visual or auditory formatting are preserved when the presentation format changes. For example, the presentation format changes when the content is read by a screen reader or when a user style sheet is substituted for the style sheet provided by the author.\n\nSighted users perceive structure and relationships through various visual cues — headings are often in a larger, bold font separated from paragraphs by blank lines; list items are preceded by a bullet and perhaps indented; paragraphs are separated by a blank line; items that share a common characteristic are organized into tabular rows and columns; form fields may be positioned as groups that share text labels; a different background color may be used to indicate that several items are related to each other; words that have special status are indicated by changing the font family and /or bolding, italicizing, or underlining them; items that share a common characteristic are organized into a table where the relationship of cells sharing the same row or column and the relationship of each cell to its row and/or column header are necessary for understanding; and so on. Having these structures and these relationships programmatically determined or available in text ensures that information important for comprehension will be perceivable to all.\n\nAuditory cues may be used as well. For example, a chime might indicate the beginning of a new section; a change in voice pitch or speech rate may be used to emphasize important information or to indicate quoted text; etc.\n\nWhen such relationships are perceivable to one set of users, those relationships can be made to be perceivable to all. One method of determining whether or not information has been properly provided to all users is to access the information serially in different modalities.\n\nIf links to glossary items are implemented using anchor elements (or the proper link element for the technology in use) and identified using a different font face, a screen reader user will hear that the item is a link when the glossary term is encountered even though they may not receive information about the change in font face. An on-line catalog may indicate prices using a larger font colored red. A screen reader or person who cannot perceive red, still has the information about the price as long as it is preceded by the currency symbol.\n\nSome technologies do not provide a means to programmatically determine some types of information and relationships. In that case then there should be a text description of the information and relationships. For instance, \"all required fields are marked with an asterisk (*)\". The text description should be near the information it is describing (when the page is linearized), such as in the parent element or in the adjacent element.\n\nThere may also be cases where it may be a judgment call as to whether the relationships should be programmatically determined or be presented in text. However, when technologies support programmatic relationships, it is strongly encouraged that information and relationships be programmatically determined rather than described in text.\n\nNote\n\nIt is not required that color values be programmatically determined. The information conveyed by color cannot be adequately presented simply by exposing the value. Therefore, Success Criterion 1.4.1 addresses the specific case of color, rather than Success Criterion 1.3.1.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with different disabilities by allowing user agents to adapt content according to the needs of individual users.\nUsers who are blind (using a screen reader) benefit when information conveyed through color is also available in text (including text alternatives for images that use color to convey information).\nUsers who are deaf-blind using braille (text) refreshable displays may be unable to access color-dependent information.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html",
      "beneficiaries": [
        "視覚障害のある人",
        "四肢障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.3.3 感覚的な特徴",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツを理解し操作するための説明は、形、色、大きさ、視覚的な位置、方向、又は音のような、構成要素が持つ感覚的な特徴だけに依存していない。\n  \n  注記色に関する要件は、ガイドライン 1.4 を参照。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that all users can access instructions for using the content, even when they cannot perceive shape or size or use information about spatial location or orientation. Some content relies on knowledge of the shape or position of objects that are not available from the structure of the content (for example, \"round button\" or \"button to the right\"). Some users with disabilities are not able to perceive shape or position due to the nature of the assistive technologies they use. This Success Criterion requires that additional information be provided to clarify instructions that are dependent on this kind of information.\n\nProviding information using shape and/or location, however, is an effective method for many users including those with cognitive limitations. This provision should not discourage those types of cues as long as the information is also provided in other ways.\n\nIn some languages, it is commonly understood that \"above\" refers to the content previous to that point in the content and \"below\" refers to the content after that point. In such languages, if the content being referenced is in the appropriate place in the reading order and the references are unambiguous, statements such as \"choose one of the links below\" or \"all of the above\" would conform to this Success Criterion.\n\nWCAG was designed to apply only to controls that were displayed on a web page. The intent was to avoid describing controls solely via references to visual or auditory cues. When applying this to instructions for operating physical hardware controls (e.g. a web kiosk with dedicated content), tactile cues on the hardware might be described (e.g. the arrow shaped key, the round key on the right side). This success criterion is not intended to prevent the use of tactile cues in instructions.",
      "benefitsText": "Benefits\nPeople who are blind and people who have low vision may not be able to understand instructions if they rely only on a description of the shape and/or location of content. Providing additional information in any instructions other than shape and/or location will allow users to understand the instructions even if they cannot perceive shape and/or location.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/sensory-characteristics.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.3.6 目的の特定",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n  マークアップ言語で実装されたコンテンツでは、ユーザインタフェース コンポーネント、アイコン、領域の目的はプログラムによる解釈が可能である。\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the purpose of many elements on a page can be programmatically determined, so that user agents can extract and present that purpose to users using different modalities.\n\nMany users with limited vocabularies rely on familiar terms or symbols in order to use the web. However, what is familiar to one user may not be familiar to another. When authors indicate the purpose, users can take advantage of personalization and user preferences to load a set of symbols or vocabulary familiar to them.\n\nThis Success Criterion requires the author to programmatically associate the purpose of icons, regions and components (such as buttons, links, and fields) so that user agents can determine the purpose of each and adapt indicators or terminology to make them understandable for the user. It is achieved by adding semantics or metadata that provide this context. It is similar to adding role information (as required by 4.1.2) but instead of providing information about what the UI component is (such as an image) it provides information about what the component represents (such as a link to the home page).\n\nIdentifying regions of the page allows people to remove or highlight regions with their user agent.\n\nProducts for people who are non-vocal often use symbols to help users communicate. These symbols are in fact people's language. Unfortunately, many of these symbols are both subject to copyright and not interoperable. That means end users can only use one device, and cannot use content, apps, or assistive technologies that have not been made by a single company.\n\nThis Success Criterion enables symbols to be interoperable so that symbol users can understand different content that was not just made by one company. When users' symbols are mapped to the same nodes, then user agents can load the user-understandable symbol. People can then buy the symbols and use them across different devices or applications. (Note that the symbols would still be proprietary, but they could then be interoperable.)",
      "benefitsText": "Benefits\n\nPeople who benefit have many different cognitive disabilities including:\n\nMemory\nFocus and attention\nLanguage-related\nExecutive function and decision making.\n\nMeeting this Success Criterion helps users who need extra support or a familiar interface, including the need for:\n\nSymbols and graphics with which users are familiar\nFewer features and less cognitive overload\nKeyboard shortcuts",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/identify-purpose.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.2 音声の制御",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ上にある音声が自動的に再生され、3 秒より長く続く場合、その音声を一時停止又は停止するメカニズム、もしくはシステム全体の音量レベルに影響を与えずに音量レベルを調整できるメカニズムが利用できる。\n   \n   注記この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n",
      "intentText": "Intent\n\nIndividuals who use screen reading software can find it hard to hear the speech output if there is other audio playing at the same time. This difficulty is exacerbated when the screen reader's speech output is software based (as most are today) and is controlled via the same volume control as the sound. Therefore, it is important that the user be able to turn off the background sound.\n\nHaving control of the volume includes being able to reduce its volume to zero. Muting the system volume is not \"pausing or stopping\" the autoplay audio. Both the \"pause or stop\" and control of audio volume need to be independent of the overall system volume.\n\nNote\n\nPlaying audio automatically when landing on a page may affect a screen reader user's ability to find the mechanism to stop it because they navigate by listening and automatically started sounds might interfere with that navigation. Therefore, we discourage the practice of automatically starting sounds (especially if they last more than 3 seconds), and encourage that the sound be started by an action initiated by the user after they reach the page, rather than requiring that the sound be stopped by an action of the user after they land on the page.\n\nSee also 1.4.7: Low or No Background Audio.",
      "benefitsText": "Benefits\nIndividuals who use screen reading technologies can hear the screen reader without other sounds playing. This is especially important for those who are hard of hearing and for those whose screen readers use the system volume (so they cannot turn sound down and screen reader up).\nThis Success Criterion also benefits people who have difficulty focusing on visual content (including text) when audio is playing.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/audio-control.html",
      "beneficiaries": [
        "視覚障害のある人",
        "聴覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.5 文字画像",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   使用している技術で意図した視覚的提示が可能である場合、文字画像ではなくテキストが情報伝達に用いられている。ただし、次に挙げる場合を除く:\n   \n   \n      \n      カスタマイズ可能\n      \n      文字画像は、利用者の要求に応じた視覚的なカスタマイズができる。\n         \n      \n      \n      必要不可欠\n      \n      テキストの特定の提示が、伝えようとする情報にとって必要不可欠である。\n         \n      \n      \n   \n   \n   注記ロゴタイプ (ロゴ又はブランド名の一部である文字) は必要不可欠なものであると考えられる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to encourage authors, who are using technologies which are capable of achieving their desired default visual presentation, to enable people who require a particular visual presentation of text to be able to adjust the text presentation as needed. This includes people who require the text in a particular font size, foreground and background color, font family, line spacing or alignment.\n\nIf an author can use text to achieve the same visual effect, he or she should present the information as text rather than using an image. If for any reason, the author cannot format the text to get the same effect, the effect won't be reliably presented on the commonly available user agents, or using a technology to meet this criterion would interfere with meeting other criteria such as 1.4.4, then an image of text can be used. This includes instances where a particular presentation of text is essential to the information being conveyed, such as type samples, logotypes, branding, etc. Images of text may also be used in order to use a particular font that is either not widely deployed or which the author doesn't have the right to redistribute, or to ensure that the text would be anti-aliased on all user agents.\n\nImages of text can also be used where it is possible for users to customize the image of text to match their requirements.\n\nThe definition of image of text contains the note: Note: This does not include text that is part of a picture that contains significant other visual content. Examples of such pictures include graphs, screenshots, and diagrams which visually convey important information through more than just text.\n\nTechniques for satisfying this Success Criterion are the same as those for Success Criterion 1.4.9, except that they only need to apply if the visual presentation can be achieved with the technologies that the author is using. For Success Criterion 1.4.9, the sufficient techniques would be applied only when the user can customize the output.\n\nSee also 1.4.9: Images of Text (No Exception).",
      "benefitsText": "Benefits\nPeople with low vision (who may have trouble reading the text with the authored font family, size and/or color).\nPeople with visual tracking problems (who may have trouble reading the text with the authored line spacing and/or alignment).\nPeople with cognitive disabilities that affect reading.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.8 視覚的提示",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   テキストブロックの視覚的提示において、次を実現するメカニズムが利用できる:\n   \n     利用者が、前景色と背景色を選択できる。   \n     幅が 80 字を越えない (全角文字の場合は、40 字)。   \n     テキストが、均等割り付けされていない (両端揃えではない)。   \n     段落中の行送りは、少なくとも 1.5 文字分ある。そして、段落の間隔は、その行送りの少なくとも 1.5 倍以上ある。   \n     テキストは、支援技術なしで 200％までサイズ変更でき、利用者が全画面表示にしたウィンドウで 1 行のテキストを読むときに横スクロールする必要がない。   \n  \n\n注記 1コンテンツがこれらの値を用いる必要はない。要求事項は、利用者がこれらの提示の外観を変更するメカニズムを利用できることである。このメカニズムは、ブラウザ又は他のユーザエージェントによって提供されることがある。コンテンツがこのメカニズムを提供する必要はない。\n\n注記 2言語の中には、書記体系において、可読性及び視認性を向上させるために用いる提示の概念が異なるものもある。ある書記体系でこの達成基準における提示の概念が用いられていない場合、その書記体系のコンテンツは、その提示の設定を用いる必要はなく、その提示の設定なしでも適合できる。コンテンツ制作者は、可読性及び視認性を向上させるために、言語の書記体系のガイドラインに従うことが推奨される。\n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that visually rendered text is presented in such a manner that it can be perceived without its layout interfering with its readability. People with some cognitive, language and learning disabilities and some low vision users cannot perceive the text and/or lose their reading place if the text is presented in a manner that is difficult for them to read.\n\nPeople with some visual or cognitive disabilities need to be able to select the color of text and the color of the background. They sometimes choose combinations that seem unintuitive to someone without that disability. Sometimes these combinations have very low contrast. Sometimes only very specific color combinations work for them. Control of color or other aspects of text presentation makes a huge difference to their comprehension.\n\nFor people with some reading or vision disabilities, long lines of text can become a significant barrier. They have trouble keeping their place and following the flow of text. Having a narrow block of text makes it easier for them to continue on to the next line in a block. Lines should not exceed 80 characters or glyphs (40 if CJK), where glyphs are the element of writing in the writing system for the text. Studies have shown that Chinese, Japanese and Korean (CJK) characters are approximately twice as wide as non-CJK characters when both types of characters are displayed with characteristics that achieve the same readability, so the maximum line width for CJK characters is half that of non-CJK characters.\n\nPeople with some cognitive disabilities find it difficult to track text where the lines are close together. Providing extra space between lines and paragraphs allows them to better track the next line and to recognize when they have reached the end of a paragraph. It is best if there are several different options, for instance, space-and-a-half and double spacing for line spacing. By space and a half within paragraphs we mean that top of one line is 150% further from the top of the line below it than would be true when the text is 'single spaced' (the default spacing for the font). By Paragraph spacing that is 1.5 times larger than the line spacing we mean that the spacing from the top of the last line of 1 paragraph is 250% farther from the Top of the first line of the next paragraph (i.e., that there is a blank line between the two paragraphs that is 150% of the single space blank line).\n\nPeople with certain cognitive disabilities have problems reading text that is both left and right justified. The uneven spacing between words in fully justified text can cause \"rivers of white\" space to run down the page making reading difficult and in some cases impossible. Text justification can also cause words to be spaced closely together, so that it is difficult for them to locate word boundaries.\n\nThe resizing provision ensures that visually rendered text (text characters that have been displayed so that they can be seen [vs. text characters that are still in data form such as ASCII]) can be scaled successfully without requiring that the user scroll left and right to see all of the content. When the content has been authored so that this is possible, the content is said to reflow. This permits people with low vision and people with cognitive disabilities to increase the size of the text without becoming disoriented.\n\nThe scaling of content is primarily a user agent responsibility. User agents that satisfy UAAG 1.0 Checkpoint 4.1 allow users to configure text scale. The author's responsibility is to create Web content that does not prevent the user agent from scaling the content and that allows the reflow of the content within the current width of the viewport. See 1.4.4: Resize Text for additional discussion of resizing text.\n\nThe horizontal scrolling requirement is not intended to apply to small-screen devices where long words may be displayed on a single line and require users to scroll horizontally. For the purposes of this requirement, authors should ensure that content meets this requirement on standard desktop/laptop displays with the browser window maximized. Since people generally keep their computers for several years, it is best not to rely on the latest desktop/laptop display resolutions but to consider the common desktop/laptop display resolutions over the course of several years when making this evaluation.\n\nWrapping should always be possible as long as words are not so long that a single word is more than half the width of a full screen. Very long URIs may run off the side of an enlarged screen, but they would not be considered text for \"reading\" and, therefore, would not violate this provision.\n\nThis provision does not mean that a user would never need to use horizontal scrolling. It only means that they would not need to use horizontal scrolling back and forth to read a line of text. For example, if a page consisted of two equal sized columns of text, it would automatically meet this provision. Enlarging the page would mean that the first column was completely on screen and the user could just scroll vertically down the page to read it. To read the second column, they would horizontally scroll to the right, where the right hand column would then fit entirely within the width of the screen, and read that column without further horizontal scrolling.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps low vision users by letting them see text without distracting presentational features. It lets them configure text in ways that will be easier for them to see by letting them control the color and size of blocks of text.\n\nThis Success Criterion helps people with cognitive, language and learning disabilities perceive text and track their location within blocks of text.\n\nPeople with some cognitive disabilities can read text better when they select their own foreground and background color combinations.\nPeople with some cognitive disabilities can track their locations more easily when blocks of text are narrow and when they can configure the amount of space between lines and paragraphs.\nPeople with some cognitive disabilities can read text more easily when the spacing between words is regular.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/visual-presentation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.9 文字画像 (例外なし)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   文字画像は、純粋な装飾に用いられているか、テキストの特定の提示が伝えようとする情報にとって必要不可欠である場合に用いられている。\n   \n   注記ロゴタイプ (ロゴ又はブランド名の一部である文字) は必要不可欠なものであると考えられる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to enable people who require a particular visual presentation of text to be able to adjust the text presentation as required. This includes people who require the text in a particular font size, foreground and background color, font family, line spacing or alignment.\n\nThis means implementing the text in a manner that allows its presentation to be changed or providing a mechanism by which users can select an alternate presentation. Using images of text is an example of an implementation that does not allow users to alter the presentation of the text within it.\n\nIn some situations, a particular visual presentation of the text is essential to the information being conveyed. This means that information would be lost without that particular visual presentation. In this case implementing the text in a manner that allows its presentation to be changed is not required. This includes text that demonstrates a particular visual aspect of the text, such as a particular font family, or text that conveys an identity, such as text within a company logo.\n\nText that is decorative does not require implementing the text in a manner that allows its presentation to be changed.\n\nThe definition of image of text contains the note: Note: This does not include text that is part of a picture that contains significant other visual content. Examples of such pictures include graphs, screenshots, and diagrams which visually convey important information through more than just text.",
      "benefitsText": "Benefits\nPeople with low vision (who may have trouble reading the text with the authored font family, size and/or color).\nPeople with visual tracking problems (who may have trouble reading the text with the authored line spacing and/or alignment).\nPeople with cognitive disabilities that affect reading.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/images-of-text-no-exception.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.12 テキストの間隔",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   以下のテキストスタイルプロパティをサポートするマークアップ言語を用いて実装されているコンテンツにおいては、以下をすべて設定し、かつ他のスタイルプロパティを変更しないことによって、コンテンツ又は機能の損失が生じない:\n   \n   \n     行の間隔 (行送り) をフォントサイズの少なくとも 1.5 倍に設定する\n     段落に続く間隔をフォントサイズの少なくとも 2 倍に設定する\n     文字の間隔 (字送り) をフォントサイズの少なくとも 0.12 倍に設定する\n     単語の間隔をフォントサイズの少なくとも 0.16 倍に設定する\n   \n \n 例外: テキスト表記においてこれらのテキストスタイルプロパティの一つ以上を使用しない自然言語及び文字体系では、その言語と文字体系の組み合わせに存在するプロパティだけを用いて、この達成基準に適合することができる。\n\n 注記 1コンテンツが、これらのテキストの間隔の値を用いる必要はない。要求事項は、制作者が指定したテキストの間隔を利用者が上書きした場合に、コンテンツ又は機能が失われないことである。\n\n 注記 2言語の中には、書記体系において、例えば段落開始のインデントのように、異なるテキストの間隔の設定が用いられるものもある。コンテンツ制作者は、テキストの可読性及び視認性を向上させるために、その書記体系の、その地域に適用されるガイドラインに従うことが推奨される。\n \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion (SC) is to ensure that when people override author specified text spacing to improve their reading experience, content is still readable and operable. Each of the requirements stipulated in the SC's four bullets helps ensure text styling can be adapted by the user to suit their needs.\n\nThe specified metrics set a minimum baseline. The values in between the author's metrics and the metrics specified in this SC should not have loss of content or functionality.\n\nThis SC focuses on the adaptability of content to an increase in spacing between lines, words, letters, and paragraphs. Any combination of these may assist a user with effectively reading text. As well, ensuring that content correctly adapts when users override author settings for spacing also significantly increases the likelihood other style preferences can be set by the user. For example, a user may need to change to a wider font family than the author has set in order to effectively read text.\n\nAuthor Responsibility\n\nThis SC does not dictate that authors must set all their content to the specified metrics, nor does the SC intend to imply that all users will adjust the specified metrics. Rather, it specifies that should a user choose to set any of these metrics they can do so without any loss of content or functionality. The author requirement is both to not interfere with a user's ability to override the author settings, and to ensure that content thus modified does not break content in the manners shown in figures 1 through 3 in Effects of Not Allowing for Spacing Override.\n\nIn some human languages and scripts, some of the metrics specified by the SC are inapplicable. For example, languages such as Japanese do not use spacing following paragraphs, meaning that users are unlikely to make any paragraph spacing changes in practice. The exception in this SC allows authors to ignore text style properties which are inapplicable to the combination of language and script being used.\n\nIt is beneficial for users if authors use any locally available guidance for improving readability in the local language or writing system. If the user chooses to go beyond the metrics specified, any resulting loss of content or functionality is the user's responsibility.\n\nFurther, this SC is not concerned with how users change the line height and spacing metrics. It does not require that content implement its own mechanisms to allow users to do this. It is not a failure of the content if a user agent or platform does not provide a way for users to do this. Content does not fail this SC if the method chosen by the user - for instance, the use of an extension or bookmarklet - fails to correctly set the line height and spacing text properties on the content (provided that the content is not actively and purposely preventing the properties from being added).\n\nApplicability\n\nIf the markup-based technologies being used are capable of overriding text to the Success Criterion's metrics, then this SC is applicable. For instance Cascading Style Sheet/HTML technologies are quite able to allow for the specified spacing metrics. Plugin technologies would need to have a built-in ability to modify styles to the specified metrics. Currently, this SC does not apply to PDF as it is not implemented using markup.\n\nExamples of text that are typically not affected by style properties and not expected to adapt are:\n\nVideo captions embedded directly into the video frames and not provided as an associated caption file\nImages of text\n\nFor this SC, canvas implementations of text are considered to be images of text.\n\nUse of ellipses\n\nThere may be regions of a page where text containers cannot expand due to design constraints (such as a maximum width for the left navigation or table column headers). A common convention if text exceeds its space is to replace truncated text with an ellipsis. Where ellipses appear as a result of modifying text style properties, the page can still meet the Text Spacing requirements, so long as the content is still available. For example:\n\na mechanism is provided to reveal the truncated text on the page (for instance, the text appears on focus or on activation)\nwhere the ellipsis is part of a section of content which includes a link, the truncated text is revealed on the linked page\n\nWhere text is not truncated but it is when text is spaced, if there is no mechanism to show the truncated text, it fails this Success Criterion.\n\nUser Responsibility\n\nThe ability to read and derive meaning from the overridden spacing rests with the user. The user may choose to exceed the spacing adjustments in the SC. If the increased spacing causes loss of content or functionality, the user will adjust or return to the author’s original spacing or spacing within the bounds of the SC. Regardless, the user needs the flexibility to adjust spacing within the bounds set in the SC without loss of content or functionality. Such changes may be achieved via user stylesheet, bookmarklet, extension, or application.\n\nEffects of Not Allowing for Spacing Override\n\nThe following images show some types of failures when authors do not take into consideration that users may override spacing to the metrics specified in this Success Criterion.\n\nText Cut Off\n\nThe bottom portion of the words \"Your Needs\" is cut off in a heading making that text unreadable in Figure 1. It should read \"We Provide a Mobile Application Service to Meet Your Needs.\"\n\nFigure 1 Vertical text cut off is a failure.\n\nIn Figure 2 the last portion of text is cut off in 3 side-by-side headings. The 1st heading should read \"A cog in the wheel.\" But it reads \"A cog in the whe\". Only half of the second \"e\" is visible and the letter \"l\" is completely missing. The 2nd heading should read \"A penny for your thoughts\". But it reads \"A penny for your\". The 3rd should read \"Back to the drawing board.\" But it reads \"Back to the drawi\".\n\nFigure 2 Horizontal text cut off is a failure.\nText Overlap\n\nIn Figure 3 the last 3 words \"Groups and Programs\" of the heading \"Technologists Seeking Input from Groups and Programs\" overlap the following sentence. That sentence should read, \"You are invited to share ideas and areas of interest related to the integration of technology from a group or program perspective.\" But the words \"You are invited to share ideas\" are obscured and unreadable.\n\nFigure 3 Overlapping text is a failure.",
      "benefitsText": "Benefits\nPeople with low vision who require increased space between lines, words, and letters are able to read text.\nPeople with dyslexia may increase space between lines, words, and letters to increase reading speed.\nAlthough not required by this SC, white space between blocks of text can help people with cognitive disabilities discern sections and call out boxes.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/text-spacing.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 1.4.13 ホバー又はフォーカスで表示されるコンテンツ",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n       \n    \tポインタホバー又はキーボードフォーカスを受け取ってから外すことで、追加コンテンツを表示させてから非表示にさせる場合は、以下の要件を全て満たす:\n\n  \n\n    非表示にすることができる \n    ポインタホバー又はキーボードフォーカスを動かさずに追加コンテンツを非表示にするメカニズムが存在する。ただし、追加コンテンツが入力エラーを伝える場合や、他のコンテンツを不明瞭にしたり置き換えたりしない場合は除く。\n\n    ホバーすることができる \n   ポインタホバーによって追加コンテンツを表示させることができる場合、その追加コンテンツを消すことなく、ポインタを追加コンテンツ上で動かすことができる。\n\n    表示が継続される \n    ホバーやフォーカスが解除される、利用者が非表示にする、又はその情報が有効でなくなるまでは、追加コンテンツが表示され続ける。\n\n  \n    \t\n    \t例外: 追加コンテンツの視覚的提示がユーザエージェントによって制御されていて、かつコンテンツ制作者が変更していない場合は例外とする。\n\n    \t注記 1ユーザエージェントによって制御されている追加コンテンツの例としては、HTML の title 属性 [HTML] を用いて作られているブラウザのツールチップが挙げられる。\n     注記 2ホバー時やフォーカス時に表示されるカスタムツールチップ、サブメニュー、他の非モーダルポップアップは、この達成基準の適用対象となる「追加コンテンツ」の例である。\n     注記 3この達成基準は、トリガーとなるコンポーネント自体に追加で表示されるコンテンツに対して適用される。キーボードフォーカスによって可視化される非表示のコンポーネント (例えば、ページの別の部分にスキップするためのリンク) は追加コンテンツを提示しないため、この達成基準の適用対象外である。\n  ",
      "intentText": "Intent\n\nAdditional content that appears and disappears in coordination with keyboard focus or pointer hover often leads to accessibility issues. Reasons for such issues include:\n\nthe user may not have intended to trigger the interaction\nthe user may not know new content has appeared\nthe new content may intefere with a user's ability to do a task\n\nExamples of such interactions can include custom tooltips, sub-menus and other nonmodal popups which display on hover and focus. The intent of this success criterion is to ensure that authors who cause additional content to appear and disappear in this manner must design the interaction in such a way that users can:\n\nperceive the additional content AND\ndismiss it without disrupting their page experience.\n\nThere are usually more predictable and accessible means of adding content to the page, which authors are recommended to employ. If an author does choose to make additional content appear and disappear in coordination with hover and keyboard focus, this success criterion specifies three conditions that must be met:\n\ndismissable\nhoverable\npersistent\n\nEach of these is discussed in a separate section.\n\nDismissable\n\nThe intent of this condition is to ensure that the additional content does not interfere with viewing or operating the page's original content. When magnified, the portion of the page visible in the viewport can be significantly reduced. Mouse users frequently move the pointer to pan the magnified viewport and display another portion of the screen. However, almost the entire portion of the page visible in this restricted viewport may trigger the additional content, making it difficult for a user to pan without re-triggering the content. A keyboard means of dismissing the additional content provides a workaround.\n\nAlternatively, low vision users who can only navigate via the keyboard do not want the small area of their magnified viewport cluttered with hover text. They need a keyboard method of dismissing something that is obscuring the current focal area.\n\nTwo methods may be used to satisfy this condition and prevent such interference:\n\nPosition the additional content so that it does not obscure any other content including the trigger, with the exception of white space and purely decorative content, such as a background graphic which provides no information.\nProvide a mechanism to easily dismiss the additional content, such as by pressing Escape.\n\nFor most triggers of relatively small size, it is desirable for both methods to be implemented. If the trigger is large, noticing the additional content may be of concern if it appears away from the trigger. In those cases, only the second method may be appropriate.\n\nThe success criterion allows for input error messages to persist as there are cases that require attention, explicit confirmation or remedial action.\n\nHoverable\n\nThe intent of this condition is to ensure that additional content which may appear on hover of a target may also be hovered itself. Content which appears on hover can be difficult or impossible to perceive if a user is required to keep their mouse pointer over the trigger. When the added content is large, magnified views may mean that the user needs to scroll or pan to completely view it, which is impossible unless the user is able to move their pointer off the trigger without the additional content disappearing.\n\nAnother common situation is when large pointers have been selected via platform settings or assistive technology. Here, the pointer can obscure a significant area of the additional content. A technique to view the content fully in both situations is to move the mouse pointer directly from the trigger onto the new content. This capability also offers significant advantages for users who utilize screen reader feedback on mouse interactions. This condition generally implies that the additional content overlaps or is positioned adjacent to the target.\n\nPersistent\n\nThe intent of this condition is to ensure users have adequate time to perceive the additional content after it becomes visible. Users with disabilities may require more time for many reasons, such as to change magnification, move the pointer, or simply to bring the new content into their visual field. Once it appears, the content should remain visible until:\n\nThe user removes hover or focus from the trigger and the additional content, consistent with the typical user experience;\nThe user dismisses the additional content via the mechanism provided to satisfy the Dismissable condition; or\nThe information conveyed by the additional content becomes invalid, such as a 'busy' message that is no longer valid.\nAdditional Notes\nThis criterion does not attempt to solve such issues when the appearance of the additional content is completely controlled by the user agent. A prominent example is the common behavior of browsers to display the title  attribute in HTML as a small tooltip.\nModal dialogs are out of scope for this criterion because they must take keyboard focus and thus should not appear on hover or focus. Refer to Success Criterion 3.2.1, On Focus.\nContent which can be triggered via pointer hover should also be able to be triggered by keyboard focus. Refer to Success Criterion 2.1.1, Keyboard.",
      "benefitsText": "Benefits\nUsers with low vision who view content under magnification will be better able to view content on hover or focus without reducing their desired magnification.\nUsers who increase the size of mouse cursors via platform settings or assistive technology will be able to employ a technique to view obscured content on hover.\nUsers with low vision or cognitive disabilities will have adequate time to perceive additional content appearing on hover or focus and to view the trigger content with less distraction.\nusers with low pointer accuracy will be able to more easily dismiss unintentionally-triggered additional content",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/content-on-hover-or-focus.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.1.4 文字キーのショートカット",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n  文字 (大文字と小文字を含む)、句読点、数字、又は記号のみを使用したキーボードショートカットがコンテンツに実装されている場合、少なくとも次のいずれかを満たしている:\n\n  \n   \n   解除\n    ショートカットを解除するメカニズムが利用できる \n      \t\t\t\t\t\t\n   再割当て\n     一つ以上のキーボードの非印字キー (例えば Ctrl、Alt) を含むようにショートカットを再割当てするメカニズムが利用できる \n\n    フォーカス中にのみ有効化\n    ユーザインタフェース コンポーネントのキーボードショートカットは、そのコンポーネントがフォーカスをもっているときのみ有効になる。\n    \n    \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to reduce accidental activation of keyboard shortcuts. Character key shortcuts work well for many keyboard users, but are inappropriate and frustrating for speech input users — whose means of input is strings of letters — and for keyboard users who are prone to accidentally hit keys. To rectify this issue, authors need to allow users to turn off or reconfigure shortcuts that are made up of only character keys.\n\nNote that this success criterion doesn't affect components such as listboxes and drop-down menus. Although these components contain values (words) that may be selected by one or more character keys, the shortcuts are only active when the components have focus. Other components such as menus may be accessed or opened with a single non-character shortcut (e.g., Alt or Alt+F) before pressing a single character key to select an item. This makes the full path to invoking a menu a two-step shortcut that includes a non-printable key. Accesskeys are also not affected because they include modifier keys.\n\nSpeech Input users generally work in a single mode where they can use a mix of dictation and speech commands. This works well because the user knows to pause before and after commands, and commands are usually at least two words long. So, for instance, a user might say a bit of dictation, such as \"the small boat\", then pause, and say a command to delete that dictation, such as \"Delete Line\". In contrast, if the user were to say the two phrases together without a pause, the whole phrase would come out as dictation (i.e., \"the small boat delete line\"). Although speech input programs often include modes that listen only for dictation or only for commands, most speech users use the all-encompassing mode all the time because it is a much more efficient workflow. It could decrease command efficiency significantly if users were to change to command mode and back before and after issuing each command.\n\nSpeech users can also speak most keyboard commands (e.g., \"press Control Foxtrot\") without any problems. If the website or app is keyboard enabled, the speech user can also write a native speech macro that calls the keyboard command, such as \"This Print\" to carry out Ctrl+P.\n\nSingle-key shortcuts are the exception. While using single letter keys as controls might be appropriate and efficient for many keyboard users, single-key shortcuts are disastrous for speech users. The reason for this is that when only a single key is used to trip a command, a spoken word can become a barrage of single-key commands if the cursor focus happens to be in the wrong place.\n\nFor example, a speech-input user named Kim has her cursor focus in the main window of a web mail application that uses common keyboard shortcuts to navigate (\"k\"), archive (\"y\") and mute messages (\"m\"). A coworker named Mike enters her office and says \"Hey Kim\" and her microphone picks that up. The Y of \"hey\" archives the current message. K in \"Kim\" moves down one conversation and M mutes a message or thread. And, if Kim looks up and says \"Hey Mike\" without remembering to turn off the microphone, the same three things happen in a different sequence.\n\nA user interacting with a webpage or web app that doesn't use single-character shortcuts doesn't have this problem. Inadvertent strings of characters from the speech application are not interpreted as shortcuts if a modifier key is required. A speech user filling in a text input form may find that a phrase that is accidentally picked up by the speech microphone results in stray text being entered into the field, but that is easily seen and undone. The Resources section of this page contains links to videos demonstrating these types of issues.",
      "benefitsText": "Benefits\nSpeech users will be able to turn off single-key shortcuts so they can avoid accidentally firing batches of them at once. This will allow speech users to make full use of programs that offer single-key shortcuts to keyboard users.\nKeyboard-only users who have dexterity challenges can also be prone to accidentally hitting keys. Those users would be able to avoid problematic single character shortcuts by turning them off or modifying them to include at least one non-character key.\nAllowing all shortcut keys to be remapped can help users with some cognitive disabilities, since the same shortcuts can be assigned to perform the same actions across different applications.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/character-key-shortcuts.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.1 タイミング調整可能",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツに制限時間を設定する場合は、次に挙げる事項のうち、少なくとも一つを満たしている\n   \n   \n      \n      解除\n      \n      制限時間があるコンテンツを利用する前に、利用者がその制限時間を解除することができる。又は、\n         \n      \n      \n      調整\n      \n      制限時間があるコンテンツを利用する前に、利用者が少なくともデフォルト設定の 10 倍を超える、大幅な制限時間の調整をすることができる。又は、\n         \n      \n      \n      延長\n      \n      時間切れになる前に利用者に警告し、かつ少なくとも 20 秒間の猶予をもって、例えば「スペースキーを押す」などの簡単な操作により、利用者が制限時間を少なくとも 10 倍以上延長することができる。又は、\n         \n      \n      \n      リアルタイムの例外\n      \n      リアルタイムのイベント (例えば、オークション) において制限時間が必須の要素で、その制限時間に代わる手段が存在しない。又は、\n         \n      \n      \n      必要不可欠な例外\n      \n      制限時間が必要不可欠なもので、制限時間を延長することがコンテンツの動作を無効にすることになる。又は、\n         \n      \n      \n      20 時間の例外\n      \n      制限時間が 20 時間よりも長い。\n         \n      \n      \n   \n   \n   注記この達成基準は、制限時間の結果として、コンテンツ又は状況の予期せぬ変化を引き起こさないように利用者がタスクを完了できるようにするためのものである。この達成基準は、利用者の動作の結果としてのコンテンツ又はコンテキストの変化を制限する達成基準 3.2.1 と併せて考慮すること。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users with disabilities are given adequate time to interact with Web content whenever possible. People with disabilities such as blindness, low vision, dexterity impairments, and cognitive limitations may require more time to read content or to perform functions such as filling out on-line forms. If Web functions are time-dependent, it will be difficult for some users to perform the required action before a time limit occurs. This may render the service inaccessible to them. Designing functions that are not time-dependent will help people with disabilities succeed at completing these functions. Providing options to disable time limits, customize the length of time limits, or request more time before a time limit occurs helps those users who require more time than expected to successfully complete tasks. These options are listed in the order that will be most helpful for the user. Disabling time limits is better than customizing the length of time limits, which is better than requesting more time before a time limit occurs.\n\nAny process that happens without user initiation after a set time or on a periodic basis is a time limit. This includes partial or full updates of content (for example, page refresh), changes to content, or the expiration of a window of opportunity for a user to react to a request for input.\n\nIt also includes content that is advancing or updating at a rate beyond the user's ability to read and/or understand it. In other words, animated, moving or scrolling content introduces a time limit on a users ability to read content.\n\nThis success criterion is generally not applicable when the content repeats or is synchronized with other content, so long as the information and data is adjustable or otherwise under the control of the end user. Examples of time limits for which this success criterion is not applicable include scrolling text that repeats, captioning, and carousels. These are situations which do include time limits, but the content is still available to the user because it has controls for accessing it, as specified in 2.2.2 Pause, Stop, Hide.\n\nIn some cases, however, it is not possible to change the time limit (for example, for an auction or other real-time event) and exceptions are therefore provided for those cases.\n\nContent that operates on a timer does not need to be time adjustable if there is an alternative that does not rely on a timer. For example, a web application such as an email client provides notification of new email arriving with a temporary message (such as a 'toast' message) in the lower right-hand side of the interface, and the message disappears after 5 seconds. Users are able to identify the arrival of email through other means, such as viewing the Inbox, so the disappearance of the message does not set a time limit on the their ability to determine if new mail has arrived. If the user has no other means of discovering the same information (or performing the same function), then each message would need to meet this Success Criterion in order to provide users with sufficient time to access the information.\n\nNotes regarding server time limits\n\nTimed server redirects can be found below under Common Failures.\nNon-timed server redirects (e.g., 3xx response codes) are not applicable because there is no time limit: they work instantly.\nThis Success Criterion applies only to time limits that are set by the content itself. For example, if a time limit is included in order to address security concerns, it would be considered to have been set by the content because it is designed to be part of the presentation and interaction experience for that content. Time limits set externally to content, such as by the user agent or by factors intrinsic to the Internet are not under the author's control and not subject to WCAG conformance requirements. Time limits set by Web servers should be under the author's/organization's control and are covered. (Success Criteria 2.2.3, 2.2.4 and 2.2.5 may also apply.)\nTen times the default was chosen based on clinical experience and other guidelines. For example, if 15 seconds is allowed for a user to respond and hit a switch, 150 seconds would be sufficient to allow almost all users to hit a switch even if they had trouble.\n20 seconds was also based on clinical experience and other guidelines. 20 seconds to hit 'any switch' is sufficient for almost all users including those with spasticity. Some would fail, but some would fail all lengths of time. A reasonable period for requesting more time is required since an arbitrarily long time can provide security risks to all users, including those with disabilities, for some applications. For example, with kiosks or terminals that are used for financial transactions, it is quite common for people to walk away without signing off. This leaves them vulnerable to those walking up behind them. Providing a long period of inactivity before asking, and then providing a long period for the person to indicate that they are present can leave terminals open for abuse. If there is no activity the system should ask if the user is there. It should then ask for an indication that a person is there ('hit any key') and then wait long enough for almost anyone to respond. For \"hit any key,\" 20 seconds would meet this. If the person indicates that they are still present, the device should return the user to the exact condition that existed before it asked the question.\n20 hours was chosen as an upper limit because it is longer than a full waking day.\n\nIn cases where timing is not an intrinsic requirement but giving users control over timed events would invalidate the outcome, a third party can control the time limits for the user (for example, granting double time on a test).\n\nSee also 2.2.3: No Timing.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.\nPeople with reading disabilities, cognitive limitations, and learning disabilities who may need more time to read or comprehend information can have additional time to read the information by pausing the content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.2 一時停止、停止、非表示",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   動きのある、点滅している、スクロールする、又は自動更新する情報は、次のすべての事項を満たしている\n   \n   \n      \n      動き、点滅、スクロール\n      \n      動きのある、点滅している、又はスクロールしている情報が、(1) 自動的に開始し、(2) 5 秒よりも長く継続し、かつ、(3) その他のコンテンツと並行して提示される場合、利用者がそれらを一時停止、停止、又は非表示にすることのできるメカニズムがある。ただし、その動き、点滅、又はスクロールが必要不可欠な動作の一部である場合は除く。\n         \n      \n      \n      自動更新\n      \n      自動更新する情報が、(1) 自動的に開始し、 (2) その他のコンテンツと並行して提示される場合、利用者がそれを一時停止、停止、もしくは非表示にする、又はその更新頻度を調整することのできるメカニズムがある。ただし、その自動更新が必要不可欠な動作の一部である場合は除く。\n         \n      \n      \n   \n   \n   注記 1画面がちらつく、又は閃光を放つコンテンツに関する要件は、ガイドライン 2.3 を参照。\n   \n   注記 2この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n   注記 3定期的にソフトウェアによって自動的に更新されるコンテンツ、又はユーザエージェントにストリーム配信されるコンテンツでは、コンテンツ再生の一時停止と再開の操作の間に生成、又は受信される情報を保持、又は提示する必要はない。これは技術的に不可能であることが考えられ、多くの状況において利用者の混乱を招くことにつながる可能性があるためである。\n   \n   注記 4コンテンツの読み込み中やそれに類似した状況の一部として表示されるアニメーションについては、この段階ですべての利用者に対していかなるインタラクションも発生する可能性がなく、かつコンテンツ読み込みの進行状況を表示しないことが利用者の混乱を招いたり、コンテンツが動作を停止した、又はコンテンツが破損しているという誤解を生じたりする可能性がある場合には、必要不可欠なものと考えることができる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to avoid distracting users during their interaction with a Web page.\n\n\"Moving, blinking and scrolling\" refers to content in which the visible content conveys a sense of motion. Common examples include motion pictures, synchronized media presentations, animations, real-time games, and scrolling stock tickers. \"Auto-updating\" refers to content that updates or disappears based on a preset time interval. Common time-based content includes audio, automatically updated weather information, news, stock price updates, and auto-advancing presentations and messages. The requirements for moving, blinking and scrolling content and for auto-updating content are the same except that:\n\nauthors have the option of providing the user with a means to control the frequency of updates when content is auto-updating and\nthere is no five second exception for auto-updating since it makes little sense to auto-update for a few seconds and then stop\n\nContent that moves or auto-updates can be a barrier to anyone who has trouble reading stationary text quickly as well as anyone who has trouble tracking moving objects. It can also cause problems for screen readers.\n\nMoving content can also be a severe distraction for some people. Certain groups, particularly those with attention deficit disorders, find blinking content distracting, making it difficult for them to concentrate on other parts of the Web page. Five seconds was chosen because it is long enough to get a user's attention, but not so long that a user cannot wait out the distraction if necessary to use the page.\n\nContent that is paused can either resume in real-time or continue playing from the point in the presentation where the user left off.\n\nPausing and resuming where the user left off is best for users who want to pause to read content and works best when the content is not associated with a real-time event or status.\n\nNote\n\nSee 2.2.1: Timing Adjustable for additional requirements related to time-limits for reading.\n\nPausing and jumping to current display (when pause is released) is better for information that is real-time or \"status\" in nature. For example, weather radar, a stock ticker, a traffic camera, or an auction timer, would present misleading information if a pause caused it to display old information when the content was restarted.\n\nNote\n\nHiding content would have the same result as pausing and jumping to current display (when pause is released).\n\nFor a mechanism to be considered \"a mechanism for the user to pause,\" it must provide the user with a means to pause that does not tie up the user or the focus so that the page cannot be used. The word \"pause\" here is meant in the sense of a \"pause button\" although other mechanisms than a button can be used. Having an animation stop only so long as a user has focus on it (where it restarts as soon as the user moves the focus away) would not be considered a \"mechanism for the user to pause\" because it makes the page unusable in the process and would not meet this SC.\n\nIt is important to note that the terms \"blinking\" and \"flashing\" can sometimes refer to the same content.\n\n\"Blinking\" refers to content that causes a distraction problem. Blinking can be allowed for a short time as long as it stops (or can be stopped)\n\"Flashing\" refers to content that can trigger a seizure (if it is more than 3 per second and large and bright enough). This cannot be allowed even for a second or it could cause a seizure. And turning the flash off is also not an option since the seizure could occur faster than most users could turn it off.\nBlinking usually does not occur at speeds of 3 per second or more, but it can. If blinking occurs faster than 3 per second, it would also be considered a flash.",
      "benefitsText": "Benefits\nProviding content that stops blinking after five seconds or providing a mechanism for users to stop blinking content allows people with certain disabilities to interact with the Web page.\nOne use of content that blinks is to draw the visitor's attention to that content. Although this is an effective technique for all users with vision, it can be a problem for some users if it persists. For certain groups, including people with low literacy, reading and intellectual disabilities, and people with attention deficit disorders, content that blinks may make it difficult or even impossible to interact with the rest of the Web page.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.3 タイミング非依存",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   タイミングは、コンテンツによって提示されるイベント又は動作の必要不可欠な部分ではない。ただし、インタラクティブではない同期したメディア及びリアルタイムのイベントは除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to minimize the occurrence of content that requires timed interaction. This enables people with blindness, low vision, cognitive limitations, or motor impairments to interact with content. This differs from the Level A Success Criterion in that the only exception is for real-time events.\n\nNote\n\nVideo only, such as sign language, is covered in Guideline 1.1.",
      "benefitsText": "Benefits\nPeople with physical disabilities often need more time to react, to type and to complete activities. People with low vision need more time to locate things on screen and to read. People who are blind and using screen readers may need more time to understand screen layouts, to find information and to operate controls. People who have cognitive or language limitations need more time to read and to understand. People who are deaf and communicate in sign language may need more time to read information printed in text (which may be a second language for some).\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/no-timing.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.4 割り込み",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   割り込みは、利用者が延期、又は抑制することができる。ただし、緊急を要する割り込みは除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow users to turn off updates from the author/server except in emergencies. Emergencies would include civil emergency alert messages or any other messages that warn of danger to health, safety, or property, including data loss, loss of connection, etcetera.\n\nThis allows access by people with cognitive limitations or attention disorders by enabling them to focus on the content. It also allows users who are blind or have low vision to keep their \"viewing\" focus on the content they are currently reading.",
      "benefitsText": "Benefits\nIndividuals with attention deficit disorders can focus on content without distraction.\nIndividuals with low vision or who use screen readers will not have content updated while they are viewing it (which can lead to discontinuity and misunderstanding if they start reading in one topic and finish in another).",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/interruptions.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.5 再認証",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   認証済のセッションが切れた場合は、再認証後でもデータを失うことなく利用者が操作を継続できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow all users to complete authenticated transactions that have inactivity time limits or other circumstances that would cause a user to be logged out while in the midst of completing the transaction.\n\nFor security reasons, many sites implement an authentication time limit after a certain period of inactivity. These time limits may cause problems for persons with disabilities because it may take longer for them to complete the activity.\n\nOther sites will log a person out of a session if a person logs in on the Web site from another computer or if other activities arise that make the site suspicious of whether the person is still the same legitimate person who logged in originally. When users are logged out while still in the midst of a transaction - it is important that they be given the ability to re-authenticate and continue with the transaction without the loss of any data already entered.",
      "benefitsText": "Benefits\nThis Success Criterion benefits people who may require additional time to complete an activity. People with cognitive limitations may read slowly and require additional time to read and respond to a questionnaire. Users interacting via a screen reader may need extra time to navigate and complete a complicated form. A person with motor impairments or who navigates with an alternative input device may require additional time to navigate through or complete input within a form.\nIn circumstances where a sign-language interpreter may be relating audio content to a user who is deaf, control over time limits is also important.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/re-authenticating.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.2.6 タイムアウト",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   データの損失を引き起こす恐れのある利用者の無操作の残り時間が警告される。ただし、利用者が 20 時間以上何もしなくてもデータが保持される場合は、この限りではない。\n  \n注記プライバシー関連の規制により、利用者を認証する前や利用者のデータが保存される前に、利用者の明確な同意が必要になる可能性がある。利用者が未成年の場合、ほとんどの司法管轄、国又は地域で、利用者からの明示的な同意を要請することができない。この達成基準に適合するためのアプローチとしてデータの保存を検討する場合は、プライバシーの専門家や弁護士に相談するのが望ましい。\n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that when a timeout is used, users know what duration of inactivity will cause the page to time out and result in lost data. The use of timed events can present significant barriers for users with cognitive disabilities, as these users may require more time to read content or to perform functions, such as completing an online form.\n\nDuring the completion of an online process, such as to reserve a hotel room or purchase a plane ticket, a user with a cognitive impairment may become overwhelmed with lengthy instructions and data input required to complete the process. The user may not be able to complete the process in one sitting and may need to take a break. Users should be able to leave a process without losing their current place within the process, and without losing information that has already been entered. If users cannot take a break and check their work, many will often be unable to complete a task correctly.\n\nThis Success Criterion works in tandem with Success Criterion 2.2.1 Timing Adjustable, but is specifically focused on notification of timeouts related to user inactivity.\n\nThe best way to conform to this success criterion is to keep the user data for at least 20 hours. This enables the user with disabilities and the aging community to start and finish a task, taking breaks as needed. However, when it is not practical to save the user data the author must warn the user about the duration of inactivity which will result in a timeout. Timeouts should be displayed to the user once at the beginning of the related task or process and not at each step.\n\nThis success criterion only applies to timeouts that are within the content provider's knowledge or control. For example, if the user closes a web browser or device and loses content in an open page that has not yet been submitted, the success criterion has not been violated.\n\nExamples of privacy regulations mentioned in the Success Criterion note, and related compliance standards, are PCI DSS (Payment Card Industry Data Security Standard) and HIPAA (Health Insurance Portability and Accountability Act of 1996).",
      "benefitsText": "Benefits\n\nThis Success Criterion helps users by ensuring they are notified about timeouts related to inactivity.\n\nWhen a user knows how much time they are allowed for a task, they will know whether they can take a needed break and resume their work without needing to start again. This enables many users to complete tasks online that they otherwise could not do. If a situation exists where a timeout is necessary, the user is warned at the start of the task about the length of inactivity that would generate a timeout. The user can then decide if they can manage this task or not in the given time, or if they need to prepare materials in advance of starting a process. This will reduce the frustration of losing work due to a timeout.\n\nThis Success Criterion helps people with many different cognitive disabilities, including people with:\n\nlanguage-related disabilities;\nmemory-related disabilities;\nfocus-and-attention-related disabilities; and\ndisabilities that affect executive function and decision making.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/timeouts.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.3.1 3 回の閃光、又は閾値以下",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページには、どの 1 秒間においても 3 回を超える閃光を放つものがない、又は閃光が一般閃光閾値及び赤色閃光閾値を下回っている。\n   \n   注記この達成基準を満たさないコンテンツでは、利用者がそのウェブページ全体を使用できない恐れがあるため、ウェブページ上のすべてのコンテンツは他の達成基準を満たすために用いられているか否かにかかわらず、この達成基準を満たさなければならない。適合要件 5: 非干渉を参照。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow users to access the full content of a site without inducing seizures due to photosensitivity.\n\nIndividuals who have photosensitive seizure disorders can have a seizure triggered by content that flashes at certain frequencies for more than a few flashes. People are even more sensitive to red flashing than to other colors, so a special test is provided for saturated red flashing. These guidelines were originally based on guidelines for the broadcasting industry as adapted for desktop monitors, where content is viewed from a closer distance (using a larger angle of vision).\n\nFlashing can be caused by the display, the computer rendering the image or by the content being rendered. The author has no control of the first two. They can be addressed by the design and speed of the display and computer. The intent of this criterion is to ensure that flicker that violates the flash thresholds is not caused by the content itself. For example, the content could contain a video clip or animated image of a series of strobe flashes, or close-ups of rapid-fire explosions.\n\nThis Success Criterion replaces a much more restrictive criterion in WCAG 1.0 that did not allow any flashing (even of a single pixel) within a broad frequency range (3 to 50 Hz). This Success Criterion is based on existing specifications in use in the UK and by others for television broadcast and has been adapted for computer display viewing. In WCAG 2.0, a 1024 x 768 screen was used as the reference screen resolution for the evaluation. The 341 x 256 pixel block represents a 10 degree viewport at a typical viewing distance. (The 10 degree field is taken from the original specifications and represents the central vision portion of the eye, where people are most susceptible to photo stimuli.)\n\nWith the proliferation of devices of varying screen sizes (from small hand-helds to large living room displays), as well as the adoption of CSS pixels as a density-independent unit of measurement, the prior assessment criteria may seem outdated. However, an image of a consistent size uses up relatively the same percentage of a user's visual field on any device. On a large screen, the image takes up less size, but the large screen takes up a larger part of the visual field. On a mobile screen, the image may take up most or all of the screen; however, the mobile screen itself takes up a smaller portion of the user's visual field. So the same dimension of the flashing content, represented in CSS pixels can still provide a consistent means of assessment. Substituting CSS pixels for the original pixel block means that the combined area of flashing becomes 341 x 256 CSS pixels, or a flashing area of 87,296 CSS pixels.\n\nContent should be analyzed at the largest scale at which a user may view the content, and at the standard zoom level of the user agent. For example, with a video that may play in an area of a web page and also at full screen, the video should be analyzed for risks at full screen.\n\nWhere video content is provided in color spaces other than sRGB, the version provided with the highest dynamic range should be tested. In such cases the industry standard definition of a general flash is a change in luminance of 20 cd/m2 or more where the darker image is below 160 cd/m2. (ITU-R BT.1702.) This is applicable for standard dynamic range (SDR) and high dynamic range (HDR) content. For HDR content when the darker state is 160 cd/m2 or more, a general flash is one where the Michelson contrast is 1/17 or greater — where the Michelson contrast is calculated as (LHigh - LLow) / (LHigh + LLow), and where LHigh and LLow are the luminance of the high and low luminance states, respectively.\n\nFor short clips that might be looped (such as GIF animations), the content should be analyzed while looping.\n\nNote\n\nThe specification cannot account for the actual viewing distance that a person chooses. Users that are closer to their screens than the idealized viewing distance will be affected by flashing areas that normatively pass. The same problem applies to users who rely on zoom or screen magnification. Conversely, users who are further away from the screen than the idealized distance should be able to tolerate flashing areas that are larger than the threshold.\n\nThe combined area of flashes occurring concurrently and contiguously means the total area that is actually flashing at the same time. It is calculated by adding up the contiguous area that is flashing simultaneously within any 10 degree angle of view.\n\nNote\n\nThe terms \"blinking\" and \"flashing\" can sometimes refer to the same content.\n\n\"Blinking\" refers to content that causes a distraction problem. Blinking can be allowed for a short time as long as it stops (or can be stopped)\n\"Flashing\" refers to content that can trigger a seizure (if it is more than 3 per second and large and bright enough). This cannot be allowed even for a second or it could cause a seizure. And turning the flash off is also not an option since the seizure could occur faster than most users could turn it off.\nBlinking usually does not occur at speeds of 3 per second or more, but it can. If blinking occurs faster than 3 per second, it would also be considered a flash.\n\nNote\n\nThe new (in WCAG 2.2) working definition in the field for \"pair of opposing transitions involving a saturated red\" is a pair of opposing transitions where, one transition is either to or from a state with a value R/(R + G + B) that is greater than or equal to 0.8, and the difference between states is more than 0.2 (unitless) in the CIE 1976 UCS chromaticity diagram. [ISO 9241-391]\n\nThe chromaticity difference is calculated as:\n\nSQRT( (u'1 - u'2)^2 + (v'1 - v'2)^2 )\n\nwhere u'1 and v'1 are chromaticity coordinates of State 1 and u'2 and v'2 are chromaticity coordinates of State 2. The 1976 UCS chromaticity coordinates of u' and v' are calculated as:\n\nu' = 4 * X / (X + 15 * Y + 3 * Z)\nv' = 9 * Y / (X + 15 * Y + 3 * Z)\n\nwhere X, Y, and Z are the tristimulus values of a color in the CIE XYZ colorspace, which can be calculated as:\n\nX = 0.4124564 * R + 0.3575761 * G + 0.1804375 * B\nY = 0.2126729 * R + 0.7151522 * G + 0.0721750 * B\nZ = 0.0193339 * R + 0.1191920 * G + 0.9503041 * B\n\nwhere R, G, & B are values that range from 0-1 as specified in “relative luminance” definition.",
      "benefitsText": "Benefits\nIndividuals who have seizures when viewing flashing material will be able to view all of the material on a site without having a seizure and without having to miss the full experience of the content by being limited to text alternatives. This includes people with photosensitive epilepsy as well as other photosensitive seizure disorders.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/three-flashes-or-below-threshold.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.3.2 3 回の閃光",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページには、どの 1 秒間においても 3 回を超える閃光を放つものがない。\n   \n",
      "intentText": "Intent\n\nThe purpose of this Success Criterion is to further reduce the chance of seizures. Seizures cannot be completely eliminated since some people are so sensitive. However, by eliminating all 3-per-second flashing over any area of the screen, the chances of a person having a seizure are further reduced than when just meeting the measures ordinarily used today in standards internationally, as we do at Level A.\n\nWhereas Success Criterion 2.3.1 allows flashing if it is dim enough or has a small enough area, Success Criterion 2.3.2 does not allow flashing greater than 3 per second, regardless of brightness or size. As a result, even a single flashing pixel would violate this criterion. The intent is to guard against flashing larger than a single pixel, but since an unknown amount of magnification or high contrast setting may be applied, the prohibition is against any flashing.\n\nNote\n\nIn some cases, what we refer to as \"blinking\" and what we refer to as \"flashing\" may overlap slightly. We are using different terms for the two because \"blinking\" causes a distraction problem which you can allow for a short time as long as it stops (or can be stopped) whereas \"flashing\" is a seizure trigger and cannot be allowed or it will cause a seizure. The seizure would occur faster than most users could turn it off. \"Blink\" therefore refers to slow repeating changes that would distract. \"Flash\" refers to changes that could cause a seizure if they were bright enough or persisted long enough. Blinking usually doesn't occur at speeds of 3 per second or more so blink and flash do not overlap. However, blinking can occur faster than 3 per second so there could be an overlap. See 2.2.2: Pause, Stop, Hide for more information on blink.",
      "benefitsText": "Benefits\nIndividuals who have seizures when viewing flashing material will be able to view all of the material on a site without having a seizure and without having to miss the full experience of the content by being limited to text alternatives. This includes people with photosensitive epilepsy as well as other photosensitive seizure disorders.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/three-flashes.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.3.3 インタラクションによるアニメーション",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n  アニメーションが、機能又は伝達されている情報に必要不可欠でない限り、インタラクションによって引き起こされるモーションアニメーションを無効にできる。\n   \t\t\t\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow users to prevent animation from being displayed on Web pages. Some users experience distraction or nausea from animated content. For example, if scrolling a page causes elements to move (other than the essential movement associated with scrolling) it can trigger vestibular disorders. Vestibular (inner ear) disorder reactions include dizziness, nausea and headaches. Another animation that is often non-essential is parallax scrolling. Parallax scrolling occurs when backgrounds move at a different rate to foregrounds. Animation that is essential to the functionality or information of a web page is allowed by this Success Criterion.\n\n\"Animation from interactions\" applies when a user’s interaction initiates non-essential animation. In contrast, 2.2.2 Pause, Stop, Hide applies when the web page initiates animation.\n\nNote\n\nThe impact of animation on people with vestibular disorders can be quite severe. Triggered reactions include nausea, migraine headaches, and potentially needing bed rest to recover.\n\nHow can a website reduce the chances of triggering a vestibular disorder? Choose any one of the following solutions. Avoid using unnecessary animation. Provide a control for users to turn off non-essential animations from user interaction. Take advantage of the reduce motion feature in the user agent or operating system.\n\nWhat about movement caused by a user scrolling a page? Moving new content into the viewport is essential for scrolling. The user controls the essential scrolling movement so it is allowed. Only add non-essential animation to the scrolling interaction in a responsible way. Always give users the ability to turn off unnecessary movement.",
      "benefitsText": "Benefits\nVestibular Disorder\nPeople with vestibular disorders need control over movement triggered by interactions. Non-essential movement can trigger vestibular disorder reactions. Vestibular (inner ear) disorder reactions include distraction, dizziness, headaches and nausea.\nPersona Quote: \"Stop that extra movement! You are making me so dizzy I cannot concentrate. Now I have to turn off my computer and go lie down.\"",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/animation-from-interactions.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.1 ブロックスキップ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   複数のウェブページ上で繰り返されているコンテンツのブロックをスキップするメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to allow people who navigate sequentially through content more direct access to the primary content of the Web page. Web pages and applications often have content that appears on other pages or screens. Examples of repeated blocks of content include but are not limited to navigation links, header content, and advertising frames. Small repeated sections such as individual words, phrases or single links are not considered blocks for the purposes of this provision.\n\nUsers who navigate sequentially through content will generally have to navigate through repeated content on each page. This is in contrast to a sighted user's ability to ignore the repeated material either by focusing on the center of the screen (where main content usually appears) or a mouse user's ability to select a link with a single mouse click rather than encountering every link or form control that comes before the item they want.\n\nIt is not the intent of this Success Criterion to require authors to provide methods that are redundant to functionality provided by the user agent. Most web browsers provide keyboard shortcuts to move the user focus to the top of the page, so if a set of navigation links is provided at the bottom of a web page providing a \"skip\" link may be unnecessary.\n\nNote\n\nAlthough this Success Criterion deals with blocks of content that are repeated on multiple pages, we also strongly promote structural markup on individual pages as per Success Criteria 1.3.1.\n\nAlthough the success criterion does not specifically use the term “within a set of web pages”, the concept of the pages belonging to a set is implied. An author would not be expected to avoid any possible duplication of content in any two pages that are not in some way related to each other, and are not \"Web pages that share a common purpose and that are created by the same author, group or organization” (the definition of set of web pages).\n\nNote\n\nEven for web pages that are not in a set, if a web page has blocks of text that are repeated within the page it may be helpful (but not required) to provide a means to skip over them.",
      "benefitsText": "Benefits\n\nWhen this Success Criterion is not satisfied, it may be difficult for people with some disabilities to reach the main content of a Web page quickly and easily:\n\nScreen reader users who visit several pages on the same site can avoid having to hear all header content and dozens of navigation links on every page before the main content is spoken.\nPeople who use only the keyboard or a keyboard interface can reach content with fewer keystrokes. Otherwise, they might have to make dozens of keystrokes before reaching a link in the main content area. This can take a long time and may cause severe physical pain for some users.\nPeople who use screen magnifiers do not have to search through the same header content or other blocks of information to find where the main content begins each time they enter a new page.\nPeople with cognitive limitations as well as people who use screen readers may benefit when links are grouped into lists",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/bypass-blocks.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.2 ページタイトル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページには、主題又は目的を説明したタイトルがある。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users find content and orient themselves within it by ensuring that each Web page has a descriptive title. Titles identify the current location without requiring users to read or interpret page content. When titles appear in site maps or lists of search results, users can more quickly identify the content they need. User agents make the title of the page easily available to the user for identifying the page. For instance, a user agent may display the page title in the window title bar or as the name of the tab containing the page.\n\nIn cases where the page is a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the page. Note that it is not required to use the name of the document or web application; other things may also describe the purpose or the topic of the page.\n\nIn cases such as Single Page Applications (SPAs), where various distinct pages/views are all nominally served from the same URI and the content of the page is changed dynamically, the title of the page should also be changed dynamically to reflect the content or topic of the current view.\n\nSuccess Criteria 2.4.4 and 2.4.9 deal with the purpose of links, many of which are links to web pages. Here also, the name of a document or web application being linked to would be sufficient to describe the purpose of the link. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.",
      "benefitsText": "Benefits\nThis criterion benefits all users in allowing users to quickly and easily identify whether the information contained in the Web page is relevant to their needs.\nPeople with visual disabilities will benefit from being able to differentiate content when multiple Web pages are open.\nPeople with cognitive disabilities, limited short-term memory and reading disabilities also benefit from the ability to identify content by its title.\nThis criterion also benefits people with severe mobility impairments whose mode of operation relies on audio when navigating between Web pages.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/page-titled.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.3 フォーカス順序",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページが順を追ってナビゲートできて、そのナビゲーション順が意味又は操作に影響を及ぼす場合、フォーカス可能なコンポーネントは、意味及び操作性を損なわない順序でフォーカスを受け取る。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that when users navigate sequentially through content, they encounter information in an order that is consistent with the meaning of the content and can be operated from the keyboard. This reduces confusion by letting users form a consistent mental model of the content. There may be different orders that reflect logical relationships in the content. For example, moving through components in a table one row at a time or one column at a time both reflect the logical relationships in the content. Either order may satisfy this Success Criterion.\n\nThe way that sequential navigation order is determined in Web content is defined by the technology of the content. For example, simple HTML defines sequential navigation via the notion of tabbing order. Dynamic HTML may modify the navigation sequence using scripting along with the addition of a tabindex attribute to allow focus to additional elements. If no scripting or tabindex attributes are used, the navigation order is the order that components appear in the content stream. (See HTML 4.01 Specification, section 17.11, \"Giving focus to an element\").\n\nAn example of keyboard navigation that is not the sequential navigation addressed by this Success Criterion is using arrow key navigation to traverse a tree component. The user can use the up and down arrow keys to move from tree node to tree node. Pressing the right arrow key may expand a node, then using the down arrow key, will move into the newly expanded nodes. This navigation sequence follows the expected sequence for a tree control - as additional items get expanded or collapsed, they are added or removed from the navigation sequence.\n\nThe focus order may not be identical to the programmatically determined reading order (see Success Criterion 1.3.2) as long as the user can still understand and operate the Web page. Since there may be several possible logical reading orders for the content, the focus order may match any of them. However, when the order of a particular presentation differs from the programmatically determined reading order, users of one of these presentations may find it difficult to understand or operate the Web page. Authors should carefully consider all these users as they design their Web pages.\n\nFor example, a screen reader user interacts with the programmatically determined reading order, while a sighted keyboard user interacts with the visual presentation of the Web page. Care should be taken so that the focus order makes sense to both of these sets of users and does not appear to either of them to jump around randomly.\n\nFor clarity:\n\nFocusable components need to receive focus in an order that preserves meaning and operability only when navigation sequences affect meaning and operability.\nIn those cases where it is required, there may be more than one order that will preserve meaning and operability.\nIf there is more than one order that preserves meaning and operability, only one of them needs to be provided.",
      "benefitsText": "Benefits\n\nThese techniques benefit keyboard users who navigate documents sequentially and expect the focus order to be consistent with the sequential reading order.\n\nPeople with mobility impairments who must rely on keyboard access for operating a page benefit from a logical, usable focus order.\nPeople with disabilities that make reading difficult can become disoriented when tabbing takes focus someplace unexpected. They benefit from a logical focus order.\nPeople with visual impairments can become disoriented when tabbing takes focus someplace unexpected or when they cannot easily find the content surrounding an interactive element.\nOnly a small portion of the page may be visible to an individual using a screen magnifier at a high level of magnification. Such a user may interpret a field in the wrong context if the focus order is not logical.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-order.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.4 リンクの目的 (コンテキスト内)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのリンクの目的が、リンクのテキスト単独で、又はリンクのテキストとプログラムによる解釈が可能なリンクのコンテキストから判断できる。ただし、リンクの目的がほとんどの利用者にとって曖昧な場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand the purpose of each link so they can decide whether they want to follow the link. Whenever possible, provide link text that identifies the purpose of the link without needing additional context. Assistive technology has the ability to provide users with a list of links that are on the Web page. Link text that is as meaningful as possible will aid users who want to choose from this list of links. Meaningful link text also helps those who wish to tab from link to link. Meaningful links help users choose which links to follow without requiring complicated strategies to understand the page.\n\nThe text of, or associated with, the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.\n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.\n\nIn some situations, authors may want to provide part of the description of the link in logically related text that provides the context for the link. In this case the user should be able to identify the purpose of the link without moving focus from the link. In other words, they can arrive on a link and find out more about it without losing their place. This can be achieved by putting the description of the link in the same sentence, paragraph, list item, or table cell as the link, or in the table header cell for a link in a data table, because these are directly associated with the link itself. Alternatively, authors may choose to use an ARIA technique to associate additional text on the page with the link.\n\nThis context will be most usable if it precedes the link. (For instance, if you must use ambiguous link text, it is better to put it at the end of the sentence that describes its destination, rather than putting the ambiguous phrase at the beginning of the sentence.) If the description follows the link, there can be confusion and difficulty for screen reader users who are reading through the page in order (top to bottom).\n\nIt is a best practice for links with the same destination to have consistent text (and this is a requirement per Success Criterion 3.2.4 for pages in a set). It is also a best practice for links with different purposes and destinations to have different link text.\n\nA best practice for links to conforming alternate versions is to ensure that the link text to the conforming alternate version indicates in link text that the page it leads to represents the more accessible version. This information may also be provided in text - the goal is to ensure that the end user knows what the purpose of the link is.\n\nThe Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text or programmatically associated with the link to satisfy the Success Criterion.\n\nNote\n\nThere may be situations where the purpose of the link is is supposed to be unknown or obscured. For instance, a game may have links identified only as door #1, door #2, and door #3. This link text would be sufficient because the purpose of the links is to create suspense for all users.\n\nSee also 2.4.9: Link Purpose (Link Only).",
      "benefitsText": "Benefits\nThis Success Criterion helps people with motion impairment by letting them skip links that they are not interested in, avoiding the keystrokes needed to visit the referenced content and then returning to the current content.\nPeople with cognitive limitations will not become disoriented by multiple means of navigation to and from content they are not interested in.\nPeople with visual disabilities will be able to determine the purpose of a link by exploring the link's context.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.5 複数の手段",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中で、あるウェブページを見つける複数の手段が利用できる。ただし、ウェブページが一連のプロセスの中の 1 ステップ又は結果である場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make it possible for users to locate content in a manner that best meets their needs. Users may find one technique easier or more comprehensible to use than another.\n\nEven small sites should provide users some means of orientation. For a three or four page site, with all pages linked from the home page, it may be sufficient simply to provide links from and to the home page where the links on the home page can also serve as a site map.",
      "benefitsText": "Benefits\nProviding an opportunity to navigate sites in more than one manner can help people find information faster. Users with visual impairments may find it easier to navigate to the correct part of the site by using a search, rather than scrolling through a large navigation bar using a screen magnifier or screen reader. A person with cognitive disabilities may prefer a table of contents or site map that provides an overview of the site rather than reading and traversing through several Web pages. Some users may prefer to explore the site in a sequential manner, moving from Web page to Web page in order to best understand the concepts and layout.\nIndividuals with cognitive limitations may find it easier to use search features than to use a hierarchical navigation scheme that may be difficult to understand.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/multiple-ways.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.6 見出し及びラベル",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   見出し及びラベルは、主題又は目的を説明している。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand what information is contained in Web pages and how that information is organized. When headings are clear and descriptive, users can find the information they seek more easily, and they can understand the relationships between different parts of the content more easily. Descriptive labels help users identify specific components within the content.\n\nLabels and headings do not need to be lengthy. A word, or even a single character, may suffice if it provides an appropriate cue to finding and navigating content.\n\nThis Success Criterion does not require headings or labels. This Success Criterion requires that if headings or labels are provided, they be descriptive. This Success Criterion also does not require that content acting as a heading or label be correctly marked up or identified – this aspect is covered separately by 1.3.1: Info and Relationships. It is possible for content to pass this Success Criterion (providing descriptive content that acts as headings or labels) while failing Success Criterion 1.3.1 (if the headings or labels aren't correctly marked up/identified). Conversely, it is also possible for content to pass Success Criterion 1.3.1 (with headings or labels correctly marked up or identified), while failing this Success Criterion (if those headings or labels are not sufficiently clear or descriptive).\n\nFurther, in the case of labels, this Success Criterion does not take into consideration whether or not alternative methods of providing an accessible name for form controls and inputs has been used – this aspect is covered separately by 4.1.2: Name, Role and Value. It is possible for controls and inputs to have an appropriate accessible name (e.g. using aria-label=\"…\") and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion (if the label is not sufficiently clear or descriptive).\n\nThis success criterion does not require the use of labels; however, it does require that if labels are present, they must be sufficiently clear or descriptive. Please see 3.3.2: Labels or Instructions for more information on the use of labels.",
      "benefitsText": "Benefits\nDescriptive headings are especially helpful for users who have disabilities that make reading slow and for people with limited short-term memory. These people benefit when section titles make it possible to predict what each section contains.\nForm input controls with labels that clearly describe the content that is expected to be entered helps users know how to successfully complete the form.\nWhen headings and labels are also correctly marked up and identified in accordance with 1.3.1: Info and Relationships, this Success Criterion helps people who use screen readers by ensuring that labels and headings are clearer when presented in a different format – for example, in an automatically generated list of headings, a table of contents, or when jumping from heading to heading within a page.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.7 フォーカスの可視化",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   キーボード操作が可能なあらゆるユーザインタフェースには、フォーカスインジケータが見える操作モードがある。\n   \n",
      "intentText": "Intent\n\nThe purpose of this success criterion is to help a person know which element has the keyboard focus.\n\n“Mode of operation” accounts for user agents which may not always show a focus indicator, or only show the focus indicator when the keyboard is used. User agents may optimise when the focus indicator is shown, such as only showing it when a keyboard is used. Authors are responsible for providing at least one mode of operation where the focus is visible. In most cases there is only one mode of operation so this success criterion applies. The focus indicator must not be time limited, when the keyboard focus is shown it must remain.\n\nNote that a keyboard focus indicator can take different forms. New in WCAG 22: While Focus Visible does not specify what that form is, 2.4.13 Focus Appearance (Level AAA) provides guidance on creating a consistent, visible indicator.",
      "benefitsText": "Benefits\nThis Success Criterion helps anyone who relies on the keyboard to operate the page, by letting them visually determine the component on which keyboard operations will interact at any point in time.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-visible.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.8 現在位置",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中での利用者の位置に関する情報が利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide a way for the user to orient herself within a set of Web pages, a Web site, or a Web application and find related information.",
      "benefitsText": "Benefits\nThis Success Criterion is helpful for people with a short attention span who may become confused when following a long series of navigation steps to a Web page. It is also helpful when a user follows a link directly to a page deep within a set of Web pages and needs to navigate that Web site to understand the content of that page or to find more related information.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/location.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.9 リンクの目的 (リンクのみ)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのリンクの目的を、リンクのテキスト単独で特定できるメカニズムが利用できる。ただし、リンクの目的がほとんどの利用者にとって曖昧な場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users understand the purpose of each link in the content, so they can decide whether they want to follow it. Best practice is that links with the same destination would have the same descriptions, but links with different purposes and destinations would have different descriptions (see also Success Criterion 3.2.4 which calls for consistency in identifying components that have the same functionality). Because the purpose of a link can be identified from its link text, links can be understood when they are out of context, such as when the user agent provides a list of all the links on a page.\n\nThe text in the link is intended to describe the purpose of the link. In cases where the link takes one to a document or a web application, the name of the document or web application would be sufficient to describe the purpose of the link (which is to take you to the document or web application). Note that it is not required to use the name of the document or web application; other things may also describe the purpose of the link.\n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application being presented on the page would be sufficient to describe the purpose of the page. Having the link and the title agree, or be very similar, is good practice and provides continuity between the link 'clicked on' and the web page that the user lands on.\n\nThe Success Criterion includes an exception for links for which the purpose of the link cannot be determined from the information on the Web page. In this situation, the person with the disability is not at a disadvantage; there is no additional context available to understand the link purpose. However, whatever amount of context is available on the Web page that can be used to interpret the purpose of the link must be made available in the link text to satisfy the Success Criterion.\n\nThe word \"mechanism\" is used to allow authors to either make all links fully understandable out of context by default or to provide a way to make them this way. This is done because for some pages, making the links all unambiguous by themselves makes the pages easier for some users and harder for others. Providing the ability to make the links unambiguous (by them selves) or not provides both users with disabilities with the ability to use the page in the format that best meets their needs.\n\nFor example: A page listing 100 book titles along with links to download the books in HTML, PDF, DOC, TXT, MP3, or AAC might ordinarily be viewed as the title of the book as a link with the words \"in HTML\" after it. then the sentence \"Also available in: \" followed by a series of short links with text of \"HTML\", \"PDF\", \"DOC\", \"TXT\", \"MP3\", and \"AAC\". At Level 3, some users could opt to view the page this way - because they would find the page harder to understand or slower to use if the full title of the book were included in each of the links. Others could opt to view the page with the full title as part of each of the links so that each link was understandable in itself. Both the former and the latter groups could include people with visual or cognitive disabilities that used different techniques to browse or that had different types or severities of disability.",
      "benefitsText": "Benefits\nThis Success Criterion helps people with motion impairment by letting them skip Web pages that they are not interested in, avoiding the keystrokes needed to visit the referenced content and then return to the current content.\nPeople with cognitive limitations will not become disoriented by extra navigation to and from content they are not interested in.\nPeople with visual disabilities will benefit from not losing their place in the content when they return to the original page. The screen reader's list of links is more useful for finding information because the target of the links are described.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-link-only.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.10 セクション見出し",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   セクション見出しを用いて、コンテンツが整理されている。\n   \n   注記 1見出しはその一般的な意味で用いられており、タイトルや様々なタイプのコンテンツに見出しを付加するその他の手段を含む。\n   \n   注記 2この達成基準は、文書におけるセクションを対象としており、ユーザインタフェース コンポーネントは対象としていない。ユーザインタフェース コンポーネントについては、達成基準 4.1.2 が対象にしている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to provide headings for sections of a Web page, when the page is organized into sections. For instance, long documents are often divided into a variety of chapters, chapters have subtopics, etc. When such sections exist, they need to have headings that introduce them. This clearly indicates the organization of the content, facilitates navigation within the content, and provides mental \"handles\" that aid in comprehension of the content. Other page elements may complement headings to improve presentation (e.g., horizontal rules and boxes), but visual presentation is not sufficient to identify document sections.\n\nThis provision is included at Level AAA because it cannot be applied to all types of content and it may not always be possible to insert headings. For example, when posting a pre-existing document to the Web, headings that an author did not include in the original document cannot be inserted. Or, a long letter would often cover different topics, but putting headings into a letter would be very strange. However, if a document can be broken up into sections with headings, it facilitates both understanding and navigation.",
      "benefitsText": "Benefits\nPeople who are blind will know when they have moved from one section of a Web page to another and will know the purpose of each section.\nPeople with some learning disabilities will be able to use the headings to understand the overall organization of the page content more easily.\nPeople who navigate content by keyboard will be able to jump the focus from heading to heading, enabling them to find quickly content of interest.\nIn pages where content in part of the page updates, headings can be used to quickly access updated content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/section-headings.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.11 隠されないフォーカス (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ユーザインタフェース コンポーネントがキーボードフォーカスを受け取るとき、コンテンツ制作者が作成したコンテンツによって、そのコンポーネントの全体が隠されるようなことがない。\n\n    注記 1設定可能なインタフェースの中にあるコンテンツが利用者によって再配置可能な場合、この達成基準のテスト及び適合性の対象として検討されるのは、利用者によって移動可能なコンテンツの初期位置だけである。\n\n    注記 2利用者が開いたコンテンツによって、フォーカスを受け取るコンポーネントが隠される場合がある。利用者がキーボードフォーカスを移動せずにフォーカスを持つコンポーネントを表示できる場合、そのフォーカスを持つコンポーネントは、コンテンツ制作者が作成したコンテンツによって隠されたとはみなされない。\n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the item receiving keyboard focus is always partially visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.\n\nIn recognition of the complex responsive designs common today, this AA criterion allows for the component receiving focus to be partially obscured by other author-created content. A partly obscured component can still be very visible, although the more of it that is obscured, the less easy it is to see. For that reason, authors should attempt to design interactions to reduce the degree and frequency with which the item receiving focus is partly obscured. For best visibility, none of the component receiving focus should be obscured. This preferred outcome is covered by the AAA criterion Focus Not Obscured (Enhanced).\n\nTypical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can obscure the item receiving focus, along with its focus indicator.\n\nA notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it entirely obscures a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.\n\nAnother form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. While less than 100 percent opacity is not causing the component to be entirely obscured, such semi-opaque overlaps may cause a failure of 1.4.11 Non-text Contrast. When a focus indicator can be covered by a semi-opaque component, the ability of the focus indicator to pass 1.4.11 should be evaluated (and pass) while the focus indicator is under the semi-opaque component. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.\n\nUser-movable content\n\nThis SC contains a note regarding content that can be repositioned. If users can move content regions, then they can potentially position the movable content such that it obscures other content that may receive focus. In such a case, the author is only responsible for ensuring that the movable content in its initial position does not obscure the item receiving focus.\n\nThis note is intended to accommodate a common interaction in complex applications such as authoring tools, where the main editing region (also called a canvas) can be enhanced by displaying toolbars or other panels, which can be repositioned around the canvas. It is possible to design such toolbars so they do not obscure focus. Authors are encouraged to do so, as well as pursue techniques which ensure equitable keyboard use of such toolbars. However, in recognition of the complexities involved in responsive design as well as in supporting the ability to transform the text size and spacing of content, only the starting position of such movable panels is assessed.\n\nUser-opened content\n\nThis SC contains a note regarding content that is opened or disclosed by the user. One example of such content is a menu button opened by a user that opens a list of choices over pre-existing content on the screen. Such content can obscure other information on the screen, but it does not obscure an item receiving keyboard focus, because the new content doesn't stay open through a change of focus. However, authors may create user-opened content that is intentionally designed to persist until closed by the user, such as a chat window. Such persistent content has the potential to fail Focus Not Obscured (Minimum). Various types are described in this section. All can be designed so that they pass this Success Criterion.\n\nThis section only applies to content that the user actively discloses. Content pre-positioned by the author (such as a sticky footer), or content that appears without direct user initiation, such as system warnings, must not prevent the item receiving focus from being immediately visible in the viewport. Also, this note is not intended to apply to disclosures that are by convention non-persistent. As discussed in the following sub-section, an open dropdown that does not close when no longer focused is not following this convention.\n\nNon-persistent opened information\n\nA number of components on the web open (or disclose) additional content (on activation or on focus) intended for immediate user interaction or information. This new content is often on top of other content, obscuring it. Examples of such components are menu items, select element items, combobox lists (and other dropdown items), date picker calendars, and tooltips. The common trait of all these components is that they are not expected to persist after being acted on or once they are no longer the primary point of user interaction. Such non-persistent disclosures do not fail this SC since they do not obscure the item with focus. However, if an author allows such components to persist after the user has 1) activated one of the opened items or 2) moved the focus away from the triggering item and the additional content, it is at risk of failing this criterion by obscuring the item with focus.\n\nUser openable, persistent disclosures\n\nSome disclosure patterns provide a mechanism for the user to open additional content that remains open until intentionally closed by the user. Accordions are a simple example of such a pattern. Chatbots and expandable side navigation are more complex examples. All of these patterns can be implemented so they are not at risk of failing this SC. Some possible approaches are:\n\nWhen the additional content appears, it displaces existing content. An accordion is an example of this. When an accordion is opened, the disclosed content shifts existing content further down the page. Since the new content does not obscure existing content, it cannot obscure the item with focus.\nWhen the additional content appears, existing content reflows. The popout sidebar on the WCAG standard is an example of this pattern. When the side menu is activated, it opens a new section of information along the left side of the page. The main content area is reduced horizontally to accommodate the new content, and the existing content reflows to fit in the thinner space. As a result, there is no overlapping content between the two sections; the item receiving focus, whether in the left navigation or in the main content, will not be obscured by the other section.\nWhen the additional content is opened, it takes focus and the tab ring is constrained to the new content until it is dismissed. This modality is somewhat like a dialog, in that a user cannot navigate beyond the opened content by keyboard without dismissing it first (typically by pressing Esc). However, unlike in a modal dialog, in some implementations a pointer user may be able to interact with content outside the opened section without dismissing it. Since this pattern potentially creates an inequitable experience between keyboard and pointer users, it should be used cautiously. That said, it does prevent the opened content from obscuring the keyboard focus in the main content, and thus should pass this SC. This is described and demonstrated in a short video in the Knowbility article in the reference section, under the section heading Keep keyboard focus in the slide-out navigation until it's closed.\nThe disclosure expands into an area of the page containing no other content. Many pages are designed with wide margins, providing significant white space into which new content can be opened. Many chatbots and toast notifications are designed to 'slide up' into the right unpopulated side of a page. Where authors are careful to ensure content is not obscured at each breakpoint in a responsive design, no obscuring of other operable content need occur.\nWhen focus leaves the additional content, the additional content is automatically hidden or collapsed, or the content can be hidden or collapsed by use of a dedicated keyboard command (for example, the Escape key.) This is very similar to patterns discussed previously under Non-persistent opened information. A distinguishing factor can be that the user's last point of interaction in the disclosure is preserved (it persists) even though it may be hidden until a user returns. Some trees and left navigation patterns behave this way.\n\nIn recognition of more complex interfaces and user needs there is a note: Content opened by the user may obscure the component receiving focus. If the user can bring the item with focus into view using a method without having to navigate back to the user-opened content to dismiss it, this criterion would be passed. For example, keyboard actions that may allow the item with focus to be revealed include:\n\nusing the Escape key to dismiss the obscuring content;\nusing keys to scroll the content in the viewport to reveal the item with focus;\nissuing a key to move between overlays.\n\nFor example:\n\nA user opens a chat interface, which is a popover non-modal dialog. This results in some content of the underlying page being fully obscured. The user navigates away from the chat interface by use of the tab key, focusing onto a link that has been fully obscured by the dialog. The user presses the Escape key to close the chat interface, which un-obscures the link.\nA user expands a fixed-position page feedback component at the bottom of a Web page. They then use their keyboard to navigate to a link that's fully obscured by the expanded component and press the down arrow or space key on their keyboard to scroll the content on the page, un-obscuring the link.\nA user opens a web-based multi-user authoring application. An overlay appears displaying a list of people who have contributed to the document. The user tabs through the list of contributors and activates one of them. The application displays a new overlay, which obscures the first one, that displays that person's recent contributions. The user presses the F6 key to toggle the stacking order of the two overlays.\nModal dialogs\n\nA properly constructed modal dialog will always pass this SC. Even if it appears directly on top of an item with focus, the dialog takes focus on appearance, and thus the item receiving focus -- the dialog or one of its components -- is visible. A properly constructed modal maintains that focus and prevents interaction outside the modal until it is dismissed.\n\nA dialog-like overlay that does not take focus on appearance and does not either constrain interaction to the overlay or dismiss itself on loss of focus (thus allowing focus to exit into the content behind it) will be at risk of failing this SC, where it is positioned such that it can obscure other focusable items.",
      "benefitsText": "Benefits\nSighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on a keyboard or on devices which use the keyboard interface, including speech input, sip-and-puff software, onscreen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.\nPeople with limited or low vision, who may primarily user a pointer for screen orientation and repositioning, nonetheless benefit from a visible indication of the current point of keyboard interaction, especially where magnification reduces the overall viewing portion of the screen.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-minimum.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.12 隠されないフォーカス (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    ユーザインタフェース コンポーネントがキーボードフォーカスを受け取るとき、コンテンツ制作者が作成したコンテンツによって、そのコンポーネントのどの部分も隠されることがない。\n\n    \n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the item receiving keyboard focus is always visible in the user's viewport. For sighted people who rely on a keyboard (or on a device that operates through the keyboard interface, such as a switch or voice input), knowing the current point of focus is critical. The component with focus signals the interaction point on the page. Where users cannot see the item with focus, they may not know how to proceed, or may even think the system has become unresponsive.\n\nTypical types of content that can overlap focused items are sticky footers, sticky headers, and non-modal dialogs. As a user tabs through the page, these layers of content can hide the item receiving focus, along with its focus indicator.\n\nA notification implemented as sticky content, such as a cookie banner, will fail this Success Criterion if it partially covers a component receiving focus. Ways of passing include making the banner modal so the user has to dismiss the banner before navigating through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user action could also meet this criterion by closing on loss of focus.\n\nAnother form of obscuring can occur where light boxes or other semi-opaque effects overlap the item with focus. This form of obscuring is not in scope for this Success Criterion. While less than 100 percent opacity is not causing the component to be visually hidden, such semi-opaque overlaps may cause a failure of 2.4.11 Focus Appearance. When a focus indicator can be covered by a semi-opaque component, the the focus indicator should be assessed against 2.4.11. The intention in both situations is that the component receiving focus should never be obscured to the point a user cannot tell which item has focus.",
      "benefitsText": "Benefits\nSighted users who rely on a keyboard interface to operate the page will be able to see the component which gets keyboard focus. Such users include those who rely on devices which use the keyboard interface, including speech input, sip-and-puff software, on-screen keyboards, scanning software, and a variety of assistive technologies and alternate keyboards.\nPeople with limited or low vision but who rely upon a pointing device (for viewport orientation and repositioning) benefit from a clearly visible indication of the current point of keyboard interaction, especially where magnification reduces the overall useable portion of content.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to more easily discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-enhanced.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.4.13 フォーカスの外観",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    キーボードのフォーカスインジケータが視覚的に表示される場合、フォーカスインジケータの領域が以下の全てを満たす。\n    \n        フォーカスされていないコンポーネント又はサブコンポーネントの、太さ 2 CSS ピクセルの外周の領域と同等以上の大きさである。かつ、\n        フォーカスされている状態とフォーカスされていない状態との間で、同一ピクセルに少なくとも 3:1 のコントラスト比がある。\n    \n\n    例外:\n    \n      フォーカスインジケータがユーザエージェントによって決定され、かつコンテンツ制作者が調整できない場合。又は、\n        コンテンツ制作者がフォーカスインジケータ及びそのインジケータの背景色を変更していない場合。\n    \n    \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t注記 1ユーザインタフェースコンポーネント又はサブコンポーネントとして認識されるもの (輪郭又は大きさを決定づけるもの) は、その視覚的提示に依存する。視覚的提示には、コンポーネントの可視コンテンツ、ボーダー、及びコンポーネント固有の背景が含まれる。コンポーネントのコンテンツ、背景、又はボーダーの外側にある、影及びグロー効果は含まれない。\n\n    注記 2フォーカスインジケータを受け取ることができるサブコンポーネントの例としては、開いたドロップダウンメニューのメニュー項目、グリッド内のフォーカス可能なセルなどがある。\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t注記 3コントラストは、(HTML、CSS、及び SVG のような) 技術の中で定義された色を基に計算できる。その際、ユーザエージェントの高解像度化及びアンチエイリアスによって変更されたピクセルは無視できる。\n\n ",
      "intentText": "Intent\n\nThe purpose of this Success Criterion is to ensure a keyboard focus indicator is clearly visible and discernible. Focus Appearance is closely related to 2.4.7 Focus Visible and 1.4.11 Non-text Contrast. Focus Visible requires that a visible focus indicator exists while a component has keyboard focus; Focus Appearance defines a minimum level of visibility. Where Non-text Contrast requires a component to have adequate contrast against the background in each of its states, Focus Appearance requires sufficient contrast for the focus indicator itself.\n\nFor sighted people with mobility impairments who use a keyboard or a device that utilizes the keyboard interface (such as a switch or voice input), knowing the current point of focus is very important. Visible focus must also meet the needs of users with low vision, who may also rely on the keyboard.\n\nA keyboard focus indicator can take different forms. This Success Criterion encourages the use of a solid outline around the focused user interface component, but allows other types of indicators that are at least as large.\n\nThis Understanding document will elaborate on the minimum area requirement, color contrast requirements, and finally list some user agent exceptions.\n\nMinimum area\n\nThe first part of the Success Criterion specifies a minimum area for the focus indicator:\n\nis at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component\n\nThis only specifies a minimum area for the focus indicator. It does not require that the focus indicator literally be a 2 CSS pixel thick outline, only that the indicator be at least that large.\n\nHowever, the simplest way to meet the size requirement is to use a focus indicator which is a solid 2 CSS pixel thick perimeter.\n\nNote\n\nA CSS pixel is what developers use in CSS declarations like “width: 200px”. It is device-independent and not to be confused with device pixels which vary depending on the physical pixel density.\nThe rest of this document notates CSS pixels as “px”.\n\nUsing a solid outline\n\nThe easiest and most common way to meet this requirement is to use a solid outline around the component. The outline must be at least 2px thick. The following illustration shows a minimally thick focus indicator, where a 2px thick band of white pixels making up the page background around an example button have been altered to black.\n\nFigure 1 Passes: The focus indicator is a solid 2px thick outline.\n\nFor non-rectangular components, the \"perimeter\" definition allows authors to use either of the following types of outline:\n\na line which solidly encloses a shape, or\na line which solidly encloses the minimum bounding box of a shape\n\nFor example, a star-shaped button may use either a focus indicator that follows the shape of the star or a focus indicator that follows the bounding box of the star. In the following examples, the same three stars have already been selected, and focus is on the third star. The first example uses a focus indicator which matches the star shape of the focused star. The second uses a rectangular indicator.\n\nFigure 2 Passes: a solid outline indicator surrounds the third of five stars.\nFigure 3 Passes: a solidly bound focus rectangle encloses the third of five stars.\n\nOffsetting indicators slightly from the focused component, as in the examples above, is not required to meet the minimum area requirement of the success criterion, but it can help make indicators more visible. In CSS, the outline and outline-offset properties are commonly used to achieve this.\n\nThe smallest possible 2 CSS pixel thick indicator that is still a \"perimeter\" is a solid line that appears inside the component against the component's outer edge, for example by using a CSS border property. Indicators that are inset further within the component (not directly against the component's outer edge) need to be thicker than 2 CSS pixels to meet the minimum size requirement.\n\nFigure 4 All four of these example focus indicators are 2px solid lines. The \"outset\", \"outline\", and \"border\" indicators pass. The \"inset\" indicator does not meet the minimum area requirement and fails; it would need to be at least 3px thick to pass.\n\nNote that different Non-text Contrast requirements may apply depending on whether the focus indicator is offset from, inset into, or against the edge of the component. See the Relationship with Non-text Contrast section below.\n\nOther indicator shapes\n\nThis Success Criterion does not require that focus indicators be solid outlines. Other shapes may be used so long as they meet the minimum area requirement.\n\nThe minimum area of the focus indicator for a control is the area of a 2 CSS pixel thick perimeter of the control (or its minimum bounding box) in the control's unfocused state. For example, if a control is a rectangle 90px wide and 30px tall, the area of a 2 CSS pixel thick perimeter is difference between the areas of:\n\nA 92px by 32px rectangle (1px larger on all sides), and\nA 88px by 28px rectangle (1px smaller on all sides)\n\nThis results in a minimum area of (92px * 32px) - (88px * 28px) = 480px2.\n\nSome general formulas for 2 CSS pixel thick perimeters of common shapes are:\n\nRectangle with width w and height h\n4h + 4w\nCircle with radius r\n4𝜋r\nRounded rectangle with width w, height h, and border radius r\n4h + 4w - (16 - 4𝜋)r\n\nNote\n\nIf you need to use complex mathematics to work out if a focus indicator is large enough, it is probably a sign that you should use a larger indicator instead. The bigger the visible change when an item receives focus, the easier it is for someone to see.\n\nThe following 2 examples use a 90px wide by 30px tall button, with a minimum area requirement of 480px2:\n\nFigure 5 Passes: the inner outline is inset slightly from the outer edge of the component, but compensates for this by being 3px thick. It has an area of 612px2, which exceeds the 480px2 minimum.\nFigure 6 Passes: the indicator rectangles on either side of the focused button are each 9px wide by 28px tall. In total, they are 504px2, which just barely meets the 480px2 minimum.\n\nNote\n\nPrefer using focus indicator techniques that scale with both the width and height of the focused control. Otherwise, if controls change size across different variations of a page (for example, in a responsive design), the indicator might meet the area requirement in some variations but not others. For example, in the above figure, if the width of the two highlight rectangles did not scale as the button grew wider, it would stop meeting the minimum area requirement if the button needed to grow any wider to accomodate a longer button label.\n\nAnother way of achieving the area requirement is to alter the appearance of the entire component, for instance by changing its color – provided that the new color has a contrast ratio of at least 3:1 against the original color. This can be effective in a set of closely placed buttons. The following example demonstrates this with 5 rating stars; the center star is filled in with a darker color to indicate focus. However, it is much more difficult to detect such a focus indicator when components are not near each other and so cannot be easily compared. For users using magnification, even components relatively close together may be difficult to compare, so it is not considered a best practice.\n\nFigure 7 Passes: a color change applies to the whole third star to indicate focus.\nInline links\n\nIf an inline link is broken over multiple lines, some methods of creating a focus indicator create different results by browsers. CSS outline separately surrounds each part of a link that breaks across multiple lines. It is by far the most common CSS technique for focus indication, and produces a result that satisfies the minimum bounding box definition since each part is solidly bound. CSS border will split the perimeter across the parts of the link, which results in an unenclosed border for each line of the link. The minimum bounding box definition states that link focus can be assessed as if the link was all on one line, so a 2px thick border is also considered to meet the minimum area requirement. Therefore, where the contrast requirements are met, each of these methods can produce a sufficient focus indicator.\n\nFigure 8 Passes: the CSS outline property solidly bounds each part of the link completely, so it meets the definition of a perimeter.\nFigure 9 Passes: Although the CSS border on a multi-line link does not enclose the separate parts of the link, the minimum bounding box definition allows it to be assessed as if it was on a single line, so it also qualifies as a perimeter.\nChange of contrast\n\nThe second part of the Success Criterion's indicator requirements states that an area of the indicator:\n\nhas a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states\n\nThis requirement measures the change of contrast between the same pixels in different states. This is different from the Text Contrast and Non-text Contrast Success Criteria, which measure the contrast between different adjacent pixels in a single state at a time.\n\n3:1 is the minimum allowable change-of-contrast ratio, but the greater the change of contrast between states, the easier it is for users to see the focus indicator. Authors are encouraged to make the change-of-contrast ratio as great as possible.\n\nThe following illustration shows a minimally contrasting focus indicator, where some of the white pixels making up the page background have been altered to a mid-grey that has a 3:1 contrast ratio with the original white. Authors are encouraged to exceed the minimum focus appearance. For instance, the dark blue lines in figures 2 and 3 are much more visible.\n\nFigure 10 Passes: Two buttons in the shape of a star, with the second surrounded by a focus indicator whose pixels contrast 3:1 between focused (light grey) and unfocused (white) states.\n\nWhen a component changes to include a focus indicator, that change can be measured as a change of color contrast. For example, if a yellow outline is added to a button on a blue background, the change of color is from blue to yellow. This change can be measured whether the focus indicator is on the background around the component, or the background within the component.\n\nFigure 11 Passes: adding a yellow outline to a link is a change of color from blue to yellow. That change has a contrast ratio of 12:1.\n\nIf a control receiving focus changes its background (fill color) to a color that contrasts less than 3:1 with the original background, that would not pass the change of contrast.\n\nFigure 12 Fails: the second link has a dark-grey (#555) which fails this Success Criterion because the change from black-background to dark-grey background does not meet 3:1.\n\nIf the background change is sufficient, it is a method of passing the criterion.\n\nFigure 13 Passes: the second link has a white background (#fff) which passes this Success Criterion because the change from black-background to white-background meets 3:1.\nPartially contrasting indicators\n\nIt is not necessary for the entire focus indicator to have a 3:1 change of contrast. It is sufficient for just a part of the indicator to meet the change of contrast requirement, so long as the contrasting part of the indicator meets the minimum area requirement.\n\nFigure 14 Passes: The black part of the indicator meets 3:1 contrast with the white background, but the gray part does not. The black part is 2px thick, so it meets the minimum area requirement on its own and the gray part can be ignored.\nFigure 15 Fails: The indicator as a whole is 2px thick, but the part of it that has sufficient change-of-contrast is only 1px thick. The part of the indicator with sufficient change-of-contrast does not meet the minimum area requirement.\n\nWhen calculating whether a focus indicator meets the minimum area requirement, only the part of the indicator which meets the change-of-contrast requirement should be included in the calculation.\n\nGradients\n\nIf a focus indicator has a gradient, the principle is to measure the contrast of the changed area, and ignore any part of the gradient which has less than a 3:1 change-of-contrast ratio.\n\nFigure 16 When a gradient is used on a focus indicator, the measure of surface area should only include the area that has changed enough to meet the 3:1 contrast ratio.\n\nIf you eliminate the area which has less than 3:1 change-of-contrast, you can calculate the area of the remaining parts of the indicator to determine whether the indicator meets the minimum area requirement.\n\nFigure 17 Passes: the same focused button with the non-contrasting areas removed. The contrasting area is 6px thick along most of the bottom edge and 3-4px thick on the left and right edges, which is enough to meet the minimum area requirement.\n\nNote\n\nSome of the examples in this document are screen-captured images of elements. Due to loss of resolution in these images, the actual pixel color may not match the original. As such, they are intended to be used for illustrative purposes, and should not be inspected on a pixel-by-pixel basis for sufficient contrast.\n\nSome designs have pages with a non-solid background image covering the whole (or part) of the page or make use of parallax scrolling effects which result in a near-infinite number of color combinations if a page is scrolled and/or changes are made to the viewport size.\n\nIf the contrast of background colors that change are close enough to need to be tested for each combination then they would likely not meet the user need of people with low vision in certain scroll combinations and would likely fail in certain combinations as well. In these cases it would be an easy solution to use a two-color focus indicator or some other mechanism to indicate focus such as a solid box with a border to guarantee there is sufficient contrast across variations of background images or background gradients.\n\nIt is possible to use visual patterns such as strips switching places to disguise a change of focus indicator. However, this is not considered a visible indicator.\n\nRelationship with Non-text Contrast\n\nFocus indicators are visual information required to identify a state of a user interface component. That means that they are subject to 1.4.11 Non-text Contrast, in addition to 2.4.13 Focus Appearance.\n\nIn combination with 2.4.7 Focus Visible, 1.4.11 Non-text Contrast requires that the visual focus indicator for a component must have sufficient contrast against the adjacent colors when the component is focused, except where the appearance of the component is determined by the user agent and not modified by the author.\n\nThe difference between the contrast requirements in Focus Appearance and Non-text Contrast is:\n\nFocus Appearance requires that focus indicators have a change of contrast between focused and non-focused states.\nNon-text Contrast requires that focus indicators have adjacent contrast between the indicator (in the focused state) and adjacent non-indicator colors.\nFigure 18 This example passes Focus Appearance but fails Non-text Contrast; there is insufficient adjacent contrast between the focus indicator and the adjacent colors.\nFigure 19 This example passes Non-text Contrast but fails Focus Appearance; there is insufficient change of contrast between the focused and unfocused states.\n\nAdditionally, Non-text Contrast does not establish any size requirement and has slightly different rules for when exceptions are allowed.\n\nSee the Relationship with Focus Visible section of Understanding 1.4.11 Non-text Contrast for more details and examples.\n\nComponent keyboard focus\n\nThe preamble to this Success Criterion is \"When a user interface component has keyboard focus...\" The keyboard focus is the point of interaction for someone using a keyboard. For environments with a keyboard-operable interface, the keyboard focus can be moved around the interface in order to interact with different components. Whichever component is being interacted with has focus.\n\nWCAG defines user interface component as \"a part of the content that is perceived by users as a single control for a distinct function.\" Because different users may perceive controls differently, there is a potential for some variation when interpreting what constitutes both a single control and a distinct function. This is particularly the case when something visually presents in a way that may differ from how it is programmatically created under the covers. Where there is not a native HTML component upon which to base designs, there can be great variations in how the components and their focus indicators are portrayed. Further, some components have sub-components that can take focus, such as the menu items on a menu.\n\nNonetheless, consistent results from different testers were obtained for this Success Criterion by using the focus indicator itself as the gauge of what constitutes the component being interacted with. For complex components, the three typical focus indicators are as follows:\n\nFocus indicator around only the whole component\nFocus indicators around both the component and subcomponent\nFocus indicator around only the subcomponent\n\nEach of these will be discussed, using a tablist as a familiar complex component.\n\nFocus indicator around only the whole component\nFigure 20 A tablist with a focus indicator around only the whole.\n\nWhen the focus indicator is shown only around the whole tablist, the user is guided to considering the tablist as a single user component. The tab items within it are visually distinguished between selected and unselected states (and visual indicators of selection state must meet the criteria given in 1.4.11 Non-text Contrast).\n\nHaving a focus indicator only around the whole is possible where there is no need to have a selected sub-component while another sub-component has focus. For a tablist which synchronizes its tab panel content with whatever tab is active, only one tab item can be selected at a time, and since whatever tab is selected is considered active, a separate focus indicator is redundant.\n\nResult: the group focus indicator must meet the requirements of this Success Criterion.\n\nA radio button group and a star-rating widget, which each use only a whole-component focus indicator, provide working examples of different complex components that pass the primary requirements of this Success Criterion. In the star ratings example, users can increment the rating by 1/2 stars. Not only is a focus indicator for each 1/2 star unnecessary, but it would actually be difficult to achieve without making the interaction confusing.\n\nFocus indicators around both the component and subcomponent\n\n\nFigure 21 The same tablist in two states. In the first, focus is around both the tablist and the currently selected tab; in the second, focus is around both the tablist and an unselected tab.\n\nFor a tablist which does not keep its tab panel content synchronized with whatever tab is selected, there needs to be a focus indicator for the tab item subcomponent. This is because the tab item with focus may be different than the selected item.\n\nThe user can navigate to the tablist, which in this implementation has a focus rectangle around the whole tablist as well as one around a tab item (conventionally the item that is currently selected). The focus around the whole is helpful in cueing a keyboard user that this is a complex component that has its own interaction. The user can then move focus between the unselected and selected tab items -- each of which in turn has its own focus indicator -- before activating one, which then makes it selected as well as focused, and updates the tab panel to match.\n\nIn this scenario, either the group focus indicator or the sub-component indicator must meet the requirements of this Success Criterion. To avoid being overly prescriptive, the Success Criterion allows authors to choose which makes the most sense. Generally, if a sub-component focus is necessary, it should be assessed instead of the group indicator.\n\nResult: the focus indicator for the tab item meets the requirements of this Success Criterion. The tablist focus indicator does not need to meet the requirements.\n\nA slider to pick colors provides a working example of a different complex component that predominantly shows focus for the subcomponent. In this case, the thumb slider sub-component has a focus indicator of sufficient size and contrast to pass the sufficient area calculation. There is also a subtle focus around the whole slider component, but it does not need to be assessed to pass this Success Criterion.\n\nFocus indicator around only the subcomponent\nFigure 22 The same tabs as in the prior set, but the focus indicator around the whole is removed.\n\nThe same unsynchronized tablist can also be implemented as something which only shows focus on the tab items and not on the whole. The behaviour is the same as in the prior example, but there is never a focus indicator placed around the tablist. This interaction is acceptable, but it is not best practice since it demands more understanding from the user with less information. For example, some visual cues for the tablist and tab items (and tab panel) may not be clear. As well, keyboard users may not initially understand the expected keyboard interaction.\n\nResult: the focus indicator for the tab item must meet the requirements of this Success Criterion, judging focus with both selected and unselected tab items.\n\nA functional example of sub-component-only tab focus has an indicator that is large enough (at least four times the shortest side) with sufficient contrast to pass the focus area language of this Success Criterion.\n\nWhere something with focus is not a user interface component\n\nSome pages contain very large editing regions, such as web implementations of word processors and code editors. Unlike a textarea element, which is a user interface component, these large editing regions do not typically meet the definition of user interface components; they are not \"perceived by users as a single control for a distinct function.\" Providing focus indicators around such editing regions may still be beneficial to some; however, where the region is not perceived as a single control, it is not covered by this Success Criterion. The web page will still need to provide a insertion point (caret indicator) in such editing regions in order to meet the requirements of 2.4.7 Focus Visible.\n\nSome non-operable elements can take focus (such as a heading element that is the target of a skip link). However, the preamble of this Success Criterion refers to user interface components; it is only when the element with focus is operable by keyboard that this Success Criterion applies.\n\nExceptions\n\nThere are two situations where the focus appearance does not need to be assessed:\n\nthe focus indicator cannot be adjusted by the author\nthe author has not modified the effects of the user agent default\nFirst exception: the focus indicator cannot be adjusted by the author\n\nThe focus indicator is determined by the user agent and cannot be adjusted by the author \n\nSome components or technologies may not allow the author to adjust the focus indicator. This is the case with HTML select elements (both single and multi-select), where the visual treatments for selection and focus cannot be adjusted by the author. In this case the Success Criterion does not apply.\n\nFigure 23 Passes: The user agent's default select element presentation cannot be modified by the author, so it passes regardless of the quality of the focus indicator\nSecond exception: the default indicator and background are not modified\n\nThe focus indicator and the indicator's background color are not modified by the author\n\nIf the focus indicator and the background behind the focus indicator are not modified by the author, the Success Criterion does not apply.\n\nThe intent of this exception is to reduce burden on authors by allowing them to rely on the default indicators provided by user agents (browsers). If all user agents provided good focus indicators, authors would be able to concentrate efforts on other accessibility considerations. Unfortunately, browser default focus indicators vary by component, browser, and across devices and operating systems, and the default focus indicators in some browsers can be difficult to see (such as a 1px dotted outline). For this reason, most authors override browser defaults in order to overcome these deficiencies and create a more uniform user experience, regardless of browser.\n\nSome browser makers are improving their default focus indicators to make them more visible. As more browsers adopt defaults that meet the primary bullets of this Success Criterion, authors will be able to achieve improved focus indicators without customization.\n\nModifying the focus indicator background\n\nBrowser default focus indicators can be made more difficult to see if the author modifies the pixels directly adjacent to the indicator (commonly referred to as its background), such as by positioning a component on top of an image or gradient background, or altering the page's default white background color, for instance using a blue background in combination with a browser's blue default indicator. For this reason, where the author alters the pixels directly adjacent to the default focus indicator, the user agent exception does not apply, and the author will need to verify they meet the size and contrast requirements of this Success Criterion.\n\nNote\n\nAltering the body element's background-color attribute is one way of altering the pixels directly adjacent to the indicator in most implementations. However, specifying a value of white (#FFFFFF) does not nullify this exception since, as established in the third note of the contrast ratio definition, the default (\"unspecified\") color is assumed to be white.\n\nAs well, if the browser provides an indicator within a component by default, then authors can potentially reduce the visibility by changing the component color (which in such a scenario is the background color for the focus indicator). For example, if the default indicator on a button uses a colored inner border, authors can negatively affect the focus appearance by making the button or its unfocused border color a similar-luminosity color. For this reason, this user agent exception can only be met if the author both does not modify the default focus indicator and does not modify its background.\n\nFigure 24 Fails: The middle button is focused using a browser's default focus indicator, but it is very difficult to tell which button is focused because the custom blue border on the unfocused button uses a similar color.",
      "benefitsText": "Benefits\nThis Success Criterion helps anyone who relies on the keyboard to operate the page, by letting them visually determine the component on which keyboard operations will interact at any point in time.\nPeople with attention limitations, short term memory limitations, or limitations in executive processes benefit by being able to discover where the focus is located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.1 ポインタのジェスチャ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   マルチポイント又は軌跡ベースのジェスチャを使って操作する機能はすべて、軌跡ベースのジェスチャなしのシングルポインタで操作することができる。ただし、マルチポイント又は軌跡ベースのジェスチャが必要不可欠である場合は例外とする。\n   \t\t\t\t\t\n   注記この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (ユーザエージェントや支援技術の操作に必要なアクションには適用されない)。\n\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that content can be controlled with a range of pointing devices, abilities, and assistive technologies. Some people cannot perform gestures in a precise manner, or they may use a specialized or adapted input device such as a head pointer, eye-gaze system, or speech-controlled mouse emulator. Some pointing methods lack the capability or accuracy to perform multipoint or path-based gestures.\n\nA path-based gesture involves an interaction where not just the endpoints matter, but how the pointer moves between these points.\n\nIf the gesture is only recognised if the user moves in a (mostly) straight line from the start point to the end point, it is an example of a path-based gesture.\n\nFigure 1 A path-based gesture where pointer movement is only allowed in a straight line from the start-point to the end-point. If the user strays from the straight directional path, the gesture is not recognised, has no effect, or is aborted.\n\nIf going through an intermediate point (usually near the start of the gesture) affects its meaning, then it is a path-based gesture. The user engages a pointer (starting point), carries out a movement that goes through at least one intermediate-point before disengaging the pointer (end point). The intermediate point defines the gesture as requiring a specific path, even if the complete path is not defined.\n\nFigure 2 A path-based gesture involves starting a pointer movement that goes through at least one intermediate point before the end-point. The end-point may be a continuation, or allow for various movements.\n\nExamples of path-based gestures include swiping, sliders and carousels dependent on the direction of interaction, and other gestures which trace a prescribed path such as drawing a specific shape. Such paths may be drawn with a finger or stylus on a touchscreen, graphics tablet, or trackpad, or with a mouse, joystick, or similar pointer device.\n\nDragging is a movement where the user picks up an object with a pointer (such as mouse cursor or a finger) and moves it to some other position. This movement from start point to end point does not require the user to follow any particular path or direction. Dragging is therefore not path-based. In contrast, a path-based pointer gesture requires the traversal of an intermediate point, which is a technical way of expressing that the directionality and possibly speed of the gesture communicates a particular command to the system. Dragging motions are covered in Success Criterion 2.5.7: Dragging.\n\nFigure 3 A free-form gesture does not require any particular path before the end-point, only the start and (optionally) the end point matter. This is not path-based\n\nNote\n\nAny movement of a pointer could be difficult or impossible to use for someone who cannot perform precise movements, therefore alternative forms of interaction are always recommended. This success criterion is scoped to path-based gestures as it may be difficult or impossible to provide an alternative for free-form gestures.\n\nExamples of multipoint gestures include a two-finger pinch zoom, a split tap where one finger rests on the screen and a second finger taps, or a two- or three-finger tap or swipe. Users may find it difficult or impossible to accomplish these if they type and point with a single finger or stick.\n\nAuthors must ensure that their content can be operated without multipoint or path-based gestures. Multipoint or path-based gestures can be used so long as the functionality can also be operated by another method, such as a tap, click, double tap, double click, long press, or click & hold.\n\nThis Success Criterion applies to gestures in the author-provided content, not gestures defined by the operating system, user agent, or assistive technology. Examples of operating system gestures would be swiping down to see system notifications and gestures for built-in assistive technologies (AT). Examples of user agent-implemented gestures would be horizontal swiping implemented by browsers for navigating within the page history, or vertical swiping to scroll page content.\n\nThere are times when a component requires a path-based gesture for touch screen devices but not with a mouse. Taking an example of a generic slider:\n\nUsing a mouse: If the user clicks on the thumb control of the slider and moves vertically, the slider will respond by moving to the right or left, even if the movement is mostly upwards. There will be no page scrolling as a result of the vertical movement as long as they drag with focus on the slider. Therefore, the slider does not require a path-based gesture with mouse pointer.\nUsing a touch-screen: If the user puts their finger on the thumb control of the slider and moves upwards more than sideways, the slider may not respond because the browser takes control of the swipe and interprets it as a scroll, and will move the page up and down. Moving left or right on the slider thumb engages the slider and then the user can vary their vertical movement. This implementation has the 3-point requirement to work with a finger on a touch screen device so is a path-based gesture.\n\nAs touch screen devices can apply default gestures it is important to test with them if you are unsure whether a particular component does require a path-based gesture.\n\nBrowsers on a touch screen device generally provide some default gestures that impact whether a path-based gesture is needed. For example, a web browser on a touch-screen devices might detect a vertical gesture and scroll the page. If a user places their finger on a slider thumb and moves up (to scroll down) that might not activate the slider (depending on implementation). If the user moves horizontally first then the slider could capture that gesture and ignore vertical movement, resulting in a path-based gesture. If you include touch-screen devices as accessibility supported then these types of interaction need testing with a touch screen as using a mouse in a similar way would not trigger the same browser behavior.\n\nThis Success Criterion does not require all functionality to be available through pointing devices, but if it is available to pointer devices then it should not require path-based gestures. While content authors generally need to provide keyboard commands or other non-pointer mechanisms that perform actions equivalent to complex gestures (see Success Criterion 2.1.1 Keyboard), this is not sufficient to conform to this Success Criterion. That is because some users rely entirely on pointing devices, or find simple pointer inputs much easier to perform and understand than alternatives. For example, a user relying on a head-pointer would find clicking a control to be much more convenient than activating an on-screen keyboard to emulate a keyboard shortcut, and a person who has difficulty memorizing a series of keys (or gestures) may find it much easier to simply click on a labeled control. Therefore, if one or more pointer-based mechanisms are supported, then their benefits should be afforded to users through simple, single-point actions alone.\n\nSingle pointer operations include taps and clicks, double-taps and double-clicks, long presses, swiping, dragging, and path-based gestures. Gestures such as \"pinch to zoom\" or two-finger swipes are multipoint gestures, as they require two or more pointer inputs - in this case, two fingers on a touchscreen.\n\nAn exception is made for functionality that is inherently and necessarily based on complex paths or multipoint gestures. For example, entering your signature may be inherently path-based (although acknowledging something or confirming your identity need not be).\n\nThis Success Criterion does not apply to gestures that involve dragging in any direction because only the start and end points matter in a dragging operation. However, such gestures do require fine motor control. Authors are encouraged to provide non-dragging methods, for instance, a drag and drop operation could also be achieved by selecting an item (with a tap or keyboard interaction) and then selecting its destination as a second step.",
      "benefitsText": "Benefits\n\nUsers who cannot (accurately) perform path-based pointer gestures - on a touchscreen, or with a mouse - will have alternative means for operating the content.\n\nUsers who cannot perform multi-pointer gestures on a touchscreen (for instance, because they are operating the touchscreen with an alternative input such as a head pointer) will have a single-pointer alternative for operating the content.\n\nUsers who may not understand the custom gesture interaction intended by the author will be able to rely on simple, frequently used gestures to interact. This can be especially beneficial for users with cognitive or learning disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pointer-gestures.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.2 ポインタのキャンセル",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   シングルポインタを使って操作できる機能は、以下の要件の少なくとも 一つを満たす。\n   \t\t\t\t\t\n   \n   \n   ダウンイベントがない \n     機能を実行する目的でポインタのダウンイベントを使用していない。\n      \t\t\t\t\t\t\n   中止又は元に戻すことができる \n     機能の完了にはアップイベントを使用し、かつ機能の完了前に中止する、又は機能の完了後に元に戻すためのメカニズムが利用できる。\n      \t\t\t\t\t\t\n   アップイベントで反転 \n     アップイベントによって、先のダウンイベントのすべての結果が反転する。\n      \t\t\t\t\t\t\n   必要不可欠\n     ダウンイベントによって機能を完了させることが必要不可欠である。\n      \t\t\t\t\t\t\n   \n   注記 1キーボードまたはテンキーパッドのキープレスをエミュレートする機能は必須と考えられる。\n   \t\t\t\t\t\n  注記 2この要件は、ポインタの動作を解釈するウェブコンテンツに適用される (ユーザエージェントや支援技術の操作に必要なアクションには適用されない)。\n\t\n",
      "intentText": "Intent\n\nThe intent of this success criterion is to make it easier for users to prevent accidental or erroneous pointer input. People with various disabilities can inadvertently initiate touch or mouse events with unwanted results. Each of the following subsections roughly aligns with the bullets of this Success Criterion, and outlines a means of allowing users to cancel pointer operations.\n\nUp-Event activation or completion\n\nThe most accessible way to incorporate pointer cancellation is to make activation occur on the up-event.\n\nUp-event activation refers to the activation of a target when the pointer is released. In a touchscreen interaction, when the finger touches a target, the up-event activation only occurs when the finger is lifted while still being within the target boundary. Similarly in mouse interaction, the up-event occurs when the mouse button is released while the cursor is still within the boundary of the initial target set when the mouse button was pressed.\n\nAuthors can reduce the problem of users inadvertently triggering an action by using generic platform activation/click events that activate functionality on the up-event. For example, the click event in JavaScript triggers on release of the primary mouse button, and is an example of an implicit up-event. Despite its name, the click event is device-independent and also works for touch and keyboard interaction.\n\nThe preference for up-events is implicit in the Success Criterion wording of the first bullet: The down-event of the pointer is not used to execute any part of the function. Authors meet the first bullet by using only the up-event.\n\nUp-Event Abort or Undo\n\nWhere the interaction is equivalent to a simple \"click\", up-event activation has a built-in ability to cancel. There is a distinction between when someone touches a screen and when they remove their finger. Similarly, in mouse interaction, there is a difference between pressing and releasing the mouse button. When activation occurs only as the pointer is released, users have the opportunity to Abort (cancel) the activation. Users who have difficulty accurately using a mouse or touchscreen benefit greatly from this basic behaviour. They normally receive visual feedback when an item is pressed. If they discover they have selected the wrong item, they can cancel the action by moving their pointer or finger away from the target before releasing.\n\nFor more complex interactions, such as drag and drop, the down- and up-events may initiate and end a series of actions to complete a process. For example, with drag and drop, the item may be:\n\nselected with a press (down-event),\nmoved to a new location, while still being depressed, and\nreleased (up-event) to conclude the drop action.\n\nIn such a complex action, the need for an Abort or Undo function increases. Designers may elect to confirm the move through something like a confirmation dialog or an undo button, giving the user the ability to Undo the process just completed. Alternatively, the ability to Abort the action can be achieved if, before completing step 3, the user returns the selected item to its original location and concludes the process there. If other parts of the screen disallow a move, the user can conclude the drag and drop there, effectively nullifying the operation.\n\nUp Reversal\n\nIn other interactions, the down-event may trigger a behaviour which can be reversed when the up-event concludes. Examples of this include press-and-hold actions such as where a transient popup appears (or a video plays) when the user presses on an object (down-event), but the popup (or video) disappears as soon as the user releases the pointer (up-event). Since the up-event reverses the preceding down event, the user is returned to their prior point, and has effectively cancelled the operation.\n\nDown-Event\n\nCompleting the function on the down-event is only permitted when it is essential that the up-event not be used.\n\nThe most prevalent essential down-event activation occurs in keyboard emulation. On a physical keyboard, keys by default activate on the down-event -- a letter appears when the key is pressed. If a software keyboard emulator tried to override this expected behaviour by making letters appear when the key is released, the behaviour would be unexpected and would adversely affect expected interaction.\n\nNote that a keyboard has a built-in Backspace or Delete button, which effectively provides an Undo option. Undo is not a requirement of the down-event Essential exception; however, providing an easy way for users to undo any action is a recommended practice (and may be a functional necessity), even where it is not a requirement of this Success Criterion.\n\nOther examples where the timing of an activation is essential and requires the down-event would be:\n\nAn activity that emulates a physical on-press trigger, such as when playing an on-screen piano keyboard. Activation on the up-event would significantly alter the desired behaviour.\nA program for shooting skeets where waiting for the \"up\" event would invalidate the precise timing necessary for the activation.",
      "benefitsText": "Benefits\nMakes it easier for all users to recover from hitting the wrong target.\nHelps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a control will be accidentally activated or an action will occur unexpectedly, and also ensures that where complex controls are activated, a means of Undoing or Aborting the action is available.\nIndividuals who are unable to detect changes of context are less likely to become disoriented while navigating a site.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pointer-cancellation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 2.5.3 ラベルを含む名前 (name)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n\t\n  ユーザインタフェース コンポーネントがテキスト又は文字画像を含むラベルを持つ場合、視覚的に提示されたテキストが名前 (name) に含まれている。\n\n  注記ベストプラクティスは、ラベルのテキストを名前 (name) の最初に使用することである。\n\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that the words which visually label a component are also the words associated with the component programmatically. This helps ensure that people with disabilities can rely on visible labels as a means to interact with the components.\n\nMost controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the Accessible Name. Users typically have a much better experience if the words and characters in the visible label of a control match or are contained within the accessible name. When these match, speech-input users (i.e., users of speech recognition applications) can navigate by speaking the visible text labels of components, such as menus, links, and buttons, that appear on the screen. Sighted users who use text-to-speech (e.g., screen readers) will also have a better experience if the text they hear matches the text they see on the screen.\n\nNote that where a visible text label does not exist for a component, this Success Criterion does not apply to that component.\n\nWhere text labels exist and are properly linked to the user interface components through established authoring practices, the label and name will normally match. When they don't match, speech-input users who attempt to use the visible text label as a means of navigation or selection (e.g., \"move to Password\") will be unsuccessful. The speech-based navigation fails because the visible label spoken by the users does not match (or is not part of) the accessible name that is enabled as a speech-input command. In addition, when the accessible name is different from the visible label, it may function as a hidden command that can be accidentally activated by speech-input users.\n\nMismatches between visible labels and programmatic names for controls are even more of an issue for speech-input and text-to-speech users who also have cognitive challenges. Mismatches create an extra cognitive load for speech-input users, who must remember to say a speech command that is different from the visible label they see on a control. It also creates extra cognitive load for a text-to-speech user to absorb and understand speech output that does not match the visible label.\n\nIn order for the label text and accessible name to be matched, it is first necessary to determine which text on the screen should be considered a label for any given control. There are often multiple text strings in a user interface that may be relevant to a control. However, there are reasons why it is best to conservatively interpret the label as being only the text in close proximity.\n\nConventionally the label for user interface components is the adjacent text string. The typical positioning for left to right languages is:\n\nimmediately to the left of comboboxes, dropdown lists, text inputs, and other widgets (or in the absence of left-side labels, immediately above and aligned with the left edge of each input)\nimmediately to the right of checkboxes and radio buttons\ninside buttons and tabs or immediately below icons serving as buttons\n\nThe rationale for some of these conventions is explained in G162: Positioning labels to maximize predictability of relationships.\n\nIt is important to bias towards treating only the adjacent text as a label because liberal interpretations of what constitutes a text label can jeopardize the value of this Success Criterion (SC) by lessening predictability. Isolating the label to the single string in close proximity to the component makes it easier for developers, testers, and end users to identify the label targeted for evaluation in this SC. Predictable interpretation of labeling allows users of speech recognition technologies to interact with the element via its conventionally positioned label, and allows users of screen reading technologies to enjoy consistency between the nearby visible label and the announced name of the component.\n\nNote that placeholder text within an input field is not considered an appropriate means of providing a label. The HTML5 specification states The placeholder attribute should not be used as an alternative to a <label>. However, it is worth noting that \"label\" in that HTML5 statement is in code brackets and links to the label element. For the purposes of this Label in Name Success Criterion, \"label\" is not used in such a programmatic sense but is simply referring to a text string in close visual proximity to a component. As such, in the absence of any other nearby text string (as described in the preceding list), if an input contains placeholder text, such text may be a candidate for Label in Name. This is supported both through the accessible name calculation (discussed later) and from the practical sense that where a visible label is not otherwise provided, it is likely that a speech-input user may attempt to use the placeholder text value as a means of interacting with the input.\n\nText labels \"express something in human language\"\nSymbolic text characters\n\nFor the purposes of this SC, text should not be considered a visible label if it is used in a symbolic manner, rather than directly expressing something in human language as per the definition of text in WCAG. For example, 1.4.5 Images of Text describes considerations for \"symbolic text characters.\" In the images of text example \"B\", \"I\", and \"ABC\" appear on icons in a text editor, where they are meant to symbolize the functions for Bold, Italics, and Spelling, respectively. In such a case, the accessible name should be the function the button serves (e.g., \"Spell check\" or \"Check spelling\"), not the visible symbolic characters. A similar text editor is shown in the figure below.\n\nFigure 1 A detail of the rich text editor in Github, showing a variety of unlabeled icons, including icons resembling text characters.\n\nLikewise, where an author has used a greater-than symbol (\">\") to mimic the appearance of the right-facing arrow, the text does not convey something in human language. It is a symbol, in this scenario likely meant to mimic the icons used for a \"Play\" button or a \"Next\" arrow.\n\nPunctuation and capitalization\n\nThe use of punctuation and capitalization in labels may also be considered optional for the same reason. For example, the colon conventionally added at the end of input labels does not express something in human language, and capitals on the first letter of each word in a label do not normally alter the words' meaning. This is particularly relevant in the context of this SC, since it is primarily aimed at users of speech recognition; capitals and most punctuation are frequently ignored when a user speaks a label as a means of interacting with a control.\n\nWhile it is certainly not an error to include the colon and capitalization in the accessible name, a computed name of \"First name\" should not be considered a failure of \"First Name:\".\nFirst Name: \nLikewise, \"Next…\" visibly shown on a button could have \"Next\" as the accessible name. When in doubt, where a meaningful visible label exists, match the string exactly for the accessible name.\n\n\nMathematical expressions and formulae\n\nMathematical expressions are an exception to the previous subsection about symbolic characters. Math symbols can be used as labels; for example \"11×3=33\" and \"A>B\" convey meaning. The label should not be overwritten in the accessible name, and substitutions of words where a formula is used should be avoided since there are multiple ways to express the same equation. For example, making the name \"eleven multiplied by three is equivalent to thirty-three\" might mean a user who said \"eleven times three equals thirty-three\" may not match. It is best to leave the formulas as used in the label and count on the user's familiarity with their speech software to achieve a match. Further, converting a mathematical formula label into an accessible name that is a spelled-out equivalent may create issues for translation. The name should match the label's formula text. Note that a consideration for authors is to use the proper symbol in the formula. For instance 11x3 (with a lower or upper case letter X), 11*3 (with the asterisk symbol), and 11×3 (with the &times; symbol) are all easy for sighted users to interpret as meaning the same formula, but may not all be matched to \"11 times 3\" by the speech recognition software. The proper operator symbol (in this case the times symbol) should be used.\nA>B A=B A<B\n\nAccessible Name and Description Computation specification\n\nIt is important to understand how the accessible name is derived. The Accessible Name and Description Computation 1.1 and the HTML Accessibility API Mappings 1.0 describe how the accessible name is computed, including which attributes are considered in its calculation, and in what order of preference. If a component has multiple possible attribute values that could be used for its accessible name, only the most preferred of those values will be computed. None of the other, less preferred values will be part of the name. For the most part, existing established programmatic relationships between labels and controls are reinforced by the specification.\n\nOther text displayed on the screen that is correctly coded to meet 1.3.1: Info and Relationships is not normally factored into the calculation for the accessible name of a UI component without author intervention (via ARIA labeling techniques). The most common of these are:\n\nheadings and instructions\ngroup labels for sets of components (i.e., used with legend/fieldset or with role of group or radiogroup)\n\nSuch textual information may constitute part of the component's description. So from both a programmatic viewpoint, and from the conservative tactic of only considering a label to be \"adjacent text,\" neither headings, instructions, nor group 'labels' should normally be considered labels for the purpose of this Success Criterion.\n\nIt is important to note that the specification allows authors to override the name calculated through native semantics. Both aria-label and aria-labelledby take precedence in the name calculation, overriding the visible text as the accessible name even when the visible text label is programmatically associated with the control. For this reason, when a visible label already exists, aria-label should be avoided or used carefully, and aria-labelledby should be used as a supplement with care.\n\nFinally, aria-describedby is not included in the Accessible Name computation (instead it is part of the Accessible Description computation). By convention, text associated with a control through aria-describedby is announced immediately after the accessible name by screen readers. Therefore, the context of headings, instructions, and group labels can be provided through the accessible description to assist users of screen readers without affecting the experience of those who navigate using speech recognition software.",
      "benefitsText": "Benefits\nSpeech-input users can directly activate controls on a page with fewer surprising changes of focus.\nText-to-speech users will have a better experience because the labels that they hear match the visible text labels that they see on the screen.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.1 ページの言語",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   それぞれのウェブページのデフォルトの自然言語がどの言語であるか、プログラムによる解釈が可能である。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that content developers provide information in the Web page that user agents need to present text and other linguistic content correctly. Both assistive technologies and conventional user agents can render text more accurately when the language of the Web page is identified. Screen readers can load the correct pronunciation rules. Visual browsers can display characters and scripts correctly. Media players can show captions correctly. As a result, users with disabilities will be better able to understand the content.\n\nThe default human language of the Web page is the default text-processing language as discussed in Internationalization Best Practices: Specifying Language in XHTML & HTML Content. When a Web page uses several languages, the default text-processing language is the language which is used most. (If several languages are used equally, the first language used should be chosen as the default human language.)\n\nNote\n\nFor multilingual sites targeting Conformance Level A, the Working Group strongly encourages developers to follow Success Criterion 3.1.2 as well even though that is a Level AA Success Criterion.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps:\n\npeople who use screen readers or other technologies that convert text into synthetic speech;\npeople who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets or decoding words;\npeople with certain cognitive, language and learning disabilities who use text-to-speech software\npeople who rely on captions for synchronized media.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/language-of-page.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.2 一部分の言語",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツの一節、又は語句それぞれの自然言語がどの言語であるか、プログラムによる解釈が可能である。ただし、固有名詞、技術用語、言語が不明な語句、及びすぐ前後にあるテキストの言語の一部になっている単語又は語句は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that user agents can correctly present phrases, passages, and in some cases words written in multiple languages. This makes it possible for user agents and assistive technologies to present content according to the presentation and pronunciation rules for that language. This applies to graphical browsers as well as screen readers, braille displays, and other voice browsers.\n\nBoth assistive technologies and conventional user agents can render text more accurately if the language of each passage of text is identified. Screen readers can use the pronunciation rules of the language of the text. Visual browsers can display characters and scripts in appropriate ways. This is especially important when switching between languages that read from left to right and languages that read from right to left, or when text is rendered in a language that uses a different alphabet. Users with disabilities who know all the languages used in the Web page will be better able to understand the content when each passage is rendered appropriately.\n\nWhen no other language has been specified for a phrase or passage of text, its human language is the default human language of the Web page (see Success Criterion 3.1.1). So the human language of all content in single language documents can be programmatically determined.\n\nIndividual words or phrases in one language can become part of another language. For example, \"rendezvous\" is a French word that has been adopted in English, appears in English dictionaries, and is properly pronounced by English screen readers. Hence a passage of English text may contain the word \"rendezvous\" without specifying that its human language is French and still satisfy this Success Criterion. Frequently, when the human language of text appears to be changing for a single word, that word has become part of the language of the surrounding text. Because this is so common in some languages, single words should be considered part of the language of the surrounding text unless it is clear that a change in language was intended. If there is doubt whether a change in language is intended, consider whether the word would be pronounced the same (except for accent or intonation) in the language of the immediately surrounding text.\n\nMost professions require frequent use of technical terms which may originate from a foreign language. Such terms are usually not translated to all languages. The universal nature of technical terms also facilitate communication between professionals.\n\nSome common examples of technical terms include: Homo sapiens, Alpha Centauri, hertz, and habeas corpus.\n\nIdentifying changes in language is important for a number of reasons:\n\nIt allows braille translation software to follow changes in language, e.g., substitute control codes for accented characters, and insert control codes necessary to prevent erroneous creation of Grade 2 braille contractions.\nSpeech synthesizers that support multiple languages will be able to speak the text in the appropriate accent with proper pronunciation. If changes are not marked, the synthesizer will try its best to speak the words in the default language it works in. Thus, the French word for car, \"voiture\" would be pronounced \"voyture\" by a speech synthesizer that uses English as its default language.\nMarking changes in language can benefit future developments in technology, for example users who are unable to translate between languages themselves will be able to use machines to translate unfamiliar languages.\nMarking changes in language can also assist user agents in providing definitions using a dictionary.",
      "benefitsText": "Benefits\n\nThis Success Criterion helps:\n\npeople who use screen readers or other technologies that convert text into synthetic speech;\npeople who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets, decoding words, and understanding words and phrases;\npeople with certain cognitive, language and learning disabilities who use text-to-speech software;\npeople who rely on captions to recognize language changes in the soundtrack of synchronized media content.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/language-of-parts.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "聴覚障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.3 一般的ではない用語",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   慣用句及び業界用語を含めて、一般的ではない、又は限定された用法で使われている単語、又は語句の、明確な定義を特定するメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nCertain disabilities make it difficult to understand nonliteral word usage and specialized words or usage. Certain disabilities make it difficult to understand figurative language or specialized usage. Providing such mechanisms is vital for these audiences. Specialized information intended for non-specialist readers is encouraged to satisfy this Success Criterion, even when claiming only Single-A or Double-A conformance.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people with cognitive, language and learning disabilities who:\n\nhave difficulty decoding words\nhave difficulty understanding words and phrases\nhave difficulty using context to aid understanding\n\nIt would also help people with visual disabilities who:\n\nlose context when zoomed-in with a screen magnifier",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/unusual-words.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.4 略語",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   略語の元の語、又は意味を特定するメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users can access the expanded form of abbreviations.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people who:\n\nhave difficulty decoding words;\nrely on screen magnifiers (magnification may reduce contextual cues);\nhave limited memory;\nhave difficulty using context to aid understanding.\n\nAbbreviations may confuse some readers in different ways:\n\nSome abbreviations do not look like normal words and cannot be pronounced according to the usual rules of the language. For example, the English word \"room\" is abbreviated as \"rm,\" which does not correspond to any English word or phoneme. The user has to know that \"rm\" is an abbreviation for the word \"room\" in order to say it correctly.\nSometimes, the same abbreviation means different things in different contexts. For example, in the English sentence \"Dr. Johnson lives on Boswell Dr.,\" the first \"Dr.\" is an abbreviation for \"Doctor\" and the second instance is an abbreviation for the word \"Drive\" (a word that means \"street\"). Users must be able to understand the context in order to know what the abbreviations mean.\nSome acronyms spell common words but are used in different ways. For example, \"JAWS\" is an acronym for a screen reader whose full name is \"Job Access with Speech.\" It is also a common English word referring to the part of the mouth that holds the teeth. The acronym is used differently than the common word.\nSome acronyms sound like common words but are spelled differently. For example, the acronym for Synchronized Multimedia Integration Language, S M I L, is pronounced like the English word \"smile.\"\n\nIt would also help people with visual disabilities who:\n\nLose context when zoomed-in with a screen magnifier",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/abbreviations.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.5 読解レベル",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   固有名詞や題名を取り除いた状態で、テキストが前期中等教育レベルを超えた読解力を必要とする場合は、補足コンテンツ又は前期中等教育レベルを超えた読解力を必要としない版が利用できる。\n   \n",
      "intentText": "Intent\n\nContent should be written as clearly and simply as possible. The intent of this Success Criterion is:\n\nto ensure that additional content is available to aid the understanding of difficult or complex text;\nto establish a testable measure indicating when such additional content is required.\n\nThis Success Criterion helps people with reading disabilities while also allowing authors to publish difficult or complex Web content. Text difficulty is described in terms of the level of education required to read the text. Education levels are defined according to the International Standard Classification of Education [[UNESCO]], which was created to allow international comparison among systems of education.\n\nDifficult or complex text may be appropriate for most members of the intended audience (that is, most of the people for whom the content has been created). But there are people with disabilities, including reading disabilities, even among highly educated users with specialized knowledge of the subject matter. It may be possible to accommodate these users by making the text more readable. If the text cannot be made more readable, then supplemental content is needed. Supplemental content is required when text demands reading ability more advanced than the lower secondary education level—that is, more than nine years of school. Such text presents severe obstacles to people with reading disabilities and is considered difficult even for people without disabilities who have completed upper secondary education.\n\nReading disabilities such as dyslexia make it difficult to recognize written or printed words and associate them with the correct sounds. This is called \"decoding\" the text. Decoding must be automatic in order for people to read fluently. The act of decoding text word by word consumes much of the mental energy that most people are able to use for understanding what they read. Text that uses short, common words and short sentences is easier to decode and usually requires less advanced reading ability than text that uses long sentences and long or unfamiliar words.\n\nThe education level required to read text content (also called \"readability\") is measured by analyzing selected passages of text from the Web page. If the Web page includes text written for different purposes or different styles are used, the selected passages include samples of the types of content in the Web page and the different styles in which the content is written. (In many cases, the Web page contains only one kind of text content—e.g., technical documentation, a legal notice, marketing material, etc.—and all the content uses the same style.)\n\nEducators can also measure the education level required to read text content. For example, qualified teachers can evaluate text according to local education standards to determine if it requires reading ability beyond what is expected for students in the last year of lower secondary education.\n\nBecause people's names, the names of cities or other proper names cannot be changed to shorter names with fewer syllables, and because doing so or just referring to everyone by pronouns can make sentences harder to understand, the success criterion specifies that proper names can be ignored or removed from the text before assessing whether it meets the reading ability requirement. Titles refer to the name of documents, books, movies, etc. Titles are removed or ignored for the analysis because changing the words in titles might make the titles easier to read but would make it impossible to understand the item to which the title refers. This would make it harder to read and understand the content. (e.g., a book, academic paper, article, etc.). Therefore, titles are also exempted specifically.\n\nWhen a Web page contains multiple languages, a readability result should be calculated for each language that constitutes at least 5% of the content and that is used in full sentences or paragraphs (not just individual words or phrases). The overall readability of the page should be judged on the language that yields the worst readability results.\n\nThe readability of content may also be determined by applying a readability formula to the selected passage. Many (though not all) readability formulas base their calculations on passages of 100 words. Such formulas have been developed for many languages. The number of words in the passage is counted and the length of the words is determined by counting either the number of syllables or the number of characters. Most readability formulas also count the number and length of sentences. The average length of words and sentences in the content is then used to calculate a readability score. (Some languages, such as Japanese, may include multiple scripts within the same passage. Readability formulas for these languages may use the number and length of such \"runs\" in their calculations.) The result may be presented as a number (for example, on a scale from 0-100) or as a grade level. These results can then be interpreted using the education levels described in the International Standard Classification of Education. Readability formulas are available for at least some languages when running the spell checkers in popular software if you specify in the options of this engine that you want to have the statistics when it has finished checking your documents.\n\nPrimary education\nFirst 6 years of school\nLower secondary education\n7-9 years of school\nUpper secondary education\n10-12 years of school\nAdvanced education\nMore than 12 years of school\n\nAdapted from International Standard Classification of Education (UNESCO).\n\nNote\n\nAccording to the Open Society Mental Health Initiative, the concept of Easy to Read cannot be universal, and it will not be possible to write a text that will suit the abilities of all people with literacy and comprehension problems. Using the clearest and simplest language appropriate is highly desirable, but the WCAG Working Group could not find a way to test whether this had been achieved. The use of reading level is a way to introduce testability into a Success Criterion that encourages clear writing. Supplementary content can be a powerful technique for people with some classes of cognitive disability.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people who:\n\nHave difficulty comprehending and interpreting written language (e.g., articles, instructions, or newspapers in text or braille), for the purpose of obtaining general knowledge or specific information",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/reading-level.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.1.6 発音",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   文脈において、発音が分からないと単語の意味が不明瞭になる場合、その単語の明確な発音を特定するメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help people who are blind, people who have low vision, and people with reading disabilities to understand content in cases where meaning depends on pronunciation. Often words or characters have different meanings, each with its own pronunciation. The meaning of such words or characters can usually be determined from the context of the sentence. However, for more complex or ambiguous sentences, or for some languages, the meaning of the word cannot be easily determined or determined at all without knowing the pronunciation. When the sentence is read aloud and the screen reader reads the word using the wrong pronunciation, it can be even more difficult to understand than when read visually. When words are ambiguous or indeterminate unless the pronunciation is known, then providing some means of determining the pronunciation is needed.\n\nFor example, in the English language heteronyms are words that are spelled the same but have different pronunciations and meanings, such as the words desert (abandon) and desert (arid region). If the proper pronunciation can be determined from the context of the sentence, then nothing is required. If it cannot then some mechanism for determining the proper pronunciation would be required. Additionally, in some languages certain characters can be pronounced in different ways. In Japanese, for example, there are characters like Han characters(Kanji) that have multiple pronunciations. Screen readers may speak the characters incorrectly without the information on pronunciation. When read incorrectly, the content will not make sense to users.",
      "benefitsText": "Benefits\n\nThis Success Criterion may help people who:\n\nhave difficulty decoding words\nhave difficulty using context to aid understanding\nuse technologies that read the words aloud",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/pronunciation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.1 フォーカス時",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   いずれのユーザインターフェイス コンポーネントも、フォーカスを受け取ったときにコンテキストの変化を引き起こさない。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that functionality is predictable as visitors navigate their way through a document. Any component that is able to trigger an event when it receives focus must not change the context. Examples of changing context when a component receives focus include, but are not limited to:\n\nforms submitted automatically when a component receives focus;\nnew windows launched when a component receives focus;\nfocus is changed to another component when that component receives focus;\n\nFocus may be moved to a control either via the keyboard (e.g. tabbing to a control) or the mouse (e.g. clicking on a text field). Moving the mouse over a control does not move the focus unless scripting implements this behavior. Note that for some types of controls, clicking on a control may also activate the control (e.g. button), which may, in turn, initiate a change in context.\n\nNote\n\nWhat is meant by \"component\" here is also sometimes called \"user interface element\" or \"user interface component\".",
      "benefitsText": "Benefits\nThis Success Criterion helps people with visual disabilities, cognitive limitations, and motor impairments by reducing the chance that a change of context will occur unexpectedly.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/on-focus.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.2 入力時",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ユーザインタフェース コンポーネントの設定を変更することが、コンテキストの変化を自動的に引き起こさない。ただし、利用者が使用する前にその挙動を知らせてある場合を除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that entering data or selecting a form control has predictable effects. Changing the setting of any user interface component is changing some aspect in the control that will persist when the user is no longer interacting with it. So checking a checkbox, entering text into a text field, or changing the selected option in a list control changes its setting, but activating a link or a button does not. Changes in context can confuse users who do not easily perceive the change or are easily distracted by changes. Changes of context are appropriate only when it is clear that such a change will happen in response to the user's action.\n\nNote\n\nThis Success Criterion covers changes in context due to changing the setting of a control. Clicking on links or tabs in a tab control is activating the control, not changing the setting of that control.\n\nNote\n\nWhat is meant by \"component\" and \"user interface component\" here is also sometimes called \"user interface element\".",
      "benefitsText": "Benefits\nThis Success Criterion helps users with disabilities by making interactive content more predictable. Unexpected changes of context can be so disorienting for users with visual disabilities or cognitive limitations that they are unable to use the content.\n\nIndividuals who are unable to detect changes of context are less likely to become disoriented while navigating a site. For example:\n\nIndividuals who are blind or have low vision may have difficulty knowing when a visual context change has occurred, such as a new window popping up. In this case, warning users of context changes in advance minimizes confusion when the user discovers that the back button no longer behaves as expected.\nSome individuals with low vision, with reading and intellectual disabilities, and others who have difficulty interpreting visual cues may benefit from additional cues in order to detect changes of context.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/on-input.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.3 一貫したナビゲーション",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中にある複数のウェブページ上で繰り返されているナビゲーションのメカニズムは、繰り返されるたびに相対的に同じ順序で出現する。ただし、利用者が変更した場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to encourage the use of consistent presentation and layout for users who interact with repeated content within a set of Web pages and need to locate specific information or functionality more than once. Individuals with low vision who use screen magnification to display a small portion of the screen at a time often use visual cues and page boundaries to quickly locate repeated content. Presenting repeated content in the same order is also important for visual users who use spatial memory or visual cues within the design to locate repeated content.\n\nIt is important to note that the use of the phrase \"same order\" in this section is not meant to imply that subnavigation menus cannot be used or that blocks of secondary navigation or page structure cannot be used. Instead, this Success Criterion is intended to assist users who interact with repeated content across Web pages to be able to predict the location of the content they are looking for and find it more quickly when they encounter it again.\n\nUsers may initiate a change in the order by using adaptive user agents or by setting preferences so that the information is presented in a way that is most useful to them.",
      "benefitsText": "Benefits\nEnsuring that repeated components occur in the same order on each page of a site helps users become comfortable that they will able to predict where they can find things on each page. This helps users with cognitive limitations, users with low vision, users with intellectual disabilities, and also those who are blind.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.4 一貫した識別性",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   ウェブページ一式の中で同じ機能を有するコンポーネントは、一貫して識別できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure consistent identification of functional components that appear repeatedly within a set of Web pages. A strategy that people who use screen readers use when operating a Web site is to rely heavily on their familiarity with functions that may appear on different Web pages. If identical functions have different labels (or, more generally, a different accessible name) on different Web pages, the site will be considerably more difficult to use. It may also be confusing and increase the cognitive load for people with cognitive limitations. Therefore, consistent labeling will help.\n\nThis consistency extends to the text alternatives. If icons or other non-text items have the same functionality, then their text alternatives should be consistent as well.\n\nIf there are two components on a web page that both have the same functionality as a component on another page in a set of web pages, then all 3 must be consistent. Hence the two on the same page will be consistent.\n\nWhile it is desirable and best practice always to be consistent within a single web page, 3.2.4 only addresses consistency within a set of web pages where something is repeated on more than one page in the set.",
      "benefitsText": "Benefits\nPeople who learn functionality on one page on a site can find the desired functions on other pages if they are present.\nWhen non-text content is used in a consistent way to identify components with the same functionality, people with difficulty reading text or detecting text alternatives can interact with the Web without depending on text alternatives.\nPeople who depend on text alternatives can have a more predictable experience. They can also search for the component if it has a consistent label on different pages.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/consistent-identification.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.5 要求による変化",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテキストの変化は利用者の要求によってだけ生じるか、又は、そのような変化を止めるメカニズムが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to encourage design of Web content that gives users full control of changes of context. This Success Criterion aims to eliminate potential confusion that may be caused by unexpected changes of context such as automatic launching of new windows, automatic submission of forms after selecting an item from a list, etcetera. Such unexpected changes of context may cause difficulties for people with motor impairments, people with low vision, people who are blind, and people with certain cognitive limitations.\n\nSome types of change of context are not disruptive to some users, or actively benefit some users. For example, single-switch users rely on context changes that are animated by the system, and the preferences of low-vision users may vary depending on how much of the content they can see at once and how much of the session structure they can retain in working memory. Some types of content, such as slide shows, require the ability to change context in order to provide the intended user experience. Content that initiates changes of context automatically only when user preferences allow can conform to this Success Criterion.\n\nNote\n\nIt is possible for more than one change of context to occur simultaneously. For example, clicking on a link which automatically opens a new window is an example of two separate changes of context related to the change in content and to the change in the viewport (window). The change in the content in this case is initiated by user request when they click on the link, but unless the user can be aware that the link will open in a new window then that change of context cannot be regarded as user-initiated.",
      "benefitsText": "Benefits\n\nIndividuals who are unable to detect changes of context or may not realize that the context has changed are less likely to become disoriented while navigating a site. For example:\n\nindividuals who are blind or have low vision may have difficulty knowing when a visual context change has occurred, such as a new window popping up. In this case, warning users of context changes in advance minimizes confusion when the user discovers that the back button no longer behaves as expected.\nSome individuals with low vision, with reading and intellectual disabilities, and who have difficulty interpreting visual cues may benefit from additional cues in order to detect changes of context.\nPeople with certain cognitive limitations do not get confused if automatic redirects are performed by the Web server instead of the browser.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/change-on-request.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.2.6 一貫したヘルプ",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n  ウェブページが次のヘルプのメカニズムのいずれかを含み、かつ、それらのメカニズムがウェブページ一式の中にある複数のウェブページで繰り返されている場合、他のページコンテンツに対して相対的に同じ順序で出現する。ただし、変更が利用者によって行われた場合は除く。\n\n    \n        人間への連絡先\n        人間への連絡メカニズム\n        自己解決のためのオプション\n        完全に自動化された連絡メカニズム\n    \n\n  注記 1ヘルプのメカニズムは、ページ上で直接提供されることもあれば、その情報を含む別のページへの直接リンクを経由して提供されることもある。\n  注記 2この達成基準における「他のページコンテンツに対して相対的に同じ順序」は、ページが線形化されたときのコンテンツの並べ方と考えることができる。ヘルプのメカニズムの視覚的な位置は、ページの同じバリエーション (例えば CSS のブレークポイント) に対してページ間で一貫している可能性が高い。利用者は、ページのズーム、ページの向きを変えるなどの変更を発生させることができ、これはページのバリエーションが変化するきっかけになる可能性がある。この達成基準で扱うのは、同じバリエーション (例えば、同じズームレベル、向き) で表示されるページ同士の間における、相対的な順序である。\n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure users can find help for completing tasks on a Web site, when it is available. When the placement of the help mechanism is kept consistent across a set of pages, users looking for help will find it easier to identify. This is distinct from interface-level help, such as contextual help, features like spell checkers, and instructional text in a form.\n\nLocating the help mechanism in a consistent location across pages makes it easier for users to find it. For example, when a mechanism or link is located in the header of one Web page, it will be easier to find if it is in the header of other pages. The help mechanism, such as a contact phone number, may be provided directly on the page, or it may also be a direct link to a contact page. Regardless of which approach is used, the mechanism must be located in the same relative order on each page within the set of pages.\n\nWhen testing this Success Criterion, it is the help item which is relative to the rest of the content. When testing a page, other content that is present across the set of web pages and is before the help item should be before the help item on this page. Items which are after the help item on other pages should be after the help item on this page.\n\nIf the help item is visually in a different location, but in the same serial order, that is not helpful from a user's point of view, but it would not fail this criterion.\n\nWhen having problems completing a task on a Web site (or part of a Web site, what we call a set of Web pages), people with some types of disabilities may not be able to work through the issue without further help. Issues could include difficulty: completing a form, or finding a document or page which provides information required to complete a task.\n\nWithout help, some users may abandon the task. They may also fail to correctly complete a task, or they may require assistance from people who do not necessarily keep private information secure.\n\nLimitations and Exceptions\n\nIt is not the intent of this Success Criterion to require authors to provide help or access to help. The Criterion only requires that when one of the listed forms of help is available across multiple pages that it be in a consistent location. It does not require authors to provide help information on PDFs or other static documents that may be available for viewing/download from the Web pages. PDFs and other static documents are not considered part of the \"set of web pages\" from which they are downloaded.\n\nIt is also not the intent of this Success Criterion to require a human be available at all times. Ideally, if the human contact is not available during certain hours or certain days then information would be provided so the user can tell when it will be available.\n\nThis Success Criterion only requires help mechanisms to be consistent within a particular set of web pages. Some complex Web sites consist of multiple different sets of web pages with different purposes. For example, a web-based spreadsheet application might have one set of pages for editing spreadsheets and a separate set of pages for marketing the application. This Success Criterion would allow the different sets of web pages to use different help mechanism locations. However, it is best if help mechanisms are located as consistently as possible even among different related sets of web pages.\n\nThis Success Criterion contains an exception when \"a change is initiated by the user.\" This exception is intended to cover cases where a user performs an action with the intent of changing the display or layout of a page, such as changing the zoom level, orientation, or viewport size. Help mechanism locations may change in response to such a user-initiated change; as the criterion's second note clarifies, \"this criterion is concerned with relative order across pages displayed in the same page variation (e.g., same zoom level and orientation).\"\n\nThis exception allows the location in a smaller viewport to be different than in a larger viewport. However, it is best if the mechanism or link is consistent across a set of web pages. A consistent location, both visually and programmatically, is the most usable.\n\nThis exception is not intended to treat every action that a user might initiate as a \"change\"; to qualify for the exception, the user must be initiating an action that would reasonably be expected to change the relative order of components within a page. For example, merely navigating between pages within a set of web pages is not a \"change initiated by the user\" for the purposes of this exception. Similarly, logging into or out of a page would not typically qualify, unless logging in would present the user with a distinct set of web pages.\n\nHelp Mechanisms\n\nTypical help mechanisms include:\n\nHuman contact details such as a phone number, email address, hours of operation.\nHuman contact mechanism such as a messaging system, chat client, contact form, social media channel.\nSelf-help option such as an up-to-date Frequently Asked Questions, How Do I page, Support page.\nA fully automated contact mechanism such as a chatbot.\n\nThe order of the types of help listed in the Success Criterion does not imply priority.\n\nSupport for people with cognitive and learning disabilities\n\nThis section is not required by the Consistent Help success criterion, but provides advice related to Making Content Usable for People with Cognitive and Learning Disabilities.\n\nThe human contact details enable users to connect with the organization or the part of the organization that can assist with the content. For example, an online jobs / recruitment portal may provide a contact method for the team that supports the recruitment portal and not a catch-all for the entire company. Each layer of contact added prolongs the time before the user will receive help.\n\nThe human contact mechanism enables a person to express what they are looking for using their own words. For some with cognitive disabilities, this may be the best way for them to find an answer to their problem.\n\nFor pages for which no human support is available it helps if a self-help option says that no human support is available. Self-help options can go beyond allowing the user to search within the site. Contextual help is still recommended (see Success Criterion 3.3.5 for more information), but a self-help option provides a single location that makes it easier for people with cognitive disabilities to understand what help is available without having to hunt for it. While some people may easily be able to identify that no support would be available for a particular type of Web site, this may not be apparent to some users with disabilities.\n\nChatbots can work for many people, and particularly for people with cognitive disabilities if they:\n\nrecognize misspelled words,\nprovide human contact details if the chatbot is unable to provide a satisfactory response after 3 attempts, and\ncan be dismissed with a single interaction, and recalled using a link or button.\n\nThis criterion does not require that a site provide a help mechanism. However, when help is available:\n\nPeople who may have difficulty locating help are more likely to find it and complete their task.\nUsers that experience cognitive fatigue or cognitive shut down will be able to reserve their energy for the task, instead of using it to find support.\nEnabling users (especially those with cognitive disabilities) to find solutions while expressing their question using their own words (for example by interacting with a chatbot) increases their chances of success for completing a task.\n\nSelf help methods beyond the site, such as using internet search to find the contact information for an organization, can be too difficult. Further, the user's disability may make it more difficult to find the help available (such as a \"contact us\" link, phone number, or support page) if the information is not consistently present within a few interactions (e.g., displayed in the header, or via a menu). In addition, for some users with disabilities, struggling to complete a task on a site may cause additional cognitive challenges when searching for help within the site.\n\nWhen a user is quickly able to find help, they are able to complete the task even if they encounter challenges.",
      "benefitsText": "Benefits\nPeople who may have difficulty locating help are more likely to find it when it is consistently located.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/consistent-help.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.1 エラーの特定",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   入力エラーが自動的に検出された場合は、エラーとなっている箇所が特定され、そのエラーが利用者にテキストで説明される。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users are aware that an error has occurred and can determine what is wrong. The error message should be as specific as possible. In the case of an unsuccessful form submission, re-displaying the form and indicating the fields in error is insufficient for some users to perceive that an error has occurred. Screen reader users, for example, will not know there was an error until they encounter one of the indicators. They may abandon the form altogether before encountering the error indicator, thinking that the page simply is not functional. Per the definition, an \"input error\" is information provided by the user that is not accepted. This includes:\n\ninformation that is required by the web page but omitted by the user, or\ninformation that is provided by the user but that falls outside the required data format or allowed values.\n\nFor example:\n\nthe user fails to enter the proper abbreviation in to state, province, region, etc. field;\nthe user enters a state abbreviation that is not a valid state;\nthe user enters a non existent zip or postal code;\nthe user enters a birth date 2 years in the future;\nthe user enters alphabetic characters or parentheses into their phone number field that only accepts numbers;\nthe user enters a bid that is below the previous bid or the minimum bid increment.\n\nNote\n\nIf a user enters a value that is too high or too low, and the coding on the page automatically changes that value to fall within the allowed range, the user's error would still need to be described to them as required by the success criterion. Such an error description telling the person of the changed value would meet both this success criterion (Error Identification) and Success Criterion 3.3.3 (Error Suggestion).\n\nThe identification and description of an error can be combined with programmatic information that user agents or assistive technologies can use to identify an error and provide error information to the user. For example, certain technologies can specify that the user's input must not fall outside a specific range, or that a form field is required. This type of programmatic information is not required for this success criterion, but may be covered by other criteria such as 4.1.2 Name, Role, Value.\n\nIt is perfectly acceptable to indicate the error in other ways such as image, color etc, in addition to the text description.\n\nSee also 3.3.3: Error Suggestion.",
      "benefitsText": "Benefits\nProviding information about input errors in text allows users who are blind or colorblind to perceive the fact that an error occurred.\nThis Success Criterion may help people with cognitive, language, and learning disabilities who have difficulty understanding the meaning represented by icons and other visual cues.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-identification.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.2 ラベル又は説明",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテンツが利用者の入力を要求する場合は、ラベル又は説明文が提供されている。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to have content authors present instructions or labels that identify the controls in a form so that users know what input data is expected. In the case of radio buttons, checkboxes, comboboxes, or similar controls that provide users with options, each option must have an appropriate label so that users know what they are actually selecting. Instructions or labels may also specify data formats for data entry fields, especially if they are out of the customary formats or if there are specific rules for correct input. Content authors may also choose to make such instructions available to users only when the individual control has focus especially when instructions are long and verbose.\n\nThe intent of this Success Criterion is not to clutter the page with unnecessary information but to provide important cues and instructions that will benefit people with disabilities. Too much information or instruction can be just as harmful as too little. The goal is to make certain that enough information is provided for the user to accomplish the task without undue confusion or navigation.\n\nThis Success Criterion does not require that labels or instructions be correctly marked up, identified, or associated with their respective controls - this aspect is covered separately by 1.3.1: Info and Relationships. It is possible for content to pass this Success Criterion (providing relevant labels and instructions) while failing Success Criterion 1.3.1 (if the labels or instructions aren't correctly marked up, identified, or associated).\n\nFurther, this Success Criterion does not take into consideration whether or not alternative methods of providing an accessible name or description for form controls and inputs has been used - this aspect is covered separately by 4.1.2: Name, Role and Value. It is possible for controls and inputs to have an appropriate accessible name or description (e.g. using aria-label=\"...\") and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion (if the labels or instructions aren't presented to all users, not just those using assistive technologies).\n\nThis Success Criterion does not apply to links or other controls (such as an expand/collapse widget, or similar interactive components) that are not associated with data entry.\n\nWhile this Success Criterion requires that controls and inputs have labels or instructions, whether or not labels (if used) are sufficiently clear or descriptive is covered separately by 2.4.6: Headings and Labels.",
      "benefitsText": "Benefits\nProviding labels and instructions (including examples of expected data formats) helps all users - but particularly those with cognitive, language, and learning disabilities - to enter information correctly.\nProviding labels and instructions (including identification of required fields) can prevent users from making incomplete or incorrect form submissions, which prevents users from having to navigate once more through a page/form in order to fix submission errors.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.3 エラー修正の提案",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   入力エラーが自動的に検出され、修正方法を提案できる場合、その提案が利用者に提示される。ただし、セキュリティ又はコンテンツの目的を損なう場合は除く。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users receive appropriate suggestions for correction of an input error if it is possible. The definition of \"input error\" says that it is \"information provided by the user that is not accepted\" by the system. Some examples of information that is not accepted include information that is required but omitted by the user and information that is provided by the user but that falls outside the required data format or allowed values.\n\nSuccess Criterion 3.3.1 provides for notification of errors. However, persons with cognitive limitations may find it difficult to understand how to correct the errors. People with visual disabilities may not be able to figure out exactly how to correct the error. In the case of an unsuccessful form submission, users may abandon the form because they may be unsure of how to correct the error even though they are aware that it has occurred.\n\nThe content author may provide the description of the error, or the user agent may provide the description of the error based on technology-specific, programmatically determined information.",
      "benefitsText": "Benefits\nProviding information about how to correct input errors allows users who have learning disabilities to fill in a form successfully.\nUsers who are blind or have impaired vision understand more easily the nature of the input error and how to correct it.\nPeople with motion impairment can reduce the number of times they need to change an input value.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.4 誤り防止 (法的、金融、データ)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者にとって法律行為もしくは金融取引が生じる、利用者が制御可能なデータストレージシステム上のデータを変更もしくは削除する、又は利用者が試験の解答を送信するウェブページでは、次に挙げる事項のうち、少なくとも一つを満たしている\n\n   \n     取消送信を取り消すことができる。\n     チェック利用者が入力したデータの入力エラーがチェックされ、利用者には修正する機会が提供される。\n     確認 送信を完了する前に、利用者が情報の見直し、確認及び修正をするメカニズムが利用できる。\n  \n  \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users with disabilities avoid serious consequences as the result of a mistake when performing an action that cannot be reversed. For example, purchasing non-refundable airline tickets or submitting an order to purchase stock in a brokerage account are financial transactions with serious consequences. If a user has made a mistake on the date of air travel, he or she could end up with a ticket for the wrong day that cannot be exchanged. If the user made a mistake on the number of stock shares to be purchased, he or she could end up purchasing more stock than intended. Both of these types of mistakes involve transactions that take place immediately and cannot be altered afterwards, and can be very costly. Likewise, it may be an unrecoverable error if users unintentionally modify or delete data stored in a database that they later need to access, such as their entire travel profile in a travel services web site. When referring to modification or deletion of 'user controllable' data, the intent is to prevent mass loss of data such as deleting a file or record. It is not the intent to require a confirmation for each save command or the simple creation or editing of documents, records or other data.\n\nUsers with disabilities may be more likely to make mistakes. People with reading disabilities may transpose numbers and letters, and those with motor disabilities may hit keys by mistake. Providing the ability to reverse actions allows users to correct a mistake that could result in serious consequences. Providing the ability to review and correct information gives the user an opportunity to detect a mistake before taking an action that has serious consequences.\n\nUser-controllable data is user-viewable data that the user can change and/or delete through an intentional action. Examples of the user controlling such data would be updating the phone number and address for the user's account, or deleting a record of past invoices from a website. It does not refer such things as internet logs and search engine monitoring data that the user can't view or interact with directly.",
      "benefitsText": "Benefits\nProviding safeguards to avoid serious consequences resulting from mistakes helps users with all disabilities who may be more likely to make mistakes.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-prevention-legal-financial-data.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.5 ヘルプ",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   コンテキストに応じたヘルプが利用できる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users avoid making mistakes. Some users with disabilities may be more likely to make mistakes than users without disabilities. Using context-sensitive help, users find out how to perform an operation without losing track of what they are doing.\n\nContext-sensitive help only needs to be provided when the label is not sufficient to describe all functionality. The existence of context-sensitive help should be obvious to the user and they should be able to obtain it whenever they require it.\n\nThe content author may provide the help text, or the user agent may provide the help text based on technology-specific, programmatically determined information.",
      "benefitsText": "Benefits\nAssistance for text input helps individuals with writing disabilities and people with reading and intellectual disabilities who often have difficulty writing text in forms or other places that need text input.\nAdditionally, these kinds of assistance help people who are aging and have the same difficulty in text input and/or mouse operation.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/help.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.6 誤り防止 (すべて)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   利用者に情報の送信を要求するウェブページでは、次に挙げる事項のうち、少なくとも一つを満たしている\n   \n   \n     取消送信を取り消すことができる。\n     チェック利用者が入力したデータの入力エラーがチェックされ、利用者には修正する機会が提供される。\n     確認 送信を完了する前に、利用者が情報の見直し、確認及び修正をするメカニズムが利用できる。\n  \n\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to help users with disabilities avoid consequences that may result from making a mistake when submitting form data. This criterion builds on Success Criterion 3.3.4 in that it applies to all forms that require users to submit information.\n\nUsers with disabilities may be more likely to make mistakes and may have more difficulty detecting or recovering from mistakes. People with reading disabilities may transpose numbers and letters, and those with motor disabilities may hit keys by mistake. Providing the ability to reverse actions allows users to correct a mistake. Providing the ability to review and correct information gives the user an opportunity to detect a mistake before taking an action.",
      "benefitsText": "Benefits\nProviding safeguards to avoid consequences resulting from mistakes helps users with all disabilities who may be more likely to make mistakes.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/error-prevention-all.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.7 冗長な入力項目",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    以前に利用者によって入力された、又は利用者に対して提供された情報であって、同一のプロセスにおいて再入力する必要がある情報は、次のいずれかである。\n\n    \n        自動入力される。又は、\n        利用者が選択可能である。\n    \n    ただし、次の場合は除く: \n    \n        情報の再入力が必要不可欠である。\n        その情報がコンテンツのセキュリティを確保するために必要である。又は、\n        以前に入力された情報が無効になっている。\n    \n\n ",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that users can successfully complete multi-step processes. It reduces cognitive effort where information is asked for more than once during a process. It also reduces the need to recall information provided in a previous step.\n\nInformation that is required to be remembered for input can pose a significant barrier to users with cognitive or memory difficulties. All users experience a natural gradual mental fatigue as they proceed through steps in a process. This fatigue is accelerated by the stress of recalling information from short-term working memory. Users with learning, and cognitive disabilities are highly susceptible to mental fatigue.\n\nRequiring people to recall information previously entered can cause them to give up or re-enter the same information incorrectly. The autocomplete feature of browsers is not considered sufficient because it is the content (the web site) that needs to provide the stored information for a redundant entry, or avoid asking for the same information again.\n\nThis Success Criterion does not add a requirement to store information between sessions. A process is defined on the basis of an activity and is not applicable when a user returns after closing a session or navigating away. However, a process can run across different domains, so if a check-out process includes a 3rd party payment provider, that would be in scope.\n\nThe term \"available to select\" is not prescriptive. The term allows authors to develop techniques where auto-population is not possible. It can include allowing the user to:\n\nselect and populate a field, including from a drop-down;\nselect text from the page and copy it into an input;\ntick a checkbox to populate inputs with the same values as previously entered (e.g., my billing address is the same as my shipping address).\n\nData which is \"available to select\" would need to be on the same page. Ideally, it would be visible by default and closely associated with the input where the data is required. However, it could be elsewhere on a page, including within a show/hide component.\n\nThis Success Criterion does not apply if data is provided by the user with a different method, such as uploading a resume in a document format.\n\nThis Success Criterion does not impact Accessible Authentication (Minimum), for which allowing auto-filling of passwords is a sufficient technique. In that case the filling is performed by the user's browser. Redundant Entry is asking for the website content to make the previous entry available, but not between sessions or for essential purposes such as asking for a password.\n\nThis criterion does not include requirements or exceptions specific to privacy or personally identifiable information (PII), but when implementing techniques such as auto-population, authors should ensure data protection when storing information even temporarily during a process. It is possible to eliminate redundant entry in ways that do not introduce additional privacy risks, but it is also possible that a poor implementation (for meeting this criterion) could leak additional PII.\n\nThere are exceptions for:\n\nEssential uses of input re-entry for things like memory games which would be invalidated if the previous answers were supplied.\nSecurity measures such as preventing a password string from being shown or copied. When creating a password, it should be a unique and complex string and therefore cannot be validated by the author. If the system requires the user to manually create a password that is not displayed, having users re-validate their new string is allowed as an exception.\nWhen the previously entered information is no longer valid, it can be requested that the user enter that information again.",
      "benefitsText": "Benefits\nUsers with cognitive disabilities experience short-term, working memory difficulty. Not having to repeatedly remember particular information reduces stress and the likelihood of mistakes.\nUsers who experience difficulty forming new memories, recalling information, and other functions related to cognition can complete processes without having to unnecessarily rely on their memory.\nUsers with mobility impairments, for example using switch control or voice input, benefit from a reduced need for text entry.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/redundant-entry.html",
      "beneficiaries": [
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.8 アクセシブルな認証 (最低限)",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    認知機能テスト (パスワードを記憶する、パズルを解く、など) は、認証プロセスのどのステップにおいても要求されない。ただし、そのステップが次の少なくとも一つを提供する場合は除く。 \n    \n        代替手段\n        認知機能テストに依存しない別の認証方法がある。\n        メカニズム\n        認知機能テストを利用者が完遂できるように支援するメカニズムが利用できる。\n        物体の認識\n        認知機能テストは、物体を認識させるものである。\n        個人特有のコンテンツ\n        認知機能テストは、その利用者本人がウェブサイトに提供した非テキストコンテンツを識別させるものである。\n    \n\n    注記 1「物体の認識」及び「個人特有のコンテンツ」は、画像、映像、又は音声によって表現される場合がある。\n    注記 2この達成基準を満たすメカニズムの例としては、次が挙げられる。\n            パスワードマネージャーによるパスワード入力の支援によって、記憶の必要性を軽減する。\n            コピー＆ペーストによって、再度のタイピングに伴う認知負荷を軽減する。\n        \n    \n    \n ",
      "intentText": "Intent\n\nThe purpose of this Success Criterion is to ensure there is an accessible, easy-to-use, and secure method for users to authenticate when logging into an existing account. As the most prevalent form of authentication, Web sites commonly rely on usernames and passwords to log in. However, memorizing a username and password places a very high or impossible burden upon people with certain cognitive disabilities, as do additional steps often added to authentication processes. For instance, the need to transcribe a one-time verification code or requiring a puzzle to be solved.\n\nWhile Web sites can use the recognition of objects or of non-text content provided by the user to meet this Success Criterion, such techniques do not fully support the cognitive accessibility community and should be avoided if possible. Refer to Accessible Authentication (Enhanced) for guidance to be more inclusive and accessible.\n\nThis Success Criterion is focused on authentication of existing users. It does not cover creation of a username or initiation of an account. For many Web sites, establishing an initial username and credentials may not differ greatly from logging in with that username. The techniques used to satisfy this criterion (particularly allowing pasting into inputs and not relying on transcription) can also reduce the cognitive burden in account creation. However, the focus of the Success Criterion is on reducing the ongoing need for users to recall previously supplied information each time they log in or otherwise authenticate to an account.\n\nCognitive Function Tests\n\nRemembering a site-specific password is a cognitive function test. Such tests are known to be problematic for many people with cognitive disabilities. Whether it is remembering random strings of characters, or a pattern gesture to perform on a touch screen, cognitive function tests will exclude some people. When a cognitive function test is used, at least one other authentication method must be available which is not a cognitive function test.\n\nSome CAPTCHA systems have an audio alternative of the visible text. If the user needs to transcribe this audio, it cannot be used to meet the Alternative exception.\n\nIf there is more than one step in the authentication process, such as with multi-factor authentication, all steps need to comply with this Success Criterion to pass. There needs to be a path through authentication that does not rely on cognitive function tests.\n\nBeing able to recover or change the email and password is an important part of authentication. If the user is authenticating with alternative information in order to recover their account, there needs to be a method that is not a cognitive function test.\n\nMany organizations are required to use 2-factor authentication that combines independent sources to confirm a user's identity. These sources can consist of combining authentication through:\n\nknowledge (e.g., password, letters in a passphrase or memorized swipe path);\npossession (e.g., a verification code generated or received on a device, or scanning of a QR code on an external device);\nbiometrics (e.g., fingerprint scanning, facial recognition or keystroke dynamics).\n\nMost knowledge-based authentication methods rely on a cognitive function test, so mechanisms to assist users must be available. When authentication relies on performing an action on a separate device, it should be possible to complete the action without the need to transcribe information. It may not be possible to know what device-based authentication methods are available to a user; offering a choice of methods can allow them to choose the path that most suits them.\n\nAuthentication Approaches\n\nWeb sites can employ username (or email) and password inputs as an authentication method if the author enables the user agent (browsers and third-party password managers) to fill in the fields automatically. Generally, if the login form meets Success Criterion 1.3.5 Input Purpose, and the form controls have an appropriate accessible name in accordance with Success Criterion 4.1.2 Name, Role, Value, the user agent should be able to reliably recognize the fields and automatically fill them in. However, if the user agent is actively blocked from filling in the fields (for instance, by a script), then the page would not pass this criterion because it prevents the mechanism from working.\n\nCopy and paste\n\nCopy and paste can be relied on to avoid transcription. Users can copy their login credentials from a local source (such as a standalone third-party password manager) and paste it into the username and password fields on a login form, or into a web-based command line interfaces asking for a password. Blocking people from pasting into authentication fields, or using a different format between the copied text and the input field (for example, \"Enter the 3rd, 4th, and 6th character of your password\"), would force the user to transcribe information and therefore fail this criterion, unless another method is available.\n\nTwo-factor authentication systems (verification codes)\n\nBeyond usernames and passwords, some sites may use two-factor authentication, asking the user to enter a verification code (also called a passcode or one-time password). A service that requires manual transcription of a verification code is not compliant. As with usernames and passwords, it must be possible for a user to at least paste the code (such as from a standalone third-party password manager, text message application, or software-based security key), or to allow user agents to fill in the fields automatically.\n\nThere are scenarios where a verification code must be received or generated on a secondary device. For example, authenticating in a web browser on a laptop requires a verification code that is sent as an SMS text message to a mobile phone. However, in most cases, it is possible for the code to then be sent directly to the primary device, where it can then be copied and pasted (for example, by copying the code on the secondary device and emailing it to the primary device, or through the use of a shared cross-device clipboard where copying content on the secondary device makes it available to paste on the primary device). Evaluating whether or not the code can be seamlessly transferred from the secondary device to the primary device is outside of the scope for this Success Criterion. For the purpose of evaluating Web content that relies on authentication using these types of secondary device systems, it is assumed that provisions are in place that make the code available in the user's clipboard. Evaluating this criterion therefore only requires verification that the web content does allow pasting the clipboard content in the related authentication challenge field.\n\nNote that two-factor systems that do not rely on codes — including hardware authentication devices (such as YubiKey), secondary applications (either on the same primary device, or on a secondary device) that expect the user to confirm that it is indeed them trying to log in, and authentication methods provided by the user's operating system (such as Windows Hello, or Touch ID/Face ID on macOS and iOS) — are not a cognitive function test.\n\nObject Recognition\n\nIf a CAPTCHA is used as part of an authentication process, there must be a method that does not include a cognitive function test, unless it meets the exception. If the test is based on something the website has set such as remembering or transcribing a word, or recognizing a picture the website provided, that would be a cognitive functional test. Recognizing objects, or a picture the user has provided is a cognitive function test; however, it is excepted at the AA level.\n\nAn object in this context means the general English definition (\"a material thing that can be seen and touched\") and can include vehicles and animals. If the test goes beyond recognition (e.g. multiply the number cats by the number of dogs), that does not meet the exception.\n\nSome forms of object recognition may require an understanding of a particular culture. For example, taxis can appear differently in different locales. This is an issue for many people, including people with disabilities, but it is not considered an accessibility-specific issue.\n\nSome CAPTCHAs and cognitive function tests used for authentication may only appear in certain situations, such as when ad blockers are present, or after repeated incorrect password entry. This criterion applies when these tests are used regardless of whether they are used every time or only triggered by specific scenarios.\n\nThere are a number of technologies that can be employed to prevent scripted abuse of the authentication process.\n\n1.1.1. Rate-limited Access\n1.1.2. Client Geo-Location\n1.1.3. Private Client Authentication\n\nNone of these systems are 100% effective. However, they may reduce the likelihood of a CAPTCHA being displayed.\n\nPersonal Content\n\nPersonal content is sometimes used as a second factor for authentication. For example, as part of account creation the user would upload a picture, and when logging in they would be asked to select that picture from several possible alternatives. Care must be taken to provide adequate security in this case, since non-legitimate users might be able to guess the correct personal content when presented with a choice.\n\nText-based personal content does not qualify for this exception as it relies on recall (rather than recognition), and transcription (rather than selecting an item). Whilst picture-based personal content will still be a barrier for some people, text based versions tend to be a much larger barrier.\n\nHiding characters\n\nAnother factor that can contribute to cognitive load is hiding characters when typing. Although this criterion requires that users do not have to type in (transcribe) a password, there are scenarios where that is necessary such as creating a password to be saved by a password manager. Providing a feature to optionally show a password can improve the chance of success for some people with cognitive disabilities or those who have difficulties with accurately typing.",
      "benefitsText": "Benefits\n\nPeople with cognitive issues relating to memory, reading (for example, dyslexia), numbers (for example, dyscalculia), or perception-processing limitations will be able to authenticate irrespective of the level of their cognitive abilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 3.3.9 アクセシブルな認証 (高度)",
      "conformanceLevel": "AAA",
      "successCriteriaText": "\n   \n    \n    \n    \n\t[New]\n    \n    認知機能テスト (パスワードを記憶する、パズルを解く、など) は、認証プロセスのどのステップにおいても要求されない。ただし、そのステップが次の少なくとも一つを提供する場合は除く。 \n    \n        代替手段\n        認知機能テストに依存しない別の認証方法がある。\n        メカニズム\n        認知機能テストを利用者が完遂できるように支援するメカニズムが利用できる。\n    \n    \n ",
      "intentText": "Intent\n\nThe purpose of this Success Criterion is to ensure there is an accessible, easy-to-use, and secure method to log in, access content, and undertake tasks. This criterion is the same as Accessible Authentication (Minimum) but without the exceptions for objects and user-provided content.\n\nAny required step of the authentication process:\n\ncannot display a selection of images, videos, or audio clips, where users must choose which image they provided;\ncannot display a selection of images, where users must choose the images which contain a specific object, such as a car.",
      "benefitsText": "Benefits\n\nThe benefits of this Success Criterion are the same as Accessible Authentication (Minimum).\n\nPeople with cognitive issues relating to memory, reading (for example, dyslexia), numbers (for example, dyscalculia), or perception-processing limitations will be able to authenticate irrespective of the level of their cognitive abilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html",
      "beneficiaries": [
        "発達障害・認知障害のある人"
      ]
    },
    {
      "title": "達成基準 4.1.2 名前 (name)・役割 (role)・値 (value)",
      "conformanceLevel": "A",
      "successCriteriaText": "\n   \n   \n   \n   \n   \n   すべてのユーザインタフェース コンポーネント (フォームを構成する要素、リンク、スクリプトが生成するコンポーネントなど) では、名前 (name) 及び役割 (role) は、プログラムによる解釈が可能である。又、状態、プロパティ、利用者が設定可能な値はプログラムによる設定が可能である。そして、支援技術を含むユーザエージェントが、これらの項目に対する変更通知を利用できる。\n   \n   注記この達成基準は、主に独自のユーザインタフェース コンポーネントを開発、又はスクリプトで実装するコンテンツ制作者に向けたものである。例えば、標準的な HTML のコントロールを仕様に沿って使用していれば、既にこの達成基準を満たしていることになる。\n   \n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather appropriate information about, activate (or set) and keep up to date on the status of user interface controls in the content.\n\nWhen standard controls from accessible technologies are used, this process is straightforward. If the user interface elements are used according to specification the conditions of this provision will be met. (See examples of Success Criterion 4.1.2 below)\n\nIf custom controls are created, however, or interface elements are programmed (in code or script) to have a different role and/or function than usual, then additional measures need to be taken to ensure that the controls provide important and appropriate information to assistive technologies and allow themselves to be controlled by assistive technologies.\n\nWhat roles and states are appropriate to convey to assistive technology will depend on what the control represents. Specifics about such information are defined by other specifications, such as WAI-ARIA, or the relevant platform standards. Another factor to consider is whether there is sufficient accessibility support with assistive technologies to convey the information as specified.\n\nA particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent to user agents and assistive technology. Other examples of user interface control state are whether or not a checkbox or radio button has been selected, or whether or not a collapsible tree or list node is expanded or collapsed.\n\nNote\n\nSuccess Criterion 4.1.2 requires a programmatically determinable name for all user interface components. Names may be visible or invisible. Occasionally, the name needs to be visible, in which case it is identified as a label. Refer to the definition of name and label in the glossary for more information.",
      "benefitsText": "Benefits\nProviding role, state, and value information on all user interface components enables compatibility with assistive technology, such as screen readers, screen magnifiers, and speech recognition software, used by people with disabilities.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/name-role-value.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人",
        "四肢障害のある人"
      ]
    },
    {
      "title": "達成基準 4.1.3 ステータスメッセージ",
      "conformanceLevel": "AA",
      "successCriteriaText": "\n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   \n   \t\t\t\t\t\n   マークアップ言語を使って実装されたコンテンツでは、ステータスメッセージは、役割 (role) 又はプロパティを通してプログラムによる解釈が可能であり、フォーカスを受けとらなくても支援技術によって利用者に提示することができる。\n   \t\t\t\t\n",
      "intentText": "Intent\n\nThe intent of this Success Criterion is to make users aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.\n\nThe intended beneficiaries are blind and low vision users of assistive technologies with screen reader capabilities. An additional benefit is that assistive technologies for users with cognitive disabilities may achieve an alternative means of indicating (or even delaying or supressing) status messages, as preferred by the user.\n\nThe scope of this Success Criterion is specific to changes in content that involve status messages. A status message is a defined term in WCAG. There are two main criteria that determine whether something meets the definition of a status message:\n\nthe message provides information to the user on the success or results of an action, on the waiting state of an application, on the progress of a process, or on the existence of errors;\nthe message is not delivered via a change in context.\n\nInformation can be added to pages which does not meet the definition of a status message. For example, the list of results obtained from a search are not considered a status update and thus are not covered by this Success Criterion. However, brief text messages displayed about the completion or status of the search, such as \"Searching...\", \"18 results returned\" or \"No results returned\" would be status updates if they do not take focus. Examples of status messages are given in the section titled Status Message Examples below.\n\nThis Success Criterion specifically addresses scenarios where new content is added to the page without changing the user's context. Changes of context, by their nature, interrupt the user by taking focus. They are already surfaced by assistive technologies, and so have already met the goal to alert the user to new content. As such, messages that involve changes of context do not need to be considered and are not within the scope of this Success Criterion. Examples of scenarios that add new content by changing the context are given in the section titled Examples of Changes That Are Not Status Messages below.",
      "benefitsText": "Benefits\nWhen appropriate roles or properties are assigned to status messages, the new content is spoken by screen readers in such a way as to assist blind and low vision users. Most sighted users can observe text peripherally added to the viewport. Such content provides additional information without affecting the user's current point of regard. The ability of an assistive technology to announce such new important text content allows more users to benefit from an awareness of the information in an equivalent manner.\nAssigning proper roles or properties to status messages provides possible future uses and personalization opportunities, such as the potential to be exploited by assistive technologies created for users with some cognitive disabilities. Where page authors elect to design additions to the screen which do not change the user's context (i.e., take focus), the information is arguably of less importance than something presented using a modal dialog, which must be acknowledged by the user. As such, depending on the user's preferences, an assistive technology may choose to delay, suppress, or transform such messages so a user is not unnecessarily interrupted; or conversely the assistive technology may highlight such messages where the user finds it optimal to do so.",
      "understandingDocLink": "https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html",
      "beneficiaries": [
        "視覚障害のある人",
        "発達障害・認知障害のある人"
      ]
    }
  ]
}